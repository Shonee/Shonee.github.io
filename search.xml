<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Daily Hard (1)</title>
    <url>/daily-hard/</url>
    <content><![CDATA[<p> <a href="https://leetcode-cn.com/problems/insert-interval/">leetcode 57.插入区间</a> </p>
<a id="more"></a>

<p><strong>题目描述：</strong></p>
<blockquote>
<p>给出一个无重叠的，按照区间起始端点排序的区间列表。</p>
<p>在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要，可以合并区间）。</p>
</blockquote>
<p>**示例1： ** </p>
<blockquote>
<p><strong>输入：</strong> <code>intervals = [[1,3],[6,9]], newInterval = [2,5]</code> </p>
<p><strong>输出：</strong> <code>[[1,5],[6,9]]</code> </p>
</blockquote>
<p><strong>实例2：</strong> </p>
<blockquote>
<p><strong>输入：</strong> <code>intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]</code><br><strong>输出：</strong> <code>[[1,2],[3,10],[12,16]]</code><br>**解释： ** 新的区间<code>[4,8]</code> 与给出的区间集合中的区间有重合部分，取所有重合部分的并集合，得到最终无重合有序区间集合。</p>
</blockquote>
<p><strong>解题思路：</strong></p>
<p>插入一个新的区间，需要考虑的是新的区间是否和现有的区间有重叠的部分，已知现有的区间集合中所有区间无交叉且有序，则</p>
<blockquote>
<p>从头遍历区间数组，比较新区间的右端点与所有区间的左端点，来定位新区间的右边界；比较新区间的左端点与所有区间的右端点，定位新区间的左边界；</p>
<p>遍历时有如下判断：</p>
</blockquote>
<ul>
<li>创建一个存放区间的集合，进行区间的添加</li>
<li>如果新区间的左端点 &gt; 当前遍历区间的右端点：<ul>
<li>加入当前区间，迭代下一个区间进行判断</li>
</ul>
</li>
<li>如果新区间的右端点 &lt; 当前遍历区间的左端点<ul>
<li>则要加入新区间，设定完成标识，迭代加入余下区间</li>
</ul>
</li>
<li>都不满足时，新区间和现有区间有重叠，合并重叠的区间<ul>
<li>合并区间时左端点选择两个左端点中较小的一个</li>
<li>合并区间时右端点选择两个右端点中较大的一个</li>
<li>合并成一个区间后作为新区间去迭代完成遍历</li>
</ul>
</li>
<li>如果遍历完成后，新区间仍然没有完成添加，则最终加入新区间</li>
</ul>
<p>算法代码：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//执行用时：1 ms, 在所有 Java 提交中击败了99.48%的用户</span>
<span class="token comment" spellcheck="true">//内存消耗：40.6 MB, 在所有 Java 提交中击败了92.52%的用户</span>
<span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">insert1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intervals<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newInterval<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>newInterval<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> intervals<span class="token punctuation">;</span>
    List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> newInterval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r <span class="token operator">=</span> newInterval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//记录新集合是否已经添加进去，true的话后续不用比较</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interval <span class="token operator">:</span> intervals<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>interval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>l<span class="token punctuation">,</span>r<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>interval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> l<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//此时，当前集合与新集合一定有交集的，合并称为一个集合作为新集合</span>
            l <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>interval<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            r <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>interval<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//如果遍历结束后新集合仍然没有加入，则最后加入</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>l<span class="token punctuation">,</span>r<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//将list中的集合转到二维数组进行结果返回</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>        
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据结构与算法</category>
      </categories>
      <tags>
        <tag>Hard</tag>
        <tag>Algorithm</tag>
        <tag>Daily</tag>
        <tag>数组</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记</title>
    <url>/mysql-xue-xi-bi-ji/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="MySQL学习笔记"><a href="#MySQL学习笔记" class="headerlink" title="MySQL学习笔记"></a>MySQL学习笔记</h1><a id="more"></a>

<h2 id="1-MySQL基础知识"><a href="#1-MySQL基础知识" class="headerlink" title="1. MySQL基础知识"></a>1. MySQL基础知识</h2><blockquote>
<p>参考文章： <a href="https://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==&mid=2247503444&idx=3&sn=1e307a247838092dd22c4ccfcde71193&chksm=ce0e79d7f979f0c14c3e1e31e6ea951e5c71b13489257cd7df1607187a675860b120964d689c&mpshare=1&scene=24&srcid=1014ASyBj2RHmR9v2JM1GuDk&sharer_sharetime=1602682491574&sharer_shareid=c90d89447bde2426811e6f3556bd276d&key=835fcd8fd3846f683526f41906c3982d2f303c23d653002d6947ac25bb1c332794d85350653a9eac1b7a20380ac49ae95952ff218bffba0224cb5a3b581f20c568af940776c741d7fbffd77fb9647c67df3e940b7f59ea77e7b0ba4ebce9357650b49bdf376a089ce8f43f53669dd5d856948c18ccb46f14aef65a209fbb82f0&ascene=14&uin=MTU0NTA1NjAwMQ==&devicetype=Windows+10+x64&version=62090523&lang=zh_CN&exportkey=AZIVNnQgDS02YP26FewfMQA=&pass_ticket=WRKQP3G1bylvRFp+5dyKejmrjQcdw0gXiZjVA4XQVd8YXHZJBv66H4lgfERtCxdO&wx_header=0">mysql零散的基础知识</a> </p>
</blockquote>
<h3 id="1-1-SQL命令"><a href="#1-1-SQL命令" class="headerlink" title="1.1 SQL命令"></a>1.1 SQL命令</h3><blockquote>
<p>数据库SQL命令可以分为四组：DDL、DML、DCL和TCL</p>
</blockquote>
<img src="assets/SQL命令结构图.png" alt="image-20201107212233910" style="zoom:80%;" />

<p><strong>DDL(Data Definition Language)：</strong>  </p>
<blockquote>
<p>数据定义语言，处理数据库schemas和描述数据应如何驻留在数据库中</p>
</blockquote>
<p><strong>DML(Data Manipulation Language)：</strong> </p>
<blockquote>
<p>数据操纵语言，包括常见的SQL语句，用于存储、修改、检索和删除数据库中的数据</p>
</blockquote>
<p><strong>DCL(Data Control Language)：</strong> </p>
<blockquote>
<p>数据控制语言，包含如Grant之类的命令，主要涉及数据库系统的权限等控件</p>
</blockquote>
<p><strong>TCL(Transaction Control Language)：</strong> </p>
<blockquote>
<p>事务控制语言，用于处理数据库中的事务</p>
</blockquote>
<h3 id="1-2-数据库范式"><a href="#1-2-数据库范式" class="headerlink" title="1.2 数据库范式"></a>1.2 数据库范式</h3><blockquote>
<p>现在数据库范式最多满足3NF，普遍认为范式过高虽然对数据关系有更好的约束性，但也导致数据关系表增加而令数据库IO更易繁忙</p>
</blockquote>
<p><strong>第一范式：</strong></p>
<blockquote>
<p>第一范式要求数据库中的所有字段列都是单一属性，不可再分的。</p>
</blockquote>
<p><strong>第二范式：</strong> </p>
<blockquote>
<p>在满足第一范式的基础上，数据库中的表不存在非关键字段对任意关键字段的部分依赖</p>
</blockquote>
<p><strong>第三范式：</strong> </p>
<blockquote>
<p>在满足第二范式的基础上，所有的非主键列之间不存在传递依赖</p>
</blockquote>
<p>数据库设计时，遵循范式和反范式一直都是一个颇受争议的问题。遵循范式对数据关系有更好的约束性，并且减少数据冗余，可以更好的保证数据一致性。而反范式则是为了获得更好的性能。因此实际中要选择适合自己业务场景的。</p>
<p>反范式设计时，要考虑到关系表之间的<strong>插入异常</strong>、<strong>更新异常</strong>和<strong>删除异常</strong>。</p>
<h3 id="1-3-横表纵表"><a href="#1-3-横表纵表" class="headerlink" title="1.3 横表纵表"></a>1.3 横表纵表</h3><h3 id="1-4-数据类型"><a href="#1-4-数据类型" class="headerlink" title="1.4 数据类型"></a>1.4 数据类型</h3><p><strong>整数类型(byte)：</strong> BIT、BOOL、TINY INT(1)、SMALL INT(2)、 MEDIUM INT(3)、INT(4)、BIG INT(8)</p>
<p><strong>浮点数类型：</strong> FLOAT(4)、DOUBL(8)、DECIMAL</p>
<p><strong>字符串类型：</strong> CHAR、VARCHAR、TINY TEXT、 TEXT、MEDIUM TEXT、 LONG TEXT、TINY BLOB、BLOB、MEDIUM BLOB、LONG BLOB</p>
<p><strong>日期类型：</strong> DATE、TIME、YEAR、DATETIME、TIMESTAMP</p>
<p>其他数据类型：ENUM、BINARY</p>
<blockquote>
<p><strong>CHAR和VARCHAR的区别什么？</strong></p>
</blockquote>
<ul>
<li>CHAR(n)和VARCHAR(n)的长度n都代表存放字符的个数，超过设定长度n的字符串会被截断 </li>
<li>CHAR是固定长度，VARCHAR是可变长度</li>
<li>CHAR无论是否存满都会占用指定长度，不足的补空；VARCHAR只占用实际字符的长度，超出会截断</li>
<li>CHAR的长度上限是255，VARCHAR是65535</li>
</ul>
<blockquote>
<p><strong>BLOB和TEXT的区别是什么？</strong></p>
</blockquote>
<ul>
<li>BLOB是一个<strong>二进制对象</strong>，可以容纳可变数量的数据</li>
<li>TEXT是一个不区分大小写的BLOB，保存的是<strong>字符数据</strong></li>
</ul>
<h2 id="2-MySQL架构"><a href="#2-MySQL架构" class="headerlink" title="2. MySQL架构"></a>2. MySQL架构</h2><blockquote>
<p>待完成。   <a href="https://mp.weixin.qq.com/s?__biz=MzI1MTIzMzI2MA==&mid=2650565395&idx=1&sn=e9c779d36d944fa13703d9b8c2fd88b2&chksm=f1fedd90c6895486fb19073d3b1016d8ec4ca9cc13a5a87c198164a4ca683d193fd687e95840&scene=0&xtrack=1&key=e06e340bd7692e7ccc5311bb7eaa5a0d03ea4713c20c146872bf4607bee010784ef3ffdb4da9542a6cd49e6f2e471ea59aa59ee6c8bc84543c1da7e88392dbee7724847c1548a1dcf6bbeb45e9520f2a7b56b824cc8536c41a193bff45db1244a76dc0c8d882d97656c32ad70820e93c9a47f87b6c3de1d6011136fcbbc58dc1&ascene=14&uin=MTU0NTA1NjAwMQ==&devicetype=Windows+10+x64&version=62090523&lang=zh_CN&exportkey=Af5ZwF/scurohiRR5ZXz03s=&pass_ticket=WRKQP3G1bylvRFp+5dyKejmrjQcdw0gXiZjVA4XQVd8YXHZJBv66H4lgfERtCxdO&wx_header=0">为什么别人能用好MySQL？</a>  </p>
<p>MySQL的逻辑架构可以分为四层，包括连接层、服务层、引擎曾和存储层。（InnoDB引擎下）</p>
<ul>
<li>连接层：负责处理客户端的连接以及权限的认证</li>
<li>服务层：定义有许多不同的模块，包括权限判断，SQL接口，SQL解析，SQL分析优化，缓存查询的处理以及部分内置函数执行等。MySQL的查询语句在读物曾进行解析、优化、缓存以及内置函数的实现和存储。</li>
<li>引擎层：负责MySQL中数据的存储和提取。MySQL中的服务器层不管理事务，事务是由存储引擎实现的，使用最广泛的存储引擎为InnoDB，其他不支持事务。</li>
<li>存储层：负责将数据存储到设备的文件系统中。</li>
</ul>
</blockquote>
<img src="assets/image-20201125200416543.png" alt="image-20201125200416543" style="zoom:80%;" /> 



<h2 id="3-MySQL存储引擎"><a href="#3-MySQL存储引擎" class="headerlink" title="3. MySQL存储引擎"></a>3. MySQL存储引擎</h2><blockquote>
<p>参考文章： <a href="https://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==&mid=2247492928&idx=3&sn=09b88a89ef9c742d7a9d2d9d0eb93eba&chksm=ce0e52c3f979dbd58f039f197c3b88972addd72b4ee72df23d4bb5e8d6ca66b684fbb692c07f&scene=0&xtrack=1&key=e034db9a26a6579db731d5a6725742b6d2ce8046ca9d607206c72a754ede7a2ae2b36e2d5a564c6e1287ffbf5215cffb6584d6321a974c7cc8cb408b145ea760e682bf0ad25f743247a4bb86ef5d1a504e00fe7a5cb0a33e15514e6c0cf997dc3c2dced71ec34e47e50ff6cdbdf8e2200b9641bc93d710e4eda04c00a853de2a&ascene=14&uin=MTU0NTA1NjAwMQ==&devicetype=Windows+10+x64&version=62090523&lang=zh_CN&exportkey=AfLZNfcbdI+feRZ+DkWDxiE=&pass_ticket=WRKQP3G1bylvRFp+5dyKejmrjQcdw0gXiZjVA4XQVd8YXHZJBv66H4lgfERtCxdO&wx_header=0">MySQL存储引擎 - InnoDB-一棵树可以放多少数据</a>  </p>
</blockquote>
<blockquote>
<p>存储引擎是MySQL的组件，用于处理不同<strong>表类型</strong>的SQL操作。不同的存储引擎提供不同的存储机制、索引技巧、锁定水平等功能。  存储引擎是针对数据表的，每个表创建时不指定则会使用默认引擎。</p>
</blockquote>
<h3 id="3-1-存储引擎的设置和修改"><a href="#3-1-存储引擎的设置和修改" class="headerlink" title="3.1 存储引擎的设置和修改"></a>3.1 存储引擎的设置和修改</h3><p><strong>查看存储引擎：</strong></p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查看支持的存储引擎</span>
<span class="token keyword">SHOW</span> ENGINES

<span class="token comment" spellcheck="true">-- 查看默认存储引擎</span>
<span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'storage_engine'</span>

<span class="token comment" spellcheck="true">--查看具体某一个表所使用的存储引擎，这个默认存储引擎被修改了！</span>
<span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>tablename<span class="token punctuation">]</span>

<span class="token comment" spellcheck="true">--准确查看某个数据库中的某一表所使用的存储引擎</span>
<span class="token keyword">show</span> <span class="token keyword">table</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'tablename'</span>
<span class="token keyword">show</span> <span class="token keyword">table</span> <span class="token keyword">status</span> <span class="token keyword">from</span> <span class="token keyword">database</span> <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">'tablename'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>设置存储引擎：</strong></p>
<pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 建表时指定存储引擎。默认的就是INNODB，不需要设置</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span>tablename<span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span>CSV

<span class="token comment" spellcheck="true">-- 修改存储引擎</span>
<span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span>tablename<span class="token punctuation">]</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span>

<span class="token comment" spellcheck="true">-- 修改默认存储引擎，也可以在配置文件my.cnf中修改默认引擎</span>
<span class="token keyword">SET</span> default_storage_engine<span class="token operator">=</span>NDBCLUSTER<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-2-常见存储引擎"><a href="#3-2-常见存储引擎" class="headerlink" title="3.2 常见存储引擎"></a>3.2 常见存储引擎</h3><blockquote>
<p>MySQL常见的存储引擎有 InnoDB、MyISAM、Memory、NDB，其中InnoDB是默认引擎。</p>
</blockquote>
<p><strong>InnoDB存储引擎</strong> </p>
<ul>
<li>InnoDB支持事务，面向在线事务处理(OLTP)的应用。<strong>这也是MySQL将默认引擎改为InnoDB的重要原因之一。</strong></li>
<li>InnoDB支持外键，MyISAM不支持，对有外键的InnoDB表转成MyISAM会失败。</li>
<li>InnoDB是聚簇索引，数据文件放在主键索引的叶子节点上，因此必须要有主键，主键索引效率高，使用辅助索引需要进行主键索引的回表查询（覆盖索引除外）。</li>
<li>InnoDB支持最小锁粒度是行锁，数据并发性能更好。<strong>这也是改用InnoDB引擎的重要原因之一。</strong></li>
<li>InnoDB不保存表的具体行数，执行 <code>select count(1) from [tablename]</code> 时需要扫描全表；而MyISAM有数据行计数变量，速度更快。</li>
<li>MySQL5.5.8版本之后，将默认存储引擎改成InnoDB。</li>
</ul>
<p><strong>MyISAM存储引擎</strong> </p>
<ul>
<li>MyISAM引擎不支持事务，主要面向一些OLAP数据库应用。</li>
<li>MyISAM引擎的索引与InnoDB不同的是，其索引与实际数据是分离的，索引中叶子节点存放的是具体数据的地址，是非聚集索引，主键索引和辅助索引相互独立，叶子节点中都存放了数据文件的指针。</li>
<li>MyISAM支持的最小锁粒度是表锁，一个更新语句会锁定整张表，并发性能低，安全性高。</li>
<li>MyISAM中保存了表的具体行数，查询数量时会直接读取计数变量返回，速度很快。</li>
<li>MyISAM引擎支持全文索引，InnoDB在5.6后才加入了全文索引。</li>
<li>MyISAM引擎更注重性能，速度较快一些。</li>
</ul>
<p><strong>Memory存储引擎</strong> </p>
<ul>
<li>Memory存储引擎将表中的数据放在内存中，速度更快，但是不支持持久化。</li>
</ul>
<h2 id="4-MySQL索引"><a href="#4-MySQL索引" class="headerlink" title="4. MySQL索引"></a>4. MySQL索引</h2><blockquote>
<p>参考文章： <a href="https://mp.weixin.qq.com/s?__biz=MzAwNDA2OTM1Ng==&mid=2453147214&idx=1&sn=d6ef2e8b8c139db9dc302753050f535e&chksm=8cfd2ccdbb8aa5db91198f30c6968b1ec92525887627bd7cae10a713ab8f4bf06365c3c17223&mpshare=1&scene=24&srcid=1022j7TO5jHev6IPdSbLZ79i&sharer_sharetime=1603340755611&sharer_shareid=c90d89447bde2426811e6f3556bd276d&key=5d2345c4aa1f52aaf825be37640a0b159e9539d8e5830feeca500a629fd9f8078c25bc935d814b4cd141ab30f039a9642f8ce52e77f44fb6c167c48ebdd57ff4e3fd9a22c7b571b447af00fe10d0fbf7f36ddf54141f8cc267f065ebc57772861063c0c27ecfc389689ccc4535dc79ea7cef89ca9e74df68c3a0841bd1e7e3bb&ascene=14&uin=MTU0NTA1NjAwMQ==&devicetype=Windows+10+x64&version=62090523&lang=zh_CN&exportkey=AbAkE7xGgvGeXvDTs2+UCUY=&pass_ticket=WRKQP3G1bylvRFp+5dyKejmrjQcdw0gXiZjVA4XQVd8YXHZJBv66H4lgfERtCxdO&wx_header=0">一口气搞懂MySQL索引所有知识点</a> </p>
</blockquote>
<h3 id="4-1-索引的介绍"><a href="#4-1-索引的介绍" class="headerlink" title="4.1 索引的介绍"></a>4.1 索引的介绍</h3><blockquote>
<p>索引是帮助MySQL高效获取数据的数据机构，类似一本书的目录索引。</p>
</blockquote>
<p>通常所说的索引，有聚集索引、覆盖索引、组合索引、前缀索引、唯一索引等，默认都是使用B+树的结构组织索引。</p>
<p><strong>使用索引的好处和坏处</strong></p>
<p><strong>好处：</strong> </p>
<ul>
<li>索引可以提高数据检索的效率，降低数据库的<strong>IO</strong>成本</li>
<li>通过索引列对数据进行排序，降低了数据排序对<strong>CPU</strong>的消耗<ul>
<li>索引列会自动排序，包括单列索引和组合索引</li>
<li>如果按照索引列进行排序，order by 语句的效率会非常高</li>
</ul>
</li>
</ul>
<p><strong>坏处：</strong> </p>
<ul>
<li>索引会占据磁盘空间</li>
<li>索引虽然能够提高数据查询效率，但是会降低数据更新的效率，因为每次增删改数据操作是，都要保存或更新相应的索引文件。</li>
</ul>
<h3 id="4-2-索引的类型"><a href="#4-2-索引的类型" class="headerlink" title="4.2 索引的类型"></a>4.2 索引的类型</h3><ul>
<li><strong>唯一索引：</strong>索引列中的值必须是唯一的额，但是允许为null值</li>
<li><strong>主键索引：</strong>特殊的唯一索引，值唯一且不允许为null值</li>
<li><strong>普通索引：</strong>MySQL中基本索引类型，允许列值重复，也允许为null</li>
<li><strong>全文索引：</strong>只能在CHAR、VARCHAR、TEXT类型字段上创建全文索引。当字段长度比较大时，普通索引中使用like进行模糊查询效率比较低，可以使用全文索引 </li>
<li><strong>空间索引：</strong>5.7后支持全文索引，支持OpenGIS集合数据模型</li>
<li><strong>前缀索引：</strong>在CHAR、VARCHAR、TEXT类型的列上创建索引时，可以指定索引列的长度，即列内容的前缀进行索引。</li>
</ul>
<p>按照索引列的数量分类</p>
<ul>
<li><strong>单列索引</strong></li>
<li><strong>组合索引：</strong>组合索引使用时要遵循最左前缀匹配元组，条件允许的情况下使用组合索引替代多个单列索引</li>
</ul>
<h3 id="4-3-索引的数据结构"><a href="#4-3-索引的数据结构" class="headerlink" title="4.3 索引的数据结构"></a>4.3 索引的数据结构</h3><p><strong>Hash表：</strong></p>
<p>Hash表在等值查询时效率很高，但是不支持范围快速查找，范围查找时还是只能通过扫描全表方式；因此不适合作为经常需要查找和范围查找的数据库索引。</p>
<p><strong>二叉查找树：</strong></p>
<p>二叉树正常情况下可以进行折半查找而减少IO次数，但是二叉树不稳定，容易形成单链，查找时仍然很复杂，这种不稳定的结构选择设计时会尽量避免。</p>
<p><strong>平衡二叉树：</strong></p>
<p>平衡二叉树除了具备二叉查找树的特点，最主要的特征就是左右两个子树的层级最多相差1，在插入删除数据时要使用左旋/右旋操作来保持二叉树的平衡。平衡二叉树的查询性能最接近二分查找法，但是仍有一些不足之处：</p>
<ul>
<li>时间复杂度和树高有关，每个节点的读取对应一次磁盘IO操作，数据量大时查询性能会比较差</li>
<li>平衡二叉树不支持范围快速查找，范围查询时要从根节点进行多次遍历</li>
</ul>
<p><strong>B树：</strong></p>
<blockquote>
<p>MySQL的数据是存储在磁盘文件中的，查询处理数据时，需要把磁盘中的数据加载到内存中，磁盘IO操作非常耗时，因此我们优化的重点就是要尽量减少磁盘IO操作的次数。二叉树访问时每个节点就会发生一次磁盘IO，因此可以通过降低树的高度来减少磁盘IO的次数。</p>
<p>二叉树一个节点的数据结构为一个val+两个children指针，大概16(8+4*2)字节，而InnoDB一次IO默认会读取一页的数据量(16K)，这样每次IO操作数据空间利用率极低，为了最大化利用一次IO空间，就是在每个节点中存放多个元素，即每个节点存储更多的数据，这样就能将树的高度降的很低，这种结构就称为B树。</p>
</blockquote>
<ul>
<li><strong>B树是一种多叉平衡查找树，特点有：</strong><ul>
<li>B树的节点中存储着多个元素，每个内节点有多个分叉</li>
<li>节点中的元素包含键值和数据(data)，按照键值从小到大排列，即所有的节点中都存储了数据</li>
<li>父节点中的元素不会出现在子节点中</li>
<li>所有的叶子节点都位于同一层，即叶子有着相同的深度，叶子节点之间没有指针连接</li>
</ul>
</li>
<li>B树结构图</li>
<li>使用B树进行查找的过程：<ul>
<li>B树每个节点中的数据是一次IO操作读取出来的</li>
<li>B树种每个节点种存放许多个键值，IO操作读取到内存种后，会进行遍历比较，再查找指定的节点或根据键值返回数据</li>
<li>多叉树、每个节点存放多个键值，大大减少了树的高度，减少了磁盘IO的次数</li>
</ul>
</li>
<li>B树的不足点：<ul>
<li>B树不支持范围查询的快速查找，如果要进行范围查询，仍然是要从根节点多次遍历查询</li>
<li>因为B树节点中存放多个键以及对应的data，data对应数据库表的一行数据，随着表中的列增加，data占用空间变大，则一个节点中可以存放的数据个数就会减少，树会变高，查询时磁盘IO次数也会增加。</li>
</ul>
</li>
</ul>
<p><strong>B+树：</strong> </p>
<blockquote>
<p>B+树是在B树的基础上进行了改造，B+树相对B树的改变主要有：</p>
<ul>
<li>B+树<strong>只有叶子节点才会存储数据</strong>，非叶子节点只存放键(进行比较，可以覆盖索引)</li>
<li>B+树<strong>叶子节点之间使用双向指针连接</strong>，最底层叶子节点形成了双向有序链表</li>
<li>B+树由于只在叶子节点中存放数据，因此<strong>叶子节点中包含了所有的索引项</strong>(查找并返回数据)</li>
</ul>
<p>由于数据都放在了叶子节点中，非叶子节点只存放键值，<strong>每个节点中可以存放更多的索引键值</strong>，因此从理论上讲B+树高度是要比B树低的。</p>
<p>虽然非叶子节点中不存放数据，但是也存在<strong>覆盖索引</strong>的情况，如果索引中数据(key/id)满足要求，也可能直接返回，无需检索到最底层的叶子节点。</p>
</blockquote>
<ul>
<li><p><strong>等值查询：</strong></p>
<blockquote>
<p>B+树进行等值查询时，在叶子节点找到节点时，取出对应的data，如果data是实际的数据(<strong>InnoDB中叶子节点存放数据</strong>)则直接返回；如果是对应的地址(<strong>MyIsam中存放的是磁盘地址</strong>)，则根据磁盘地址到磁盘中取出数据，完成查询。</p>
</blockquote>
</li>
<li><p><strong>范围查询：</strong></p>
<blockquote>
<p>B+树进行范围查询时，首先进行范围左端点的查询，与等值查询一样完成当前值的查询，之后会直接使用叶子节点的链表进行后续的查询，读取其他磁盘页，最终完成整个范围查询（叶子节点中整体有序）。</p>
</blockquote>
</li>
<li><p><strong>总结：</strong>B+树保证了等值查询是快速的，也保证了范围查询的快速查找。</p>
</li>
</ul>
<h3 id="4-4-索引的使用"><a href="#4-4-索引的使用" class="headerlink" title="4.4 索引的使用"></a>4.4 索引的使用</h3><blockquote>
<p>具体索引使用过程，以MyIsam存储引擎中的索引和InnoDB存储引擎中索引的使用不同来介绍</p>
</blockquote>
<p><strong>MyIsam存储引擎：</strong> </p>
<blockquote>
<p>MyIsam引擎中也是使用的B+树构建索引树，叶子节点存放的<strong>键是列的值</strong>，data是<strong>索引所在行的磁盘地址</strong>。</p>
</blockquote>
<p>MyIsam中的主键索引和辅助索引的结构是完全一样的，叶子节点存储的数据都是记录行所在的磁盘地址，查询数据时，最终要根据磁盘地址读取数据。</p>
<p>**InnoDB存储引擎： ** </p>
<blockquote>
<p>InnoDB存储引擎相比于MyIsam可以定义自增主键，且主键索引更为特殊，也叫做聚簇索引，所有非主键索引都叫做辅助索引。</p>
<p><strong>规则：</strong> InnoDB会将定义的主键列作聚簇索引；如果没有定义主键则会选择第一个不为null的唯一索引作聚簇索引；如果都没有，则会生成一个隐式字段构建聚簇索引。</p>
</blockquote>
<ul>
<li><strong>聚簇索引：</strong> InnoDB的索引中，只有聚簇索引的叶子节点存放data数据，使用主键查询到叶子节点后返回数据</li>
<li><strong>辅助索引：</strong> 辅助索引的叶子节点存放的都是<strong>主键值</strong>，使用辅助索引时会先查询到叶子节点中的主键，根据主键值去到聚簇索引中进行<strong>回表查询</strong>data</li>
<li><strong>联合索引：</strong> 联合索引创建时，是以联合索引中列的数据进行排序，因此使用联合索引进行查询是，要符合最左匹配原则，即检索列的顺序要和创建索引时顺序一致，否则不会走索引。</li>
<li><strong>覆盖索引：</strong> 覆盖索引是一种常见的优化手段，即在使用辅助索引时，要先拿到主键索引再回表查询数据，如果当前所有中包含了需要查询的所有内容（字段值+主键值），则不需要进行主键的回表查询，即覆盖索引。</li>
</ul>
<p><strong>数据库索引优化手段：</strong></p>
<ol>
<li><p>避免回表</p>
<img src="assets/image-20201108193036198.png" alt="image-20201108193036198" style="zoom:80%;" />
</li>
<li><p>使用联合索引</p>
<ul>
<li>使用联合索引替代多个单列索引，不仅可以<strong>节省空间</strong>，还<strong>更容易使用到覆盖索引</strong></li>
<li>联合索引创建时，将频繁使用、区分度高的列放在前边</li>
<li>如果当前索引存在频繁查询的返回列，可考虑将此列加入联合索引，更容易使用覆盖索引减少回表查询</li>
</ul>
</li>
</ol>
<blockquote>
<p><strong>为什么推荐使用整型自增主键而不是选择UUID？</strong> </p>
</blockquote>
<ul>
<li>UUID是字符串，比整型消耗更多的存储空间</li>
<li>B+树查找时要进行节点值的比较，整型值要比字符串更容易比较（字符串会依次比较每一个字符）</li>
<li>自增的整型索引在磁盘中存储时会连续存储，读取时也是连续；而UUID随机产生，读取时表中上下两条数据分散的，范围查询时效果差一些</li>
<li>插入或删除数据时，整型自增主键建树时不会破坏树结构，UUID新增数据时可能会引起树结构的重新构建</li>
</ul>
<h3 id="4-5-索引的使用语句"><a href="#4-5-索引的使用语句" class="headerlink" title="4.5 索引的使用语句"></a>4.5 索引的使用语句</h3><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">---创建索引        如果是BLOB、TEXT类型，必须指定length </span>
<span class="token keyword">CREATE</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span><span class="token punctuation">]</span> <span class="token keyword">INDEX</span> <span class="token punctuation">[</span>indexname<span class="token punctuation">]</span> <span class="token keyword">ON</span> <span class="token punctuation">[</span>tablename<span class="token punctuation">]</span><span class="token punctuation">(</span>columnName<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">---修改表结构(添加索引) </span>
    <span class="token comment" spellcheck="true">---- PRIMARY Key / UNIQUE [indexname] / INDEX [indexname] / FULLTEXT [indexname]</span>
    <span class="token comment" spellcheck="true">---- 主键索引        唯一索引                普通索引            全文索引</span>
<span class="token keyword">ALTER</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>tablename<span class="token punctuation">]</span> <span class="token keyword">ADD</span> <span class="token punctuation">[</span><span class="token keyword">UNIQUE</span><span class="token punctuation">]</span> <span class="token keyword">INDEX</span> <span class="token punctuation">[</span>indexname<span class="token punctuation">]</span><span class="token punctuation">(</span>columnname<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true">---删除索引</span>
<span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> <span class="token punctuation">[</span>indexname<span class="token punctuation">]</span> <span class="token keyword">ON</span> <span class="token punctuation">[</span>tablename<span class="token punctuation">]</span>

<span class="token comment" spellcheck="true">---查看索引信息    \G用来格式化输出信息</span>
<span class="token keyword">SHOW</span> <span class="token keyword">INDEX</span> <span class="token keyword">FROM</span> <span class="token punctuation">[</span>tablename<span class="token punctuation">]</span> \G<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="5-MySQL事务"><a href="#5-MySQL事务" class="headerlink" title="5. MySQL事务"></a>5. MySQL事务</h2><blockquote>
<p>参考文章： <a href="https://mp.weixin.qq.com/s?__biz=MzUyNjQxNjYyMg==&mid=2247489683&idx=2&sn=0bfbe8def3331404ef13a0da7b10334e&chksm=fa0e7712cd79fe04c2bc72866ee72632984391ceab0f5379c3ea37819434434c8033fab26418&mpshare=1&scene=24&srcid=&sharer_sharetime=1591506346818&sharer_shareid=c90d89447bde2426811e6f3556bd276d&key=e06e340bd7692e7ca73a5ff5ea8e64087275cf8ba3ec53ab34a4b93cb277d0ac2306a1b75f8bf94a82adf2873dce1eca8ad689701d1ecb711be32b265065dc484b3a2006f8889fb116ea159f06797c1777a7619acaa8227ce2729f7b2e54b2585f66174f609777b05c7db36d3c1d777d64822850858c451258d6e23ea2a1a684&ascene=14&uin=MTU0NTA1NjAwMQ==&devicetype=Windows+10+x64&version=62090523&lang=zh_CN&exportkey=Ae/+QZtcKepQB9ivq5tYokc=&pass_ticket=WRKQP3G1bylvRFp+5dyKejmrjQcdw0gXiZjVA4XQVd8YXHZJBv66H4lgfERtCxdO&wx_header=0">彻底搞懂MySQL事务日志</a>  <a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&mid=2247486783&idx=1&sn=5d794bbb97b09a9b097200ac4790d058&chksm=ebd74c3edca0c5288742261c856c907022e4524d70ef535986da3492ce4af8e84936a2555d8c&scene=0&xtrack=1&key=5d2345c4aa1f52aaae2921615d93e13c63f7da0fa610e14c7abecf071021117a61c0426a8e521469016ad9f73e4b34cd7dfd9703e1a28af7384a71f14bf659c7cabff0d45b67838b639a11fb3c8255dce17a992c7e46c6f38661edf8f92b2d20441f7b03b6de2435d67259eceaffb05c55d9407309a5f66abf5a7bb4ff5131a4&ascene=14&uin=MTU0NTA1NjAwMQ==&devicetype=Windows+10+x64&version=62090523&lang=zh_CN&exportkey=AcBeXoujtIA7DwjZRNfjukg=&pass_ticket=WRKQP3G1bylvRFp+5dyKejmrjQcdw0gXiZjVA4XQVd8YXHZJBv66H4lgfERtCxdO&wx_header=0">MySQL事务日志-原来MySQL面试还会问这些</a>  </p>
<p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2MjEwMjI1Mg==&mid=2247501550&idx=3&sn=1a212bfc737981df2c942860e8e7dbe1&chksm=ce0e716df979f87b83ca1719f330c4fa1b4b9f1823ceb1483ae0539fc2105c3029efc06133e3&mpshare=1&scene=24&srcid=0916Evt5W1Nj6vj2ViKufZt1&sharer_sharetime=1600214786578&sharer_shareid=c90d89447bde2426811e6f3556bd276d&key=29a501fbe6d282a4522669cadcee88587f303ee12610b92fc896f03adf3e8de693cd5af938659a6d2a0069d00061b7e553b0ba825de6e09e76d79139cfedfb9f635df2c0358e16dd23b3240c0acab041d3726f874952464c115baa9e213dcc13ac315625996a283ba874a13e83f268400934e60dc6fbaa3ab3bd7e6203de4e7a&ascene=14&uin=MTU0NTA1NjAwMQ==&devicetype=Windows+10+x64&version=62090523&lang=zh_CN&exportkey=AbuaVTwtvxiuIecRXmQVX00=&pass_ticket=WRKQP3G1bylvRFp+5dyKejmrjQcdw0gXiZjVA4XQVd8YXHZJBv66H4lgfERtCxdO&wx_header=0">必须了解的 MySQL 三大日志</a>  <a href="https://mp.weixin.qq.com/s?__biz=MzAwNDA2OTM1Ng==&mid=2453147047&idx=1&sn=2ba0aa166bb7686ec90af4cded01f254&chksm=8cfd2f24bb8aa63207d72df02c01b1ad1dce63a39302ec1b73b868c44ea807c78081f6d5a9ee&mpshare=1&scene=24&srcid=1013o3NNMQV20q0AWX2pBnEF&sharer_sharetime=1602557171611&sharer_shareid=c90d89447bde2426811e6f3556bd276d&key=741c320a8f8c2b40fac60692bb38d91f787934c7273c5a8789cf488987017702b07a200c737e8cebb48686606a6c3e7f32fce0c0df727e62080e414d4e8b1479e906f70d0a0591e408a7e8947680191d40b21b8b4b0fb31fca02a0617852830dcf27171671d4c919dd5c2db96d7cf37e5a4944f6f3ed93d79c09992dc68181f7&ascene=14&uin=MTU0NTA1NjAwMQ==&devicetype=Windows+10+x64&version=62090523&lang=zh_CN&exportkey=ASqhmE3uXyU2dBJ5UDHImwk=&pass_ticket=WRKQP3G1bylvRFp+5dyKejmrjQcdw0gXiZjVA4XQVd8YXHZJBv66H4lgfERtCxdO&wx_header=0">MySQL事务与MVCC机制</a>  <a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247486625&idx=2&sn=e235dab2757739438b8f33d205a9327f&chksm=cea2436af9d5ca7c9a1a8db9d020f71205687beca23ac958f9c9a711ee0185cab30173ad2b1a&scene=0&xtrack=1&key=e034db9a26a6579d2c69e36e4cd625c1143bd4da8bb58de5524ce23bb7dc3755152656ca4a68cb81e8e2ea01e4a06ebb75f8cd44083ffb34f8336fa0cbad5c65213aae273391f480dd43c45b2f08413f720205d6bb5115969ab564dfc831867c54f6486f55c892465769bb998e1a1f2f76533c60bd79fc218c65e3a512953e70&ascene=14&uin=MTU0NTA1NjAwMQ==&devicetype=Windows+10+x64&version=62090523&lang=zh_CN&exportkey=ASpvLKcaNTSftOGcA7F/YJs=&pass_ticket=WRKQP3G1bylvRFp+5dyKejmrjQcdw0gXiZjVA4XQVd8YXHZJBv66H4lgfERtCxdO&wx_header=0">MySQL事务的10个问题</a> </p>
</blockquote>
<h3 id="5-1-事务特性（ACID）"><a href="#5-1-事务特性（ACID）" class="headerlink" title="5.1 事务特性（ACID）"></a>5.1 事务特性（ACID）</h3><ul>
<li>原子性（Atomicity）：语句要么全执行，要么全不执行，是事务最核心的特性，事务本身就是以原子性来定义的，主要是基于<strong>undo log</strong>日志来实现的。</li>
<li>一致性（Consistency）：事务追求的最终目标，一致性的实现需要数据库层面的保障，也需要应用层面的保障。数据库的完整性约束没有被破坏。</li>
<li>隔离性（Isolation）：保证事务执行尽可能不受其他事务影响，InnoDB默认的隔离级别是RR，RR的实现主要基于<strong>锁机制（行锁）</strong>、<strong>数据的隐藏列（MVCC）</strong>、<strong>undo log</strong>、和类<strong>next-key lock机制</strong>。</li>
<li>持久性（Durability）：保证事务提交后不会因为宕机等原因导致数据丢失，主要基于<strong>redo log</strong> 实现。</li>
</ul>
<h3 id="5-2-并发读写问题"><a href="#5-2-并发读写问题" class="headerlink" title="5.2 并发读写问题"></a>5.2 并发读写问题</h3><blockquote>
<p>在并发情况下，MySQL的同时读写可能会导致三类问题：脏读、不可重复读、幻读</p>
</blockquote>
<ul>
<li><strong>脏读：</strong>当前事务中读取到其他事务未提交的数据，就是脏读<ul>
<li>事务A读取数据时，读取到事务B未提交的数据，而事务B最后没有顺利提交，导致事务回滚，这时事务A读到的内容就是脏数据。</li>
</ul>
</li>
<li><strong>不可重复读：</strong>在事务A中现后两次读取同一个数据，但两次读取的结果不一样；<ul>
<li>脏读是读到了其他事务未提交的数据，而不可重复读是读取到了其他事务新提交的内容，即事务A在执行的过程中，数据被其他事务修改了</li>
</ul>
</li>
<li><strong>幻读：</strong>事务A中按照某个条件现后两次查询数据库，两次结果的行数不同，这种现象称为幻读。<ul>
<li>不可重复读是两次读取的数据发生了变化，重在更新；幻读则是两次读取的数据行数不同，重在有新数据插入。</li>
</ul>
</li>
</ul>
<h3 id="5-2-事务隔离级别"><a href="#5-2-事务隔离级别" class="headerlink" title="5.2 事务隔离级别"></a>5.2 事务隔离级别</h3><blockquote>
<p>参考文章：<a href="https://tech.meituan.com/2014/08/20/innodb-lock.html">Innodb中的事务隔离级别和锁的关系</a>  </p>
</blockquote>
<p><strong>事务的隔离级别</strong></p>
<ul>
<li>Read UnCommitted（读未提交）：可能发生脏读、不可重复读、幻读</li>
<li>Read Committed（读已提交）：不会发生脏读，可能发生不可重复读、幻读</li>
<li>Repeatable Read（可重复读）：不会发生脏读、不可重复读，可能发生幻读</li>
<li>Serializable（可串行化）：不会发生脏读、不可重复读、幻读</li>
</ul>
<h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a><strong>MVCC</strong></h3><blockquote>
<p>MVCC（Muti-Version Concurrency Control，多版本并发控制协议），就是用来实现可重复读隔离级别的。</p>
<p>MVCC的特点就是，<strong>在同一时刻，不同事务可以读取到不同版本的数据</strong>，从而解决脏读和不可重复读的问题。</p>
</blockquote>
<ul>
<li>MVCC实际上就是通过数据的<strong>隐藏列</strong>和<strong>回滚日志（undo log）</strong>，实现多个版本数据的共存，这样的好处就是，使用MVCC读取数据时，不用加锁就可以避免同时读写的冲突。</li>
<li>MVCC的每一行数据重会保存隐藏列，如<strong>创建时版本号</strong>、<strong>删除时版本号</strong>、<strong>指向undo log的回滚指针</strong>。每次开始新的事务，版本号就会递增，MVCC机制下，事务会查询<strong>小于等于创建版本号</strong>和<strong>大于等于删除版本号</strong>的数据，来保证数据的可重复读。</li>
<li><strong>next-key lock：</strong> 行锁的一种，即Record Lock（行锁）+gap lock（间隙锁），RR级别下就是<strong>通过next-key lock来避免幻读现象</strong>，其会将查询数据的数据行以及数据行的间隙进行加锁。防止其他事务在这个间隙修改或插入数据。<ul>
<li>间隙锁必须保证查询条件有索引，否则会加表锁而不是行锁（无索引时扫描全表）</li>
</ul>
</li>
<li>MVCC是快照读来避免幻读，间隙锁是当前读中避免幻读</li>
</ul>
<h3 id="5-3-事务日志"><a href="#5-3-事务日志" class="headerlink" title="5.3 事务日志"></a>5.3 事务日志</h3><blockquote>
<p>MySQL日志系统是数据库的重要组件，用于记录数据库的更新和修改，在数据库发生故障时可以通过不同的日志记录恢复数据，日志系统决定着MySQL的鲁棒性和稳健性。</p>
<p>MySQL的日志有很多种，如二进制日志（bin log）、错误日志、查询日志、慢查询日志等，此外，InnoDB存储引擎还提供了两种日志，redo log（重做日志）和undo log（回滚日志）</p>
</blockquote>
<ul>
<li><p><strong>重做日志（redo log）：</strong> 重做日志是InnoDB引擎层的日志，用来记录事务操作引起数据的变化，记录的是<strong>数据页的物理修改</strong>。（即什么地方从什么改成了什么这样）</p>
<ul>
<li><strong>预写式技术（Write Ahead logging）</strong>：InnoDB引擎对数据的更新，是<strong>先将更新记录写入redo log日志</strong>，然后<strong>会在系统空闲的时候或是按照设定的更新策略将日志种的内容更新到磁盘中</strong>，这就是所谓的预写式技术，这种技术可以大大减少IO操作的频率，提升数据刷新的效率。</li>
<li><strong>脏数据刷盘：</strong>redo log日志的大小是固定的，为了能够持续不断的对更新记录进行写入，redo log中设置了两个标识位置，<strong>checkpoint（记录擦除的位置）</strong>和<strong>write_pos（记录写入的位置）</strong>。移动是循环的，类似圆周运动，当写位置追上擦除位置时，会停下来进行脏数据刷盘（即将redo log中的数据写入到磁盘中）。</li>
<li><strong>缓冲池（buffer pool）：</strong> 在内存中分配的一个区域，包含了磁盘中部分数据页的映射，作为访问数据库的缓冲。<ul>
<li>当请求读取数据时，会判断是否在缓冲池命中，如果未命中才会在磁盘上进行检索后放入缓冲池；</li>
<li>当请求写入数据时，会先写入缓冲池，缓冲池中修改的数据会定期刷新到磁盘中，即刷脏</li>
<li>当数据修改时，除了会修改缓冲池中数据，还会在redo log中记录当前操作，事务提交时，会根据redo log的记录的数据进行刷盘。</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>二进制日志（bin log）</strong>：二进制日志（bin log）是服务层的日志，被称为归档日志。bin log 主要是记录数据库的变化情况，内容包括数据库所有的更新操作。所有涉及数据变动的操作，都要记录进二进制日志中。<strong>有了binlog可以很方便的对数据进行复制和备份，因而常用作主从数据的同步</strong>。</p>
<ul>
<li>redo log记录的是物理日志，即对某个数据进行了怎么样的修改；而<strong>binlog是逻辑日志</strong>，记录的是SQL语句的原始逻辑。</li>
<li>redo log是InnoDB引擎特有的，作用在引擎层；binlog是通过MySQL的服务层实现的，所有引擎都可以使用</li>
<li>redo log日志文件的空间固定，因此使用时是循环写入和擦除；binlog日志文件的空间不固定，写完会切换下一个文件，因此是追加写入，不会覆盖已有文件。</li>
</ul>
</li>
<li><p>一条SQL语句执行时，涉及到binlog和redo log 的读写：</p>
<img src="assets/image-20201125214003798.png" alt="image-20201125214003798" style="zoom:80%;" /> 

<ul>
<li>MySQL执行更新语句时，服务层进行语句的解析和执行，引擎层进行数据的提取和存储；同时在服务存对binlog写入，在引擎层进行redo log的写入。</li>
<li>对redo log写入时有两个阶段的提交，一个是binlog写入之前prepare状态的写入，二是binlog写入之后commit状态的写入，保证了binlog和redo log日志的一致性。</li>
</ul>
</li>
<li><p><strong>回滚日志（undo log）：</strong> 回滚日志也是InnoDB引擎提供的日志，是对数据进行回滚。在事务对数据库进行修改时，<strong>InnoDB引擎不仅会记录redo log，还会生成对应的undo log日志</strong>，如果事务失败执行rollback，事务回滚，就会<strong>利用undo log中的信息将数据回滚到之前的样子</strong>。</p>
<ul>
<li>与redo log不同的是，undo log也是逻辑日志，<strong>记录了SQL语句执行相关的信息</strong>，当发生回滚时，<strong>InnoDB引擎会根据undo log日志中的记录做与之前相反的工作。</strong></li>
<li>undo log日志有两个作用，一个是提供<strong>事务回滚</strong>，一个是实现<strong>MVCC</strong>。</li>
</ul>
</li>
</ul>
<h2 id="6-MySQL锁机制"><a href="#6-MySQL锁机制" class="headerlink" title="6. MySQL锁机制"></a>6. MySQL锁机制</h2><h2 id="7-MySQL主从复制"><a href="#7-MySQL主从复制" class="headerlink" title="7. MySQL主从复制"></a>7. MySQL主从复制</h2><blockquote>
<p>主从复制就是从原来的数据库复制一个完全一样的数据库，并保持主、从数据库数据的一致性。</p>
<p>主从复制的原理实际上就是通过binlog日志实现的，binlog日志中保存了数据库中所有SQL语句，通过对binlog日志中SQL的复制，然后再进行语句的执行即可实现从数据库与主数据库的同步。</p>
</blockquote>
<img src="assets/image-20201125215032778.png" alt="image-20201125215032778" style="zoom:80%;" /> 

<p>主从复制的过程如图，主要涉及到三个线程</p>
<ul>
<li>主服务器中的发送线程：负责将binlog日志发送到从服务器</li>
<li>从服务器上的I/O线程：用来读取主服务器发送过滤的binlog日志内容，并拷贝到本地中继日志中</li>
<li>从服务器的SQL线程：用来读取中继日志中关于数据更新的SQL语句并执行，实现主从数据一致</li>
<li>主从复制的好处有：<ul>
<li>通过复制实现数据的异地备份，避免数据丢失</li>
<li>实现架构的扩展，业务量越来越大时，I/O访问量过高时，采用多库存储，降低磁盘I/O频率</li>
<li>实现读写分离，使数据库能支持更大的并发</li>
<li>实现服务器的负载均衡，通过在主服务器和从服务器之间切分处理客户查询的负荷</li>
</ul>
</li>
</ul>
<h2 id="8-MySQL存储过程"><a href="#8-MySQL存储过程" class="headerlink" title="8. MySQL存储过程"></a>8. MySQL存储过程</h2><h2 id="9-MySQL优化"><a href="#9-MySQL优化" class="headerlink" title="9. MySQL优化"></a>9. MySQL优化</h2>]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>经典排序算法</title>
    <url>/classical-sorting-algorithm/</url>
    <content><![CDATA[<p>快速排序、堆排序、归并排序</p>
<a id="more"></a>

<h1 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h1><h2 id="排序数组"><a href="#排序数组" class="headerlink" title="排序数组"></a>排序数组</h2><blockquote>
<p>给你一个整数数组<code>nums</code>，请你将该数组升序排列。</p>
<p><a href="https://leetcode-cn.com/problems/sort-an-array/">力扣912：排序数组</a> </p>
<p>示例1：</p>
<img src="/imgs/classical-sorting-algorithm/image-20201128201336489.png" alt="image-20201128201336489" style="zoom:100%;" />

<p>示例2：</p>
<p><img src="/imgs/classical-sorting-algorithm/image-20201128201355458.png" alt="image-20201128201355458"></p>
<p>Tips：常见的排序算法都可以，但是尽量使用性能更好的快排、堆排序、归并排序。</p>
</blockquote>
<h3 id="快速排序（重要）"><a href="#快速排序（重要）" class="headerlink" title="快速排序（重要）"></a>快速排序（重要）</h3><blockquote>
<p>思想：递归思想，</p>
<ul>
<li>递归结束条件：左端点大于等于右端点，说明只有一个元素，结束</li>
<li>对0至n-1的元素进行排序，选择第一个数作为基准值pivot</li>
<li>使用左右双指针，只要满足左边位置小于右边，就进行循环<ul>
<li>右指针从右端点向左检查，发现小于基准值的就覆盖到左边，右指针停止占位</li>
<li>左指针从左端点向右检查，发现大于基准值的覆盖掉右指针处值，左指针停止占位</li>
<li>循环结束后左右指针重合，将基准值放入此处，完成一轮循环</li>
</ul>
</li>
<li>以上一轮基准元素确定的位置为中心，左边排序，右边排序</li>
</ul>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//手写快排，类库中sort方法也是封装的快排</span>
    <span class="token comment" spellcheck="true">//以第一个为基准，右侧元素进行排序，找到当前元素的位置</span>
    <span class="token comment" spellcheck="true">//递归至只有一个元素</span>
    <span class="token comment" spellcheck="true">//执行用时：5 ms, 在所有 Java 提交中击败了92.45%的用户</span>
    <span class="token comment" spellcheck="true">//内存消耗：46 MB, 在所有 Java 提交中击败了60.89%的用户</span>
    <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//只剩一个元素需要排序时，递归终止</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//使用左端点值作为基准值</span>
    <span class="token keyword">int</span> pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> start <span class="token operator">=</span> l<span class="token punctuation">,</span> end <span class="token operator">=</span> r<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//从右边找到小于基准的数值</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">)</span> end<span class="token operator">--</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//从左边找到大于基准的数值</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> start<span class="token operator">++</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//基准值放入确定位置</span>
    nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//左边快排</span>
    <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>start<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//右边快排</span>
    <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="堆排序（重要）"><a href="#堆排序（重要）" class="headerlink" title="堆排序（重要）"></a>堆排序（重要）</h3><blockquote>
<p>思想：堆是存储在数组中的，但是结构是树的思想。</p>
<ul>
<li><p>大（小）根堆则有：根节点比左右子节点都大（小），子节点也满足。</p>
</li>
<li><p>根堆在数组中，i位置点的左子节点是<code>2*i+1</code>，右子结点是<code>2*i+2</code> </p>
</li>
</ul>
<p>使用堆进行排序时：可建大根堆或小根堆，具体步骤：</p>
<ul>
<li><strong>对整个数组建立根堆</strong>，<ul>
<li>根据堆的二叉树思想从n/2位置处，向前遍历，因后边一半都是叶子结点</li>
<li>判断：如果当前节点左子节点i*2+1小于堆长度，说明存在；右子节点同理</li>
<li>遍历过程中判断当前结点和其左右子节点值大小，将最大的放在根上（即当前位置）</li>
<li>如果与子节点进行了交换，则要跟踪交换后的位置，为根时是否满足大根堆的条件（连续下沉）</li>
</ul>
</li>
<li>建堆完成后，将根（最大值）与最后一个结点进行交换（最大值就应该放在最后）<ul>
<li>数组长度-1，然后进行根堆的重建（结点的下沉）</li>
<li>以以一个结点为根，长度为<code>len-1</code>，进行大根堆的建立（调整堆）（与建堆时方法一致，复用）</li>
<li>最后循环至数组长度为<code>len=1</code>，完成排序</li>
</ul>
</li>
<li><strong>主要核心内容：</strong><ol>
<li>建堆，即从第一个非叶子节点开始进行调整堆（连续下沉）</li>
<li>将最大值（根）换到最后一位，堆长度-1</li>
<li>对整个堆进行调整（连续下沉）</li>
<li>循环2、3步骤</li>
</ol>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//使用堆排序，建堆，动态调整堆（下沉法）</span>
    <span class="token comment" spellcheck="true">//执行用时：10 ms, 在所有 Java 提交中击败了30.65%的用户</span>
    <span class="token comment" spellcheck="true">//内存消耗：45.7 MB, 在所有 Java 提交中击败了80.61%的用户</span>
    <span class="token comment" spellcheck="true">//首先，建立一个大根堆</span>
    <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//然后，将大根堆的根（最大值）与最后一个值交换，堆长度减一</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>len <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        len<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token function">adjectHeap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//堆排序</span>
<span class="token comment" spellcheck="true">//建立大根堆</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMaxHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">adjectHeap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">//调整堆（根-最大值与最后一个值交换），使用下沉法调整n-1个结点</span>
<span class="token comment" spellcheck="true">//指定形成堆/调整堆的区间，即从i-len范围内</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">adjectHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//非叶子节点时去判断是否要下沉,即当前i的左子节点是否在i-len范围内，</span>
    <span class="token comment" spellcheck="true">//不在说明i不是非叶子节点（当前范围堆中的非叶子节点）</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;=</span> len<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//从第一个非叶子节点（当前i结点）开始，</span>
        <span class="token comment" spellcheck="true">//将子节点中大于当前值 且 最大的值换上来，</span>
        <span class="token comment" spellcheck="true">//然后判断换下去的值在其位置上是否是满足大根堆（连续下沉方法）</span>
        <span class="token comment" spellcheck="true">//如果当前结点时最大值，没有下沉，则不需要继续判断</span>
        <span class="token comment" spellcheck="true">//如果下沉到叶子结点了，也不需要再判断</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//判断左子节点是否更大</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;=</span> len <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span> max <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//判断右子节点是否更大   </span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span> <span class="token operator">&lt;=</span> len <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">)</span> max <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//如果需要下沉</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">!=</span> i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>max<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>

            <span class="token comment" spellcheck="true">//当前i要跟踪下沉到的新位置，判断是否需要继续下沉</span>
            i <span class="token operator">=</span> max<span class="token punctuation">;</span> 
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果不需要下沉，说明以当前i为根的，已经是大根堆了</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="归并排序（重要）"><a href="#归并排序（重要）" class="headerlink" title="归并排序（重要）"></a>归并排序（重要）</h3><blockquote>
<p>归并排序是利用了分治的塑像来对序列进行排序，将一个长为n的待排序的序列，我们将其分解成两个长度为n/2的子序列。每次递归调用函数使两个子序列有序，然后我们再线性合并两个有序的子序列使整个序列有序。</p>
<p>具体实现步骤：</p>
<ul>
<li>针对一个长度为n的序列进行排序时，</li>
<li>取序列中值，递归使用<code>margeSort</code>方法来对前半部分排序，递归使用<code>margeSort</code>方法对后半部分排序</li>
<li>对已经排好序列的[l-mid]和[mid+1,r]，使用双指针的思想合并两个有序数组<ul>
<li>两个指针起始位置比较大小，取值小的加入临时数组，指针前进，</li>
<li>至其中一个指针到达终点，将另外一部分值全部添加到后边</li>
<li>将临时数组中有序值复制到原数组中，最后整个数组就是有序的</li>
</ul>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//使用归并排序</span>
    <span class="token comment" spellcheck="true">//对前后两部分分别排序，有序后使用双指针思想合并两个有序数组</span>
    <span class="token comment" spellcheck="true">//执行用时：8 ms, 在所有 Java 提交中击败了44.08%的用户</span>
    <span class="token comment" spellcheck="true">//内存消耗：45.7 MB, 在所有 Java 提交中击败了85.15%的用户</span>
    <span class="token function">margeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//归并排序</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">margeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//递归排序前半部分和后半部分</span>
    <span class="token function">margeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">margeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//合并两个有序数组（双指针思想）</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>r<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//临时数组可以定义成最长全局变量，每次使用长度不同</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//合并两个有序数组</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//将排序好的序列从临时数组移动至源数组</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>l<span class="token operator">+</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>count<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="快排的应用"><a href="#快排的应用" class="headerlink" title="快排的应用"></a>快排的应用</h2><h3 id="求解TopK问题（请看TopK问题专栏）"><a href="#求解TopK问题（请看TopK问题专栏）" class="headerlink" title="求解TopK问题（请看TopK问题专栏）"></a>求解<code>TopK</code>问题（请看<code>TopK</code>问题专栏）</h3><h3 id="把数组排成最小的数"><a href="#把数组排成最小的数" class="headerlink" title="把数组排成最小的数"></a>把数组排成最小的数</h3><blockquote>
<p>输入一个非负数整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。</p>
<p><a href="https://leetcode-cn.com/problems/ba-shu-zu-pai-cheng-zui-xiao-de-shu-lcof/">力扣-剑指Offer45：把数组排成最小的数</a> </p>
<p>示例1：</p>
<p><img src="/imgs/classical-sorting-algorithm/image-20201203171718659.png" alt="image-20201203171718659"> </p>
<p>示例2：</p>
<p><img src="/imgs/classical-sorting-algorithm/image-20201203171732421.png" alt="image-20201203171732421"> </p>
<p>Tips：可以使用快排的思想，把数组中数字作为字符串，进行字符串之间的比较，将数组中字符串排序，最终得到有序的字符串排列就是最小数</p>
<ul>
<li>在比较<code>x,y</code>大小时，使用 <code>x+y</code> 和 <code>y+x</code> 进行比较，如 <code>&quot;3&quot;+&quot;30&quot; = &quot;330&quot;</code> 大于 <code>&quot;30&quot;+&quot;3&quot; = &quot;303&quot;</code>  ,因此<code>&quot;3&quot;</code>大于<code>&quot;30&quot;</code></li>
<li>使用快排进行字符串排序，求得结果</li>
<li>使用了Java中<strong>字符串比较方法<code>str1.compareTo(str2); </code></strong><ul>
<li><code>结果=0:相等</code> </li>
<li><code>结果&gt;0:str1&gt;str2</code> </li>
<li><code>结果&lt;0:str1&lt;str2 </code> </li>
</ul>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">minNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//把数组排成最小的数</span>
        <span class="token comment" spellcheck="true">//如30，3排列要比3，30小，可以用字符串拼接303，330来比较大小</span>
        <span class="token comment" spellcheck="true">//按照给定的顺序来将字符串数组进行排序，最后按照顺序输出即可</span>
        <span class="token comment" spellcheck="true">//执行用时：5 ms, 在所有 Java 提交中击败了97.69%的用户</span>
        <span class="token comment" spellcheck="true">//内存消耗：37.9 MB, 在所有 Java 提交中击败了89.79%的用户</span>
        <span class="token comment" spellcheck="true">//将数字数组转成字符串数组</span>
        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token function">quickSort</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>strs<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">//也可以使用Java自带API，排序方法Arrays.sort()，传入排序的比较器</span>
        <span class="token comment" spellcheck="true">//执行用时：6 ms, 在所有 Java 提交中击败了85.26%的用户</span>
        <span class="token comment" spellcheck="true">//内存消耗：38 MB, 在所有 Java 提交中击败了86.94%的用户</span>
        <span class="token comment" spellcheck="true">//可见API还是比自己手写要慢一些的，应该时封装的比较好</span>
        <span class="token comment" spellcheck="true">//Arrays.sort(strs,(x,y) -> (x+y).compareTo(y+x));    </span>

        StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//StringUtils.join(strs,"");</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//快排思想排序</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>start <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span>
        <span class="token keyword">int</span> l <span class="token operator">=</span> start<span class="token punctuation">,</span> r <span class="token operator">=</span> end<span class="token punctuation">;</span>
        String pivot <span class="token operator">=</span> strs<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//如果右端有小于基准值的，则交换之</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pivot <span class="token operator">+</span> strs<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">+</span> pivot<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>
            strs<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> strs<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//如果左侧有大于基准值的，则交换之</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>pivot <span class="token operator">+</span> strs<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> pivot<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>
            strs<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> strs<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        strs<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span>start<span class="token punctuation">,</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">quickSort</span><span class="token punctuation">(</span>strs<span class="token punctuation">,</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="堆排序的应用"><a href="#堆排序的应用" class="headerlink" title="堆排序的应用"></a>堆排序的应用</h2><h3 id="求解TopK问题（请看TopK问题专栏）-1"><a href="#求解TopK问题（请看TopK问题专栏）-1" class="headerlink" title="求解TopK问题（请看TopK问题专栏）"></a>求解<code>TopK</code>问题（请看<code>TopK</code>问题专栏）</h3><h3 id="根据字符出现频率排序"><a href="#根据字符出现频率排序" class="headerlink" title="根据字符出现频率排序"></a>根据字符出现频率排序</h3><blockquote>
<p>给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</p>
<p>示例1：</p>
<p><img src="/imgs/classical-sorting-algorithm/image-20201204111729878.png" alt="image-20201204111729878"> </p>
<p>示例2：</p>
<p><img src="/imgs/classical-sorting-algorithm/image-20201204111754216.png" alt="image-20201204111754216"> </p>
<p>示例3：</p>
<p><img src="/imgs/classical-sorting-algorithm/image-20201204111809160.png" alt="image-20201204111809160"> </p>
<p>Tips：</p>
<ul>
<li>对于统计频率的问题，可以使用桶排序方法，先确定最大频率后根据最大频率创建桶，按照固定顺序输出。</li>
<li>使用堆排序（优先队列），根据字符的出现频率进行排序，建大根堆，最终依次输出堆的根节点</li>
</ul>
</blockquote>
<h2 id="归并排序的应用"><a href="#归并排序的应用" class="headerlink" title="归并排序的应用"></a>归并排序的应用</h2><h3 id="求数组中翻转对的数量"><a href="#求数组中翻转对的数量" class="headerlink" title="求数组中翻转对的数量"></a>求数组中翻转对的数量</h3><blockquote>
<p>题目：给定一个数组<code>nums</code>，如果i&lt;j且<code>nums[i] &gt; 2 * nums[j]</code> 我们就将 (i,j)称作一个重要<strong>翻转对</strong>。你需要返回给定数组中的重要翻转对的数量。</p>
<p><a href="https://leetcode-cn.com/problems/reverse-pairs/">力扣493：翻转对</a> （困难）</p>
<p><a href="https://leetcode-cn.com/problems/shu-zu-zhong-de-ni-xu-dui-lcof/">力扣-剑指Offer51：数组中的逆序对</a> （思想一样）</p>
<p>示例1：</p>
<p><img src="/imgs/classical-sorting-algorithm/image-20201129205124584.png" alt="image-20201129205124584"> </p>
<p>示例2：</p>
<p><img src="/imgs/classical-sorting-algorithm/image-20201129205134614.png" alt="image-20201129205134614"> </p>
<p>Tips：翻转对要求的是 i小于j的情况下，<code>nums[i] &gt; 2 * nums[j]</code> </p>
<ul>
<li><p>针对当前i，只需要考虑i之后的数字是否满足，而当其后元素有序时更容易计算</p>
</li>
<li><p>因此我们结合归并排序的思想，在每次分治排序时求出每个小数组中的<strong>翻转对</strong>数量</p>
</li>
<li><p>每次合并之前，要计算 前一个数组和后一个数组 中元素跨区间的翻转对数量</p>
<ul>
<li>如[1,2,3]和[2,3,5]合并时，合并之后的翻转对等于两个数组各自的翻转对数</li>
<li>再加上1,2,3分别在[2,3,5]中的翻转对数量，后边数组下标都大</li>
<li>就是[1,2,2,3,3,5]中总的翻转对数量</li>
</ul>
</li>
<li><p>总的算法步骤：</p>
<ul>
<li>针对整个数组进行归并排序</li>
<li>递归针对前一半和后一半进行归并排序</li>
<li>针对两个有序数组，累计计算跨区间的<strong>翻转对数量</strong> （每次合并完后，之前的跨区间就变成了当前数组对应的数量）</li>
<li>合并两个有序数组</li>
</ul>
<p>（这个思想想起来很困难呐~）</p>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reversePairs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//归并排序进行计算</span>
    <span class="token comment" spellcheck="true">//执行用时：59 ms, 在所有 Java 提交中击败了63.72%的用户</span>
    <span class="token comment" spellcheck="true">//内存消耗：48 MB, 在所有 Java 提交中击败了61.96%的用户</span>
    <span class="token keyword">return</span> <span class="token function">margeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//使用归并排序进行计算</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">margeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//递归使用归并排序</span>
    <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token function">margeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token function">margeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//累计计算翻转对</span>
    <span class="token keyword">int</span> cur <span class="token operator">=</span> n1 <span class="token operator">+</span> n2<span class="token punctuation">;</span>
    <span class="token keyword">int</span>  m <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> mid<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//这样就没有这个精髓了，还是超时的</span>
        <span class="token comment" spellcheck="true">// for(int j = mid+1; j &lt;= r; j++)&amp;#123;</span>
        <span class="token comment" spellcheck="true">//     if((long)nums[i] > (long)nums[j] * 2)&amp;#123;</span>
        <span class="token comment" spellcheck="true">//         cur++;//j-(mid-1);</span>
        <span class="token comment" spellcheck="true">//     &amp;#125; </span>
        <span class="token comment" spellcheck="true">// &amp;#125;</span>

        <span class="token comment" spellcheck="true">//这样，才能充分使用这个有序的序列(精髓)</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>m <span class="token operator">&lt;=</span> r <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> m<span class="token operator">++</span><span class="token punctuation">;</span>
        cur <span class="token operator">+=</span> m<span class="token operator">-</span><span class="token punctuation">(</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//合并两个有序数组</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">?</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">:</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//临时数组中的有序序列写入原数组中</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>l<span class="token operator">+</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> cur<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="求解TopK的算法"><a href="#求解TopK的算法" class="headerlink" title="求解TopK的算法"></a>求解<code>TopK</code>的算法</h2><h3 id="数组中的第K个最大元素"><a href="#数组中的第K个最大元素" class="headerlink" title="数组中的第K个最大元素"></a>数组中的第K个最大元素</h3><blockquote>
<p>题目：在未排序的数组中找到第k个最大的元素。请注意，你需要找的是数组排序后的第k个最大的元素，而不是第k个不同的元素。</p>
<p><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">力扣215：数组中的第K个最大元素</a> </p>
<p>示例1：</p>
<p><img src="/imgs/classical-sorting-algorithm/image-20201129162443187.png" alt="image-20201129162443187"> </p>
<p>示例2：</p>
<p><img src="/imgs/classical-sorting-algorithm/image-20201129162456331.png" alt="image-20201129162456331"> </p>
<p>Tips：</p>
<ol>
<li>假设k总是有效的，k &gt;= 1 &amp;&amp; k&lt;=数组的长度</li>
<li>如果有相同的数，则数量累加，即 1122：最大和第二大都是2</li>
</ol>
<p>思路：对于<code>TopK</code>的问题，是排序问题的变形，重点在于排序的过程，经典<code>TopK</code>问题可以使用快速排序或堆排序来解决</p>
</blockquote>
<blockquote>
<p><strong>快速排序：</strong>快排的过程中，判断当前轮排序的数字位置与k的关系，</p>
<ul>
<li><p>正好是第k个数，则返回当前数值</p>
</li>
<li><p>位置小于第k个数（n-k），说明第k个在右边，则对右边继续使用快排</p>
</li>
<li><p>位置大于第k个数（n-k），说明第k个在左边，则对左边继续使用快排</p>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//数组中的第K个最大元素</span>
        <span class="token comment" spellcheck="true">//快排思想：</span>
            <span class="token comment" spellcheck="true">//使用快排进行排序的过程中，每进行一轮排序就比较一下当前元素位置</span>
            <span class="token comment" spellcheck="true">//如果当前元素位置是n-k，说明当前元素是第K大元素</span>
            <span class="token comment" spellcheck="true">//如果小于 n-k，则对右边进行排序</span>
            <span class="token comment" spellcheck="true">//如果大于 n-k，则对左边进行排序</span>
        <span class="token comment" spellcheck="true">//执行用时：9 ms, 在所有 Java 提交中击败了36.21%的用户</span>
        <span class="token comment" spellcheck="true">//内存消耗：38.6 MB, 在所有 Java 提交中击败了89.32%的用户</span>
        <span class="token keyword">return</span> <span class="token function">quickSortFind</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">quickSortFind</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> pivot <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> left <span class="token operator">=</span> l<span class="token punctuation">,</span> right <span class="token operator">=</span> r<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot<span class="token punctuation">)</span> right<span class="token operator">--</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> left<span class="token operator">++</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> left <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span>k<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">quickSortFind</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">quickSortFind</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>l<span class="token punctuation">,</span>left<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p><strong>堆排序：</strong>因为是求数组中的<code>TopK</code>问题，堆排序更合适，可使用大根堆或者小根堆，以求第K大为例</p>
<ul>
<li>大根堆：求第K大时，如果使用大根堆，则要对整个数组进行建堆（整体排序）<ul>
<li>建堆完成后，根是最大值，我们要移除最大值，然后调整堆，此时根（最大值）为实际第2大</li>
<li>循环移除-调整堆K-1次，此时的堆根即为第K大的值</li>
<li>建立大根堆，有点走过头又回头的意思，可以使用更方便的小根堆</li>
</ul>
</li>
<li>小根堆：求第K大时，我们就以K为长度建立小根堆，此时根是前K个数中最小值<ul>
<li>查看下一个值（K+1），如果小于堆根，则不考虑，如果大于根堆，则替换堆根的值</li>
<li>直到所有元素遍历完成，此时长度为K的小根堆，是数组中最大的K个数，堆根就是第K大的数</li>
</ul>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//使用小根堆思想找第K大</span>
    <span class="token comment" spellcheck="true">//执行用时：1 ms, 在所有 Java 提交中击败了99.51%的用户</span>
    <span class="token comment" spellcheck="true">//内存消耗：38.9 MB, 在所有 Java 提交中击败了70.49%的用户</span>
    <span class="token keyword">return</span> <span class="token function">heapSortFind</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//使用堆排序进行寻找第K大</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">heapSortFind</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//建立一个长度为K的堆</span>
    <span class="token function">buildMinHead</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//循环替换堆顶元素，最后调整堆为前K个最大元素</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//如果下一个元素大于根堆，就替换根堆的元素为较大的这个</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            <span class="token function">adjectHeap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一直都是调整K个元素的堆</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">buildMinHead</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//对前K个元素进行建堆，形成一个长度为K的小根堆</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//0 -- k-1</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token function">adjectHeap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>i<span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> 

<span class="token comment" spellcheck="true">//从l到r，这一段序列中，判断l位置数字是否合适（调整堆，只能调整当前元素是否在确定的位置）</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">adjectHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//是非叶子节点，才需要判断是否需要下沉</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> min <span class="token operator">=</span> l<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;=</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>l<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> min <span class="token operator">=</span> l<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span> <span class="token operator">&lt;=</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>l<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">)</span> min <span class="token operator">=</span> l<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">!=</span> l<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            l <span class="token operator">=</span> min<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 跟踪下沉的元素，判断是否仍然需要下沉</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//没有交换时，直接跳出循环</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>旋转数组（字符串）</title>
    <url>/rotated-array/</url>
    <content><![CDATA[<p>旋转数组相关</p>
<a id="more"></a>

<h1 id="旋转数组（字符串）"><a href="#旋转数组（字符串）" class="headerlink" title="旋转数组（字符串）"></a>旋转数组（字符串）</h1><blockquote>
<p>算法中有关旋转数组或旋转字符串类算法汇总，思想汇总</p>
</blockquote>
<h2 id="旋转数组"><a href="#旋转数组" class="headerlink" title="旋转数组"></a><strong>旋转数组</strong></h2><blockquote>
<p>题目：给定一个数组，将数组中的元素向右移动k个位置，其中k是非负数。 <a href="https://leetcode-cn.com/problems/rotate-array/">力扣题目189：旋转数组</a> </p>
<p>示例1：</p>
<img src="/imgs/rotated-array/image-20201126153031806.png" alt="示例1" style="zoom:80%;" /> 

<p>示例2：</p>
<p><img src="/imgs/rotated-array/image-20201126153047080.png"> </p>
<p>Tips：算法至少有三种不同的方法求解，尝试使用空间复杂度为O(1)的原地算法。</p>
</blockquote>
<h3 id="方法1：暴力法求解（大循环嵌套小循环）"><a href="#方法1：暴力法求解（大循环嵌套小循环）" class="headerlink" title="方法1：暴力法求解（大循环嵌套小循环）"></a>方法1：暴力法求解（大循环嵌套小循环）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//暴力法旋转</span>
<span class="token comment" spellcheck="true">//执行用时：233 ms, 在所有 Java 提交中击败了29.45%的用户</span>
<span class="token comment" spellcheck="true">//内存消耗：39.1 MB, 在所有 Java 提交中击败了72.73%的用户</span>
<span class="token comment" spellcheck="true">//取模优化后：</span>
<span class="token comment" spellcheck="true">//执行用时：234 ms, 在所有 Java 提交中击败了28.15%的用户</span>
<span class="token comment" spellcheck="true">//内存消耗：38.9 MB, 在所有 Java 提交中击败了89.28%的用户</span>
<span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">moveRightK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//循环嵌套时，内部循环将数组右移一位，</span>
    <span class="token comment" spellcheck="true">//外层循环k次，就完成了数组移动k个位置</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//可以用k对数组长度取模，减少不必要的循环次数</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> k <span class="token operator">%</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//真正的移动次数</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//记录最后一个位置的数值，</span>
        <span class="token comment" spellcheck="true">//最后一个数字，放置在起点，完成一次移动</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="方法2：波浪式旋转-法（记录总移动次数）"><a href="#方法2：波浪式旋转-法（记录总移动次数）" class="headerlink" title="方法2：波浪式旋转 法（记录总移动次数）"></a>方法2：波浪式旋转 法（记录总移动次数）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//波浪式旋转（固定总移动次数，多次连续旋转）</span>
<span class="token comment" spellcheck="true">//执行用时：1 ms, 在所有 Java 提交中击败了56.10%的用户</span>
<span class="token comment" spellcheck="true">//内存消耗：39.1 MB, 在所有 Java 提交中击败了74.65%的用户</span>
<span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">moveRightK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//循环进行连续旋转，每次连续旋转（移动）至回到原点为止，</span>
    <span class="token comment" spellcheck="true">//总旋转次数等于数组长度</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//记录总的移动次数</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> cur <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连续旋转过程中不断变化的位置</span>
        <span class="token keyword">int</span> pre <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//记录上一位置的数值</span>
        <span class="token comment" spellcheck="true">//先进行旋转再判断，因此使用do while</span>
        <span class="token keyword">do</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            cur <span class="token operator">=</span> <span class="token punctuation">(</span>cur<span class="token operator">+</span>k<span class="token punctuation">)</span> <span class="token operator">%</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token punctuation">;</span>
            nums<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> pre<span class="token punctuation">;</span>
            pre <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">>=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//移动次数到了就退出</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="方法3：额外数组法"><a href="#方法3：额外数组法" class="headerlink" title="方法3：额外数组法"></a>方法3：额外数组法</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//额外数组使用</span>
<span class="token comment" spellcheck="true">//执行用时：1 ms, 在所有 Java 提交中击败了56.10%的用户</span>
<span class="token comment" spellcheck="true">//内存消耗：39.1 MB, 在所有 Java 提交中击败了71.96%的用户</span>
<span class="token comment" spellcheck="true">//优化后提交：模计算很耗性能，两次取模运算进行合并</span>
<span class="token comment" spellcheck="true">//执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户</span>
<span class="token comment" spellcheck="true">//内存消耗：38.9 MB, 在所有 Java 提交中击败了85.94%的用户</span>
<span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">moveRightK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//因为要对数组本身进行修改，直接复制出一个相同数组作为参照</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newArr <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//根据复制出来的数组的值，直接在原数组中进行相应位置的覆盖即可</span>
    <span class="token comment" spellcheck="true">//int count = k % nums.length;//真实移动的长度（可优化）</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> newIndex <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span>k<span class="token punctuation">)</span> <span class="token operator">%</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//总和一次取模</span>
        nums<span class="token punctuation">[</span>newIndex<span class="token punctuation">]</span> <span class="token operator">=</span> newArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="方法4：耍杂技法（三次反转，原地算法，空间O-1-）"><a href="#方法4：耍杂技法（三次反转，原地算法，空间O-1-）" class="headerlink" title="方法4：耍杂技法（三次反转，原地算法，空间O(1)）"></a>方法4：耍杂技法（三次反转，原地算法，空间O(1)）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//耍杂技（最帅、最高端、最效率的方法）</span>
<span class="token comment" spellcheck="true">//执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户</span>
<span class="token comment" spellcheck="true">//内存消耗：39.3 MB, 在所有 Java 提交中击败了47.26%的用户</span>
<span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">moveRightK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//数组向右移动k次，因为是循环移动的，等价于：</span>
    <span class="token comment" spellcheck="true">//先总体反转，再前k个数字反转，后n-k个数字反转</span>
    <span class="token comment" spellcheck="true">//具体为什么，有时间再聊了</span>
    k <span class="token operator">=</span> k <span class="token operator">%</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//保证k是一个小于数组长度的值</span>
    <span class="token function">reverseArr</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reverseArr</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reverseArr</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span>k<span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//进行数组的反转（制定起始位置的）</span>
<span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reverseArr</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//数组反转，使用双指针进行交换</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span>
        nums<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        start<span class="token operator">++</span><span class="token punctuation">;</span>
        end<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="寻找旋转排序数组中的最小值"><a href="#寻找旋转排序数组中的最小值" class="headerlink" title="寻找旋转排序数组中的最小值"></a>寻找旋转排序数组中的最小值</h2><blockquote>
<p>假设按照升序排序的数组在预先未知的某个点上进行了旋转。例如，数组[0,1,2,4,5,6,7]可能变成[4,5,6,7,0,1,2]，请找出数组中的最小元素。</p>
<p><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/">力扣153：寻找旋转排序数组中的最小值</a> </p>
<p>示例1：</p>
<img src="/imgs/rotated-array/image-20201127130007300.png" alt="image-20201127130007300" style="zoom:80%;" /> 

<p>示例2：</p>
<img src="/imgs/rotated-array/image-20201127130017602.png" alt="image-20201127130017602" style="zoom:80%;" /> 

<p>示例3：</p>
<img src="/imgs/rotated-array/image-20201127130030686.png" alt="image-20201127130030686" style="zoom:80%;" /> 

<p>Tips：寻找数组内部最小值，内部元素进行比较判断，使用二分法。</p>
<ul>
<li><p>（元素不重复判断比较容易）</p>
</li>
<li><p>先判断整体l-r是否有序，有序说明左侧端点为最小，返回</p>
</li>
<li><p><strong>以左侧端点为准方法：</strong>满足l &lt; r 时，取中间位置mid的值，与左侧端点值进行比较</p>
<ul>
<li>如果大于<strong>等于</strong>左侧端点，表示左侧部分有序，右侧部分无序，只考虑左侧部分<ul>
<li>因为mid=(l+r)/2，即mid有可能和左侧位置重合，此时要去右侧寻找（左侧已经判断mid）</li>
</ul>
</li>
<li>如果小于左侧端点，表示左侧无序，则最小值一定在左侧，只考虑左侧即可</li>
<li>最后当l=r时，如果到了这一步，说明当前值为最小值了</li>
</ul>
</li>
<li><p><strong>以右侧端点为准方法：</strong>同样在满足l&lt;r时，取中间位置mid的值，与右侧端点值进行比较</p>
<ul>
<li>如果小于右侧端点，说明右侧为有序，<strong>此时只能说明 l-mid 是无序的，因此要带着（mid值）</strong><ul>
<li>有可能mid点正好落在最小值上，如果r=mid-1，则失去了最小值，</li>
<li>这种情况可以在优化时提前判断mid是否为最小值来避免</li>
</ul>
</li>
<li>如果大于右端点，说明右侧无序，且mid肯定不是最小，因此l=mid+1</li>
<li>最后当l=r时，到了这一步，说明当前就是最小值</li>
</ul>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//寻找旋转数组中的最小值（数组元素于不重复）</span>
<span class="token comment" spellcheck="true">//以左端点为标准</span>
<span class="token comment" spellcheck="true">//如果整体有序，则左端点为最小值，返回</span>
<span class="token comment" spellcheck="true">//如果左边部分有序，说明最小值在右边</span>
<span class="token comment" spellcheck="true">//如果左边部分无序，说明在左边</span>
<span class="token comment" spellcheck="true">//执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户</span>
<span class="token comment" spellcheck="true">//内存消耗：37.7 MB, 在所有 Java 提交中击败了90.18%的用户</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//不加l=r的情况，作为最后一种，直接输出l的值</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//整体有序，返回左端点值</span>

        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//当前值下降，返回当前值</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>    
        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//左侧有序，在右边 ,有可能mid=l，但是不会有mid=r </span>
        <span class="token keyword">else</span> r <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//右侧无序，在左边</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//从右侧开始判断</span>
<span class="token comment" spellcheck="true">//如果中值小于右端点，右侧有序，则最小值在左侧，此时包括中值（即中值也可能是最小值）r=mid，</span>
<span class="token comment" spellcheck="true">//（可添加判断mid是否最小值消去）</span>
<span class="token comment" spellcheck="true">//如果中值大于右端点，则最小值在右侧，且中值不可能是最小l=mid+1</span>
<span class="token comment" spellcheck="true">//执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户</span>
<span class="token comment" spellcheck="true">//内存消耗：37.9 MB, 在所有 Java 提交中击败了76.68%的用户</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMin2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//整体有序，左端点即为最小</span>

        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//提前判断，减少搜索次数</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>mid <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> r <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="寻找旋转排序数组中的最小值Ⅱ（数组中数可重复）"><a href="#寻找旋转排序数组中的最小值Ⅱ（数组中数可重复）" class="headerlink" title="寻找旋转排序数组中的最小值Ⅱ（数组中数可重复）"></a>寻找旋转排序数组中的最小值Ⅱ（数组中数可重复）</h2><blockquote>
<p>题目：假设按照升序排序的数组在预先未知的某个点上进行了旋转。如数组[0,1,2,4,5,6,7]可能变成[4,5,6,7,0,1,2]，请找出其中最小的元素。<strong>（注意：数组中可能存在重复的元素）</strong></p>
<p><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/">力扣154：寻找旋转排序数组中的最小值Ⅱ（困难？？）</a> </p>
<p><a href="https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/">剑指Offer11：旋转数组的最小数字（简单√）</a> </p>
<p>示例1：</p>
<img src="/imgs/rotated-array/image-20201127134950375.png" alt="image-20201127134950375" style="zoom:80%;" /> 

<p>示例2：</p>
<img src="/imgs/rotated-array/image-20201127135000067.png" alt="image-20201127135000067" style="zoom:80%;" /> 

<p>Tips：数组中元素可以重复，则当mid与端点值相等时，不能判断当前段内元素是否有序，可能<strong>先降后增</strong></p>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//寻找数组中的最小值（元素可重复）</span>
    <span class="token comment" spellcheck="true">//执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户</span>
    <span class="token comment" spellcheck="true">//内存消耗：38.3 MB, 在所有 Java 提交中击败了78.46%的用户</span>
    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> l <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> r <span class="token operator">=</span> m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> l<span class="token operator">++</span><span class="token punctuation">;</span>

    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="搜索旋转数组（在数组中搜索目标数）"><a href="#搜索旋转数组（在数组中搜索目标数）" class="headerlink" title="搜索旋转数组（在数组中搜索目标数）"></a>搜索旋转数组（在数组中搜索目标数）</h2><blockquote>
<p>题目：给你一个整数数组<code>nums</code>，和一个整数target，该整数数组原本是按照升序排列，但输入时在某一个点上进行了数组的旋转。如数组[0,1,2,3,4,5,6,7]可能变成了[4,5,6,7,0,1,2,3]。</p>
<p><strong>问题</strong>：<strong>请你在数组中搜索target，蜀国数组中存在这个目标值，则返回它的索引，否则返回-1</strong>。</p>
<p><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array/">力扣33：搜索旋转排序数组</a> </p>
<p>示例1：</p>
<img src="/imgs/rotated-array/image-20201126165439704.png" alt="image-20201126165439704" style="zoom:80%;" /> 

<p>示例2：</p>
<img src="/imgs/rotated-array/image-20201126165450168.png" alt="image-20201126165450168" style="zoom:80%;" /> 

<p>示例3：</p>
<img src="/imgs/rotated-array/image-20201126165503080.png" alt="image-20201126165503080" style="zoom:80%;" /> 

<p>Tips：使用二分法思想查找数</p>
<ul>
<li>因为是有序数组旋转而来，那么使用二分时，一定有一部分有序<ul>
<li>如果左边有序，且目标值在左边范围内，则考虑左边部分，<ul>
<li>否则考虑右边部分</li>
</ul>
</li>
<li>如果左边无序（右边有序），且目标值在右边范围内，则考虑右边部分，<ul>
<li>否则考虑左边部分</li>
</ul>
</li>
</ul>
</li>
<li>（根据两边有序的那一部分进行判断，因为有序的部分只需要比较就可以判断出目标值是否在其中，若不在则去另外的部分查找）</li>
</ul>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> A<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> A<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//左边有序</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">>=</span> A<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;</span> A<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                r <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//右边有序</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">></span> A<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;=</span> A<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> r <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="搜索旋转数组2（在旋转后的数组中搜索可重复的目标）"><a href="#搜索旋转数组2（在旋转后的数组中搜索可重复的目标）" class="headerlink" title="搜索旋转数组2（在旋转后的数组中搜索可重复的目标）"></a>搜索旋转数组2（在旋转后的数组中搜索可重复的目标）</h2><blockquote>
<p>题目：给定一个排序后的数组，包含n个整数，但这个数组已经被旋转过很多次了，次数不详。请编写代码找出数组中的某个元素，假设数组元素是按照升序排列的。若有多个相同元素，返回索引值最小的。</p>
<p><a href="https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/">力扣81：搜索旋转排序数组Ⅱ</a>  <a href="https://leetcode-cn.com/problems/search-rotate-array-lcci/">力扣1825：面试题10.03.搜索旋转数组</a>   </p>
<p>示例1：</p>
<img src="/imgs/rotated-array/image-20201127094304993.png" alt="image-20201127094304993" style="zoom:80%;" /> 

<p>示例2：</p>
<img src="/imgs/rotated-array/image-20201127094316243.png" alt="image-20201127094316243" style="zoom:80%;" /> 

<p>Tips：和搜索旋转数组1不同的地方是当前问题中数字可重复，在判断左右是否有序时充分考虑中值与端点值<strong>相等时的情况</strong>。</p>
</blockquote>
<p>解题思路：</p>
<ul>
<li>此题目添加了数组中数字可以重复，且目标值重复是取下标最小的（这个怎么找呢？）</li>
<li>数组中允许重复数字时，判断部分是否有序的标准就发生了变化，好像就不能那么用了，即中值与端点值相等时，不能判断是否为有序的，要单独考虑</li>
<li>思路步骤：只考虑左侧部分的所有情况，<ul>
<li>如果中值等于目标值，则判断前一位是否相等，不相等时说明当前索引为最小，否则，</li>
<li>中值明确大于左端点值时，左侧明确有序，可判断目标值是否在该有序段内，<ul>
<li>在左侧则只考虑左侧</li>
<li>否则一定在右侧</li>
</ul>
</li>
<li>中值明确小于左端点值时，左侧明确无序，则右侧一定有序，判断目标值是否在右侧段<ul>
<li>在右侧则只考虑右侧</li>
<li>否则一定在左侧</li>
</ul>
</li>
<li>相等，不知道是否有序，移动端点后判断，即左端点+1，重新获取中值进行判断</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//二分法在旋转的有序数组中搜索目标数</span>
    <span class="token comment" spellcheck="true">//执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户</span>
    <span class="token comment" spellcheck="true">//内存消耗：39.6 MB, 在所有 Java 提交中击败了65.54%的用户</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//中值就是目标值是，查看前一位是否相等，不相等时返回当前索引为最小</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>mid <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> mid<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//中值明确大于左端点时，左边是有序的</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">>=</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//中值明确小于左端点时，左边是无序的，则右侧一定有序了</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> r <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//中值和左端点相等时，移动左端点，继续判断</span>
            l<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="旋转链表"><a href="#旋转链表" class="headerlink" title="旋转链表"></a><strong>旋转链表</strong></h2><blockquote>
<p>题目：给定一个链表，旋转链表，将链表每个结点向右移动k个位置，其中k是非负数。</p>
<p><a href="https://leetcode-cn.com/problems/rotate-list/">力扣61：旋转链表</a> </p>
<p>示例1：</p>
<img src="/imgs/rotated-array/image-20201127155923980.png" alt="image-20201127155923980" style="zoom:80%;" /> 

<p>示例2：</p>
<img src="/imgs/rotated-array/image-20201127155934300.png" alt="image-20201127155934300" style="zoom:80%;" /> 

<p>Tips：旋转链表分三步</p>
<ul>
<li>遍历一次，获取链表长度（同时获取到链表的最后结点，指向原头结点，形成环）</li>
<li>根据移动长度k计算断开链表的位置 n - k % n</li>
<li>遍历到断开链表的前置结点，赋值头结点并将前置结点指向null</li>
</ul>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ListNode <span class="token function">rotateRight</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//先获取链表长度，用移动长度k对链表长度取模，得到真实移动长度</span>
    <span class="token comment" spellcheck="true">//使用指针移动到真实长度处，将链表解开，作为新链表头部，并把原链表头部接到尾部</span>
    <span class="token comment" spellcheck="true">//记录头结点，记录尾结点</span>
    <span class="token comment" spellcheck="true">//执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户</span>
    <span class="token comment" spellcheck="true">//内存消耗：37.9 MB, 在所有 Java 提交中击败了74.89%的用户</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head <span class="token operator">==</span> null <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//获取链表长度，及尾结点</span>
    ListNode p <span class="token operator">=</span> head<span class="token punctuation">;</span>
    ListNode end <span class="token operator">=</span> null<span class="token punctuation">;</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    end <span class="token operator">=</span> p<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取尾结点(此处也可以将链表成环)</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">%</span> count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//找到需要解链的位置,移动一位，则解开n-1处的链，解开n-1的链，则要找到n-2处结点（前置节点）</span>
    <span class="token keyword">int</span> num <span class="token operator">=</span> count <span class="token operator">-</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    p <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//尾结点 -> 头结点</span>
    <span class="token comment" spellcheck="true">//头结点 -> 前置节点的下一节点</span>
    <span class="token comment" spellcheck="true">//前置结点置空，作为新链的尾结点</span>
    end<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    head <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    p<span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>

    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="旋转字符串（左旋）"><a href="#旋转字符串（左旋）" class="headerlink" title="旋转字符串（左旋）"></a><strong>旋转字符串（左旋）</strong></h2><blockquote>
<p>字符串的左旋操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋操作的功能。比如，输入字符串<code>“abcdefg”</code>和数字2，该函数将返回左旋两位得到的结果<code>&quot;cdefgab&quot;</code>。</p>
<p><a href="https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/">剑指Offer58-Ⅱ：左旋转字符串</a> </p>
<p>示例1：</p>
<img src="/imgs/rotated-array/image-20201127162515364.png" alt="image-20201127162515364" style="zoom:80%;" /> 

<p>示例2：</p>
<img src="/imgs/rotated-array/image-20201127162526236.png" alt="image-20201127162526236" style="zoom:80%;" /> 

<p>Tips： Java 中字符串是不可变的，不能像数组那样使用原地多次反转来实现旋转，字符串要使用空间</p>
<ul>
<li>根据字符串长度获取实际需要移动长度，字符串相应位置即变成第一个字符</li>
<li>使用新的字符串从新字符串头部加到字符串结束，然后再从头开始添加，循环一周即可<ul>
<li>可以使用取余方法将两个循环合并成一个</li>
</ul>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//字符串左旋操作</span>
    <span class="token comment" spellcheck="true">//查找位置，进行两部分的遍历拼接，返回新字符串</span>
    <span class="token comment" spellcheck="true">//执行用时：5 ms, 在所有 Java 提交中击败了21.60%的用户</span>
    <span class="token comment" spellcheck="true">//内存消耗：38.3 MB, 在所有 Java 提交中击败了74.95%的用户</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> n <span class="token operator">%</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> s<span class="token punctuation">;</span>

    StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// for(int i = index; i &lt; s.length(); i++)&amp;#123;</span>
    <span class="token comment" spellcheck="true">//     //char c = s.charAt(i);</span>
    <span class="token comment" spellcheck="true">//     sb.append(s.charAt(i));</span>
    <span class="token comment" spellcheck="true">// &amp;#125;</span>
    <span class="token comment" spellcheck="true">// for(int i = 0; i &lt; index; i++)&amp;#123;</span>
    <span class="token comment" spellcheck="true">//     //char c = s.charAt(i);</span>
    <span class="token comment" spellcheck="true">//     sb.append(s.charAt(i));</span>
    <span class="token comment" spellcheck="true">// &amp;#125;</span>

    <span class="token comment" spellcheck="true">//可以用取余操作将两个循环合并</span>
    <span class="token comment" spellcheck="true">//执行用时：7 ms, 在所有 Java 提交中击败了13.38%的用户</span>
    <span class="token comment" spellcheck="true">//内存消耗：38.1 MB, 在所有 Java 提交中击败了88.72%的用户</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> index<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">%</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="旋转字符串（旋转匹配）"><a href="#旋转字符串（旋转匹配）" class="headerlink" title="旋转字符串（旋转匹配）"></a><strong>旋转字符串（旋转匹配）</strong></h2><blockquote>
<p>题目：给定两个字符串A和B，A的旋转操作就是将A最左边的字符移动到最右边，例如，若A=<code>abcd</code>，在移动一次后结果就是<code>bcda</code>。如果在若干次旋转操作之后，A能变成B，就说明A可以旋转成B，返回True。</p>
<p><a href="https://leetcode-cn.com/problems/rotate-string/">力扣796：旋转字符串</a> </p>
<p><a href="https://leetcode-cn.com/problems/string-rotation-lcci/">力扣 面试题01.09：字符串轮转</a> </p>
<img src="/imgs/rotated-array/image-20201127170623444.png" alt="image-20201127170623444" style="zoom:80%;" /> 

<p>Tips：这个题可以转换成字符串匹配的题目</p>
<ul>
<li>遍历方法<ul>
<li>遍历A字符串所有可能的旋转字符串，与B进行比较</li>
<li>在B中找到A字符串所有首字母，根据位置旋转B字符串，结果与A比较（旋转字符串思想）</li>
</ul>
</li>
<li>A+A这个长字符串包括所有A旋转后的结果，判断B是否在A+A中<ul>
<li>可以使用<code>str.contains(str)</code>判断</li>
<li>高端进阶：可以使用<code>!!KMP!!</code></li>
<li><code>KMP</code>一定要学习！，算法不学<code>KMP</code>，…..</li>
</ul>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">rotateString</span><span class="token punctuation">(</span>String A<span class="token punctuation">,</span> String B<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//旋转字符串</span>
    <span class="token comment" spellcheck="true">//如果字符串相同，则true</span>
    <span class="token comment" spellcheck="true">//在B字符串中寻找A字符串的首字符位置</span>
    <span class="token comment" spellcheck="true">//从所有首字符位置遍历整个字符串，判断是否和A相等，相等为true</span>
    <span class="token comment" spellcheck="true">//执行用时：1 ms, 在所有 Java 提交中击败了32.14%的用户</span>
    <span class="token comment" spellcheck="true">//内存消耗：36.4 MB, 在所有 Java 提交中击败了78.81%的用户</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> B<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> headC <span class="token operator">=</span> A<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> B<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> cur <span class="token operator">=</span> B<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> headC <span class="token operator">&amp;&amp;</span> <span class="token function">getString</span><span class="token punctuation">(</span>B<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> 
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//旋转B字符串，看看是否能够旋转回到A</span>
<span class="token keyword">public</span> String <span class="token function">getString</span><span class="token punctuation">(</span>String s<span class="token punctuation">,</span> <span class="token keyword">int</span> startIndex<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startIndex<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> startIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">%</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="旋转图像（矩阵）"><a href="#旋转图像（矩阵）" class="headerlink" title="旋转图像（矩阵）"></a><strong>旋转图像（矩阵）</strong></h2><blockquote>
<p>题目：给定一个n X n的二维矩阵表示一个图像，将图像顺时针旋转90度。说明：你必须原地旋转图像，即需要直接修改输入的二维矩阵，不要使用另外一个矩阵来旋转图像。</p>
<p><a href="https://leetcode-cn.com/problems/rotate-image/">力扣48：旋转图像</a> </p>
<p><a href="https://leetcode-cn.com/problems/rotate-matrix-lcci/">力扣 面试题01.07：旋转矩阵</a> </p>
<p>示例1：</p>
<img src="/imgs/rotated-array/image-20201127174436929.png" alt="image-20201127174436929" style="zoom:80%;" /> 

<p>示例2：</p>
<img src="/imgs/rotated-array/image-20201127174457402.png" alt="image-20201127174457402" style="zoom:80%;" /> 

<p>Tips：观察发现，矩阵经过顺时针旋转90度后</p>
<ul>
<li>方法一：先转置，再水平反转，就是顺时针旋转90度</li>
<li>方法二：原地旋转（！很漂亮！）</li>
<li>方法三：使用辅助数组进行旋转<ul>
<li>列变成了行 即<code>newRow = col;</code></li>
<li>行变成了倒数列，即<code>newCol = (len-1) - row</code></li>
</ul>
</li>
</ul>
</blockquote>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方法一：</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//旋转矩阵。</span>
    <span class="token comment" spellcheck="true">//顺时针旋转90度，相当于转置矩阵（横纵坐标互换），</span>
        <span class="token comment" spellcheck="true">//再水平反转（列反转）</span>
    <span class="token comment" spellcheck="true">//执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户</span>
    <span class="token comment" spellcheck="true">//内存消耗：38.8 MB, 在所有 Java 提交中击败了41.91%的用户</span>

    <span class="token comment" spellcheck="true">//求转置，只循环上三角</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//转置是有对称轴的，即两个点元素互换</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//水平反转,列循环一半</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//转置是有对称轴的，即两个点元素互换</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">//方法二：一个循环中，四个值进行交换</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//数组旋转，</span>
    <span class="token comment" spellcheck="true">//根据规律可以看出:</span>
    <span class="token comment" spellcheck="true">//(i,j) -> (j,n-1-i)</span>
    <span class="token comment" spellcheck="true">//(j,n-1-i) -> (n-1-i,n-1-j)</span>
    <span class="token comment" spellcheck="true">//(n-1-i,n-1-j) -> (n-1-j,i)</span>
    <span class="token comment" spellcheck="true">//(n-1-j,i) -> (i,j)</span>
    <span class="token comment" spellcheck="true">//即，这四个点进行了循环交换，</span>
    <span class="token comment" spellcheck="true">//找出当前矩阵中供有多少次交换 </span>
    <span class="token comment" spellcheck="true">//n^2 / 4 （n是偶数时） n/2 * n/2；</span>
    <span class="token comment" spellcheck="true">// (n^2-1) / 4（n是奇数时） n/2 * (n+1)/2</span>
    <span class="token comment" spellcheck="true">//双层循环，行是n/2，列是(n+1)/2</span>
    <span class="token comment" spellcheck="true">//执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户</span>
    <span class="token comment" spellcheck="true">//内存消耗：38.5 MB, 在所有 Java 提交中击败了82.59%的用户</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//逆向替换</span>
            <span class="token keyword">int</span> temp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            matrix<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
            matrix<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Typora写文章时图片显示问题</title>
    <url>/testimage/</url>
    <content><![CDATA[<p>Hexo</p>
<a id="more"></a>

<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><blockquote>
<ul>
<li>Typora是一款支持实时预览的MarkDown文本编辑器。</li>
<li>有OS X、windows、Linux三个平台版本，是完全免费的。</li>
<li>个人平时学习的记录都是使用Typora完成的。</li>
</ul>
</blockquote>
<h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><blockquote>
<p>Hexo是一个快速、简洁且高效的博客框架。</p>
<p>Hexo使用MarkDown解析文章，可利用靓丽的主题生成<strong>静态网页</strong>。</p>
</blockquote>
<h2 id="Typora-Hexo"><a href="#Typora-Hexo" class="headerlink" title="Typora+Hexo"></a>Typora+Hexo</h2><blockquote>
<p>实际使用过程中，为了让自己本地的记录能够随时可以查看，参考网上教程，使用了Hexo+GitHub Pages实现静态博客功能，本地使用Typora进行编辑记录，完成后发布到GitHub。</p>
</blockquote>
<h2 id="文章中图片的一致性处理"><a href="#文章中图片的一致性处理" class="headerlink" title="文章中图片的一致性处理"></a>文章中图片的一致性处理</h2><blockquote>
<p>如果正常在本地使用typora，并使用了一些图片后，将文章上传至GitHub中，会发现在远程中图片无法显示，这是因为Hexo中的图片路径访问不到，需要对Typora进行一定处理。</p>
</blockquote>
<h3 id="Typora中图片路径"><a href="#Typora中图片路径" class="headerlink" title="Typora中图片路径"></a>Typora中图片路径</h3><img src="/imgs/testImage/image-20201128154335673.png" alt="" style="zoom:80%;" /> 

<p>本地使用Typora编辑内容时，可以设置插入图片时是否复制图片</p>
<img src="/imgs/testImage/image-20201128154530131.png" alt="" style="zoom:80%;" /> 

<ul>
<li><p>如果<strong>不复制图片</strong>，则路径为复制图片的源路径（Typora缓存路径）</p>
<img src="/imgs/testImage/image-20201128154805241.png" alt="" style="zoom:67%;" /> 
</li>
<li><p>如果设置了<strong>复制图片</strong>，则会根据设置的路径将图片复制进去，并进行引用（默认为当前文章所在位置的相对路径）</p>
<p><img src="/imgs/testImage/image-20201128155025584.png"> </p>
</li>
<li><p>如果要使用<strong>绝对路径</strong>，则会使用计算机本地的绝对路径</p>
</li>
<li><p>Typora中可以针对文章设置根目录，设置后当前文章会以根目录为准，所有资源的<strong>绝对路径</strong>可<strong>使用根目录的相对路径来表示</strong></p>
<ul>
<li><p>工具栏设置文章根目录：</p>
<img src="/imgs/testImage/image-20201128155509532.png" alt="" style="zoom:50%;" />     
</li>
<li><p>使用表头格式内容进行设置（最终都是使用该方式实现的）</p>
<img src="/imgs/testImage/image-20201128155638464.png" alt="" style="zoom:80%;" /> 

</li>
</ul>
</li>
</ul>
<h3 id="Hexo框架中图片引用路径"><a href="#Hexo框架中图片引用路径" class="headerlink" title="Hexo框架中图片引用路径"></a>Hexo框架中图片引用路径</h3><blockquote>
<p>使用Hexo博客框架时，文章中的图片路径有两种情况</p>
</blockquote>
<ul>
<li><p>Hexo中<strong>新增文章</strong>存放路径均是在<code>hexoBlog/source/_post</code> 文件夹下</p>
<p><img src="/imgs/testImage/image-20201128160004391.png"> </p>
</li>
<li><p><strong>默认配置：</strong>Hexo默认情况下，使用的图片路径为 <code>hexoBlog/sopurce/imgs</code> ，放在imgs文件夹下的图片都可以使用 <code>/imgs/.../photo.png</code> 来进行引用</p>
<p><img src="/imgs/testImage/image-20201128160117267.png"> </p>
</li>
<li><p><strong>更改默认配置：</strong>Hexo的全局配置文件 <code>_config.yml</code> 中修改设置为：</p>
<pre class="line-numbers language-yml"><code class="language-yml">#默认是false，
#修改为true代表每次创建文件会同时在相同位置创建一个同名文件夹
#同名文件夹中资源可以直接使用路径进行访问，如： photo.png
post_asset_floder: true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h3 id="Typora和Hexo一致处理"><a href="#Typora和Hexo一致处理" class="headerlink" title="Typora和Hexo一致处理"></a>Typora和Hexo一致处理</h3><blockquote>
<p>为了让文章中的图片在本地编辑时可用，发布到远程依然可用，我们进行一些一致的设置。</p>
</blockquote>
<p>我们在Typora中设置复制图片时保存的路径，为了便于管理图片，我们使用了在 <code>HexoBlog/source/imgs</code> 下的同名文件夹来保存当前文章对应的图片信息。</p>
<ul>
<li><p>设置图片复制路径为：</p>
<img src="/imgs/testImage/image-20201128161058627.png" alt="" style="zoom:80%;" /> 

<p>这是一个绝对路径，表示本地Hexo的项目Blog项目中的source文件夹下面找到文章的同名文件夹（${filename}），所有图片放入同名文件夹中，然后在Typora中进行资源的引用。</p>
</li>
<li><p>为了引用时与Hexo引用一致，我们设置当前文章的根目录为source文件夹</p>
<img src="/imgs/testImage/image-20201128161406324.png" alt="" style="zoom:50%;" /> 

<p>设置后文章表头会出现如下信息：此处是使用的相对路径进行的设置</p>
<img src="/imgs/testImage/image-20201128155638464.png" alt="" style="zoom:100%;" /> 
</li>
<li><p>这样之后，我们在文章中复制插入图片时，图片的引用路径为：</p>
<p><img src="/imgs/testImage/image-20201128161748049.png"> </p>
<p>这个路径正是Hexo框架的默认图片引用路径，这样我们就完成了一致处理。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub Pages 上使用 Hexo 搭建静态博客</title>
    <url>/hexo-da-jian-jing-tai-bo-ke/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>计算机作为一个技术更新迭代速度非常快的行业，只有不断学习才不会被时代抛弃，但是对新技术的学习还有进行积累并输出才可以学习更加透彻，因此每个人都应该有自己的积累和输出方式。</p>
<p>GitHub 提供的 Pags 功能可以用来作为静态博客的展示，因此我们可以借助 GitHub 平台挂载资源，实现个人的静态博客，记录一些日常积累。</p>
<a id="more"></a>

<h2 id="创建-GitHub-Pages"><a href="#创建-GitHub-Pages" class="headerlink" title="创建 GitHub Pages"></a>创建 GitHub Pages</h2><p>作为开发或热爱上网的人士，GitHub 是必不可少的网站，可谓是集学习、娱乐、摸鱼、交友于一身的大型社交平台，如果还没有 GitHub 账号的话，那我们就要赶紧注册一个加入进来，xdm 就等你了！</p>
<h3 id="GitHub-注册登录"><a href="#GitHub-注册登录" class="headerlink" title="GitHub 注册登录"></a>GitHub 注册登录</h3><p>GitHub 官网地址：<a href="https://github.com/">https://github.com/</a></p>
<p>进行博客搭建要借助 GitHub 为我们提供的仓库服务，并借用 GitHub 的仓库 Pages 功能来实现静态页面的显示，因此需要有一个 GitHub 账号，没有的话就去 <a href="https://github.com/">GitHub 官网</a> 注册一个账号。</p>
<p>如果 GitHub 网站无法正常打开，可以参考 <a href="https://mp.weixin.qq.com/s?__biz=MzI5NTM3MDk4Mg==&mid=2247484115&idx=1&sn=031c4ff5164e3874e6361ca58d17edc3&chksm=ec55eb5adb22624c2ae0ee97d991ee2266155b469c9a255b8c494c45d8aadcd8a746958e6c6c&token=555493906&lang=zh_CN#rd">解决国内 GitHub 访问慢的问题！！</a> 进行处理</p>
<h3 id="初始化-GitHub-Pages-仓库"><a href="#初始化-GitHub-Pages-仓库" class="headerlink" title="初始化 GitHub Pages 仓库"></a>初始化 GitHub Pages 仓库</h3><p>登录 GitHub 账号后，如果想要为 Hexo 进行静态资源托管，则要创建一个名称有格式要求的仓库进行使用，操作步骤如下</p>
<ol>
<li>点击新建一个仓库，名称使用 <code>[yournamer].github.io</code> ，初始化一个 readme.md 文件，并完成仓库的创建</li>
</ol>
<ul>
<li>[yourname] 代表自己 GitHub 账户名称，GitHub Pages 使用的仓库必须是 <code>[yournamer].github.io</code> 格式，其他仓库名称不可用</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1691932018584_1691932018584.png" alt="创建 GitHub 仓库"></p>
<ol start="2">
<li>进入当前仓库的 <code>Setting</code> 页面，左侧选择 <code>Pages</code> ，右侧展示为 <code>GitHub Pages</code> 页面，在页面中可以对 GitHub Pages 进行配置，可以尝试切换主题，然后点击链接，跳转到 `[yournamer].github.io`` 页面</li>
</ol>
<ul>
<li>出现自己仓库的 readme.md 页面信息后表示创建成功</li>
</ul>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1691932170930_1691932170930.png" alt="设置 GitHub Pages"></p>
<p>GitHub Pages 即 GitHub 提供了用来展示用户个人项目静态资源信息的页面，用户可以使用 GitHub 支持的功能进行修饰静态页面。</p>
<p>参考文档可见官网地址：<a href="https://pages.github.com/">https://pages.github.com/</a></p>
<h2 id="本地安装-Hexo-环境"><a href="#本地安装-Hexo-环境" class="headerlink" title="本地安装 Hexo 环境"></a>本地安装 Hexo 环境</h2><h3 id="安装-Node-js-环境并配置国内镜像"><a href="#安装-Node-js-环境并配置国内镜像" class="headerlink" title="安装 Node.js 环境并配置国内镜像"></a>安装 Node.js 环境并配置国内镜像</h3><p>GitHub Pages 博客使用 Hexo + GitHub Pages 实现，而 Hexo 博客是基于 node.js 的，因此需要在本地安装 node.js 环境。</p>
<ol>
<li><p>下载安装 node.js 并进行安装，下载地址：<a href="https://nodejs.org/en">node.js 官网</a>， <a href="https://nodejs.cn/download/">node.js 国内下载地址</a></p>
</li>
<li><p>下载到本地后，双击应用进行安装，按照默认安装完成并配置本地 node.js 环境变量，具体安装步骤参考：<a href="https://blog.csdn.net/qq_42006801/article/details/124830995">Node.js 安装与配置</a></p>
</li>
<li><p>安装完成后，windows 本地打开控制台窗口，使用 <code>node -v</code> 命令查看本地 node.js 版本信息，输出版本信息说明安装成功</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1691933059670_1691933059670.png" alt="node-version"></p>
<ol start="4">
<li><p>node.js 安装成功后，后续可以使用 npm 命令安装相关模块，由于 node.js 源服务在国外，为了增加 node 资源包下载速度，可以使用国内阿里云镜像下载：<code>npm config set registry https://registry.npm.taobao.org</code>  </p>
</li>
<li><p>设置完成后，可以使用 <code>npm config get registry</code> 命令查看当前资源镜像地址，返回结果如下表示设置成功。</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1691933220563_1691933220563.png" alt="设置 node.js 资源镜像"></p>
<h3 id="安装-Git-环境"><a href="#安装-Git-环境" class="headerlink" title="安装 Git 环境"></a>安装 Git 环境</h3><p>为了能够在本地与 GitHub 更好的进行文件资源的上传和下载，使用 Git 软件进行操作，需要下载并安装 Git 环境。</p>
<ol>
<li><p>下载与本机系统匹配的 Git 客户端并完成安装，下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a> ，安装教程：<a href="https://blog.csdn.net/mukes/article/details/115693833">https://blog.csdn.net/mukes/article/details/115693833</a></p>
</li>
<li><p>安装完成后，命令行中使用 <code>git --version</code> 查看到本地 git 版本号，输出版本信息则说明安装成功</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1691933680290_1691933680290.png" alt="git --version"></p>
<ol start="3">
<li>windows 进入文件浏览器任意目录，鼠标右键打开 <strong>Git Bash Here</strong> 进行本地 Git 信息的配置<ul>
<li>使用 <code>git config --global user.name &quot;name&quot;</code> 配置本地用户信息，name 为自定义 git 账户名</li>
<li>使用 <code>git config --global user.email &quot;eamil@xx.com&quot;</code> 配置本地邮箱信息，eamil 代表邮箱信息</li>
<li>使用 <code>ssh-keygen -t rsa -C &quot;eamil@xx.com&quot;</code> 命令在本地生成私钥和密钥信息</li>
</ul>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1691933793170_1691933793170.png" alt="本地生成密钥"></p>
<ol start="4">
<li><p>密钥生成后，在本地 <code>~/.ssh</code> ，即用户路径下找到 Git 的密钥和公钥 id_rsa.pub 文件</p>
</li>
<li><p>在 GitHub (个人设置页面)[<a href="https://github.com/settings/keys]%EF%BC%8C%E9%80%89%E6%8B%A9%E5%B7%A6%E4%BE%A7">https://github.com/settings/keys]，选择左侧</a> SSH and GPG keys 内容，右侧新增一个 SSH key ，上一步公钥文件内容作为 SSH 密钥添加到 GitHub 中完成 Git 与 GitHub 的授权认证</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1691933994990_1691933994990.png" alt="配置 github ssh key"></p>
<ol start="6">
<li>远程 GitHub 中添加了本地 SSH 密钥后，使用控制台命令 <code>ssh -T git@github.com</code> 检查是否可以与远程通信，如果出现 Hi…  你的 GitHub 账户名称的内容，说明链接成功</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1691934092513_1691934092513.png" alt="ssh 通信"></p>
<h2 id="初始化-Hexo-博客项目"><a href="#初始化-Hexo-博客项目" class="headerlink" title="初始化 Hexo 博客项目"></a>初始化 Hexo 博客项目</h2><h3 id="Hexo-项目下载安装"><a href="#Hexo-项目下载安装" class="headerlink" title="Hexo 项目下载安装"></a>Hexo 项目下载安装</h3><p>本地 node 等环境准备好后，就可以进行 Hexo 博客的初始化安装，安装过程中使用 Git 控制台工具。</p>
<ol>
<li><p>首先，选择一个本地存放 Hexo 博客文件的位置，如 <code>D:\Blog</code> </p>
</li>
<li><p>进入到目录中，右键选择 <code>Git Bash Here</code> 打开 Git 命令窗口 </p>
</li>
<li><p>在命令窗口中使用命令 <code>npm i hexo-cli -g</code> 下载安装 Hexo 项目</p>
</li>
<li><p>安装完成后使用 <code>hexo -v</code> 查看是否成功，输出版本信息说明安装成功</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1691934328091_1691934328091.png" alt="hexo 版本信息"></p>
<h3 id="初始化本地-Hexo-Blog"><a href="#初始化本地-Hexo-Blog" class="headerlink" title="初始化本地 Hexo Blog"></a>初始化本地 Hexo Blog</h3><p>安装 Hexo 后，在同目录下初始化博客网站文件，并进行本地运行效果预览。</p>
<ol>
<li><p>仍然是在 Git 控制台窗口中，使用命令 <code>hexo init</code> 初始化 hexo 文件夹</p>
<ul>
<li>初始化完成后，本地有了 hexo 的目录，之后的操作都在根目录下的 Git 命令窗口中</li>
<li>初始化时可能会报错，要注意是否使用了管理员权限进行操作</li>
</ul>
</li>
<li><p>使用命令 <code>npm install</code> 安装必备的组件</p>
</li>
<li><p>使用命令 <code>hexo g</code> 生成静态网页</p>
</li>
<li><p>使用 <code>hexo s</code> 打开本地服务器，开启后可在浏览器 <code>localhost:4000/</code> 查看本地博客效果</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1691934511848_1691934511848.png" alt="hexo 博客页面"></p>
<ol start="5">
<li>查看完后，可以使用 <code>ctrl + c</code> 退出服务</li>
</ol>
<h3 id="本地-Hexo-连接远程-GitHub-Pages-对应仓库"><a href="#本地-Hexo-连接远程-GitHub-Pages-对应仓库" class="headerlink" title="本地 Hexo 连接远程 GitHub Pages 对应仓库"></a>本地 Hexo 连接远程 GitHub Pages 对应仓库</h3><p>本地 hexo 安装完成，并在远程 GitHub 新建仓库，之后就可以通过 Git 访问远程 GitHub 仓库，在此之前，还需要最后一步将本地 hexo 和远程仓库进行关联，实现博客的一键部署。</p>
<ol>
<li>打开 hexo 目录下的 _config.yml 文件，修改配置内容</li>
</ol>
<pre class="line-numbers language-yml"><code class="language-yml"># [yourName] 即 GitHub 中的账户名称
# 绑定完成后，可以将本地内容部署到 GitHub 远程仓库中
deploy:
    type: git
    repository: https://github.com/[yourName]/[yourName].github.io
    branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ol start="2">
<li><p>使用 Git 命令安装 hexo 部署插件；<code>npm install hexo-deployer-git --save</code></p>
</li>
<li><p><code>hexo clean</code> 命令清理项目生成文件</p>
</li>
<li><p><code>hexo g</code>命令重新生成文件</p>
</li>
<li><p><code>hexo d</code> 命令部署项目到远程仓库</p>
</li>
<li><p>部署完成后，我们可以通过访问 <code>[yourname].github.io</code> 网址查看博客内容</p>
</li>
</ol>
<h2 id="开放的博客页面"><a href="#开放的博客页面" class="headerlink" title="开放的博客页面"></a>开放的博客页面</h2><p>本地博客项目和远程仓库绑定后，就可以将本地文件内容部署到远程，并通过 GitHub Pages 进行网络访问。</p>
<p>对于后续的博客书写，则可以在本地使用 markdown 文档记录内容，并使用 hexo 命令部署到远程仓库中。</p>
<h3 id="创建新的文件"><a href="#创建新的文件" class="headerlink" title="创建新的文件"></a>创建新的文件</h3><p>写一篇新的博客时，在 Hexo 博客根目录下，使用 <code>git bash</code> 打开 Git 命令界面，在控制台界面操作</p>
<ul>
<li><p> <code>hexo new post &quot;title&quot;</code> 新增一篇名为 title 的博客，文件格式为 <code>title.md</code> </p>
</li>
<li><p>本地文章生成在 <code>D:\Blog\source\_posts</code> 目录下，资源文件都会在 source 文件夹下</p>
</li>
<li><p>可以使用本地 markdown 编辑器进行博客内容的书写</p>
</li>
</ul>
<h3 id="博客发布"><a href="#博客发布" class="headerlink" title="博客发布"></a>博客发布</h3><p>本地 markdown 文档记录完成后，将文章部署到远程仓库步骤如下：</p>
<ol>
<li><p>使用markdown操作完文件后，使用 <code>hexo g</code> 生成静态网页</p>
</li>
<li><p>使用 <code>hexo s</code> 可以开启本地服务器，在 <code>localhost:4000/</code> 预览效果</p>
</li>
<li><p>使用 <code>hexo d</code> 上传到 GitHub 仓库，并部署博客网站，此时可以使用 <code>[name].github.io</code> 网络地址访问</p>
</li>
</ol>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>最后，一个使用 Hexo + GitHub Pages 个人博客就部署成功了，可以用作平时一些工作生活的记录，不断学习积累，厚积而薄发。</p>
<p>个人的 GitHub Pages 地址，欢迎访问指教：<a href="https://shonee.github.io/">https://shonee.github.io/</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用Next主题</title>
    <url>/hexo-change-theme/</url>
    <content><![CDATA[<p>Next是一款符合程序员审美的主题，<code>Hexo</code>中切换Next主题的方式非常简单，只需要将主题文件拷贝至根目录下的<code>themes</code>文件夹中，然后修改<code>_config.yml</code>文件中的<code>theme</code>字段即可。 <a id="more"></a> </p>
<h1 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a>Next主题</h1><h2 id="主题下载"><a href="#主题下载" class="headerlink" title="主题下载"></a>主题下载</h2><h3 id="Git命令行下载"><a href="#Git命令行下载" class="headerlink" title="Git命令行下载"></a>Git命令行下载</h3><pre class="line-numbers language-git"><code class="language-git"><span class="token comment" spellcheck="true"># Hexo根目录下执行命令</span>
<span class="token command">$ git clone https://github.com/theme-next/hexo-theme-next.git themes/next</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="发布网站下载"><a href="#发布网站下载" class="headerlink" title="发布网站下载"></a>发布网站下载</h3><p>在<a href="https://github.com/theme-next/hexo-theme-next/releases">Next发布网站</a>中手动下载源文件，并解压到根目录下的theme文件夹下，源文件名修改为next。</p>
<h2 id="配置新主题"><a href="#配置新主题" class="headerlink" title="配置新主题"></a>配置新主题</h2><blockquote>
<p>打开Hexo的配置文件<code>_config.yml</code>，将theme字段的值修改为next，即使用<code>theme/next</code>主题，重启后生效。</p>
</blockquote>
<p>Next主题默认风格为Muse，可以在主题配置文件中修改<code>scheme</code>字段来选择喜欢的主题风格</p>
<pre class="line-numbers language-yml"><code class="language-yml">themes\next\_config.yml
# Schemes
scheme: Muse
#scheme: Mist  #Muse的紧凑版本，整洁有序的单栏外观
#scheme: Pisces    #双栏Scheme，小家碧玉似的清新
#scheme: Gemini<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="站点优化"><a href="#站点优化" class="headerlink" title="站点优化"></a>站点优化</h2><blockquote>
<p>根目录下的<code>_config.yml</code>文件用来配置站点相关属性，可以通过修改此文件来自定义站点的内容或功能，修改后重启服务器才能看到效果。</p>
</blockquote>
<h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><pre class="line-numbers language-yml"><code class="language-yml">#_config.yml中配置相关信息
# 注意字段属性和值之间要有 一个空格 间隔
title: Shone's Blog    #站点名称
description: harry up! #站点描述
language: zh-CN    #站点使用语言为简体中文
author: shone    #设置站点作者<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="网站Favicon"><a href="#网站Favicon" class="headerlink" title="网站Favicon"></a>网站<code>Favicon</code></h3><blockquote>
<p><code>Favicon</code>是浏览器标签左侧的图标，可以在配置文件中自定义设置图标。</p>
</blockquote>
<pre class="line-numbers language-yml"><code class="language-yml"># themes\next\_config.yml
favicon:
  small: /images/favicon-16x16-next.png  # 小图标
  medium: /images/favicon-32x32-next.png  # 大图标
  apple_touch_icon: /images/apple-touch-icon-next.png  # 苹果图标
  safari_pinned_tab: /images/logo.svg  # safari浏览器标签页图标<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="侧栏信息"><a href="#侧栏信息" class="headerlink" title="侧栏信息"></a>侧栏信息</h3><blockquote>
<p>侧栏信息默认停靠在左侧，且默认不开启，需要手动点击。</p>
</blockquote>
<ul>
<li><p>停靠位置：设置侧栏的位置，修改主题配置文件中 <code>sidebar.position</code> 的值</p>
<ul>
<li>left：停靠左边</li>
<li>right：停靠右边</li>
</ul>
</li>
<li><p>显示时机：修改侧栏的显示时机，修改主题配置文件中 <code>sidbar.display</code> 的值</p>
<ul>
<li>post：默认，在文件页面（拥有目录时）显示</li>
<li>always：在所有页面都显示</li>
<li>hide：所有页面都隐藏，可以手动点击展开</li>
<li>remove：完全移除</li>
</ul>
</li>
<li><p>文章目录：默认目录不全部展开，只显示第一级，可以在主题配置文件中修改设置</p>
<img src="/imgs/hexo-change-theme/image-20201216195130377.png" alt="image-20201216195130377" style="zoom:50%;" />

</li>
</ul>
<h3 id="展示头像"><a href="#展示头像" class="headerlink" title="展示头像"></a>展示头像</h3><p>修改展示头像时，需要主题配置文件中设定 <code>avatr</code> 字段的值，设置成头像的链接地址。可以是：</p>
<ol>
<li>完整的网络URI：<code>http://example.com/avatar.png</code></li>
<li>站内地址：头像放在<code>themes/next/source/images</code>目录下，使用路径<code>/images/avatar.png</code>引用 </li>
</ol>
<img src="/imgs/hexo-change-theme/image-20201216154025479.png" alt="image-20201216154025479" style="zoom:50%;" /> 

<h3 id="首页显示"><a href="#首页显示" class="headerlink" title="首页显示"></a>首页显示</h3><blockquote>
<p>next主题默认首先显示每一篇文章的全文，如果只需要显示文章摘要，可以在主题配置文件中设置</p>
</blockquote>
<p>设置**[阅读全文]**可以通过以下三种方法：</p>
<ol>
<li><p>用户可以使用<code>&lt;!-- more --&gt;</code> 标记来精确划分摘要信息，标记之前的段落将作为摘要显示在首页。</p>
<blockquote>
<p>建议使用此种方式，可以精确控制摘要内容，且Hexo中插件更好识别。</p>
</blockquote>
</li>
<li><p>如果文章的<code>Front-Matter</code>中有非空的description字段，该字段内容会作为摘要显示在首页。</p>
</li>
<li><p>自动形成摘要，在主题配置文件中添加：</p>
</li>
</ol>
<pre class="line-numbers language-yml"><code class="language-yml"># themes\next\_config.yml
auto_excerpt:
    enable:true    #开启自动摘要提取
    length:150    #设置摘要内容为150个字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="文章meta信息"><a href="#文章meta信息" class="headerlink" title="文章meta信息"></a>文章meta信息</h3><blockquote>
<p>默认主题配置中，打开文章时标题下方显示文章的创建时间和分类信息等，用户可以在主题配置文件中自定义设置需要显示的meta元信息</p>
</blockquote>
<p><img src="/imgs/hexo-change-theme/image-20201216154347258.png" alt="默认显示内容"></p>
<pre class="line-numbers language-yml"><code class="language-yml"># themes\next\_config.yml
post_meta:
  item_text: true  # 显示文字说明
  created_at: true  # 显示文章创建时间
  updated_at:
    enabled: false  # 隐藏文章修改时间
    another_day: true  # 只有当修改时间和创建时间不是同一天的时候才显示
  categories: false  # 隐藏分类信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="文章内容"><a href="#文章内容" class="headerlink" title="文章内容"></a>文章内容</h3><ul>
<li>代码高亮设置：Next使用Tomorrow Theme作为代码高亮，有5中主题可以选择。在配置文件中的<code>hightlight_theme</code>字段设置具体值。<ul>
<li>normal：白色，默认</li>
<li>night</li>
<li>night blue</li>
<li>night bright</li>
<li>night eighties</li>
</ul>
</li>
</ul>
<h3 id="页脚信息"><a href="#页脚信息" class="headerlink" title="页脚信息"></a>页脚信息</h3><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><code>https://theme-next.iissnan.com/</code><br><code>http://yearito.cn/</code>   </p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>linux</title>
    <url>/linux/</url>
    <content><![CDATA[<p>Linux是一种自由和开放源码的系统，存在着许多不同的Linux版本，但它们都使用了Linux内核。Linux可以安装在各种计算机硬件设备中，如手机、平板电脑、路由器、台式计算机等。</p>
<a id="more"></a>

<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="Linux系统安装"><a href="#Linux系统安装" class="headerlink" title="Linux系统安装"></a>Linux系统安装</h2><h3 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h3><blockquote>
<p><a href="https://blog.csdn.net/babyxue/article/details/80970526">参考教程</a> </p>
</blockquote>
<h3 id="虚拟机克隆"><a href="#虚拟机克隆" class="headerlink" title="虚拟机克隆"></a>虚拟机克隆</h3><ul>
<li>关闭当前系统</li>
<li>使用虚拟机完整克隆系统</li>
<li>进入新系统修改相关配置<ul>
<li>修改ip地址</li>
<li>修改主机名：<code>hostnamectl set-hostname &lt;新的主机名&gt;</code> </li>
<li>修改ip地址和主机名映射</li>
</ul>
</li>
</ul>
<h3 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h3><blockquote>
<p>Linux根目录为<code>/</code>，可以使用<code>cd /</code>进入根目录，可以使用<code>pwd</code>查看当前所在目录位置。</p>
</blockquote>
<p>根目录 <code>/</code>的结构为：</p>
<img src="/imgs/linux/image-20201217170543598.png" alt="Linux目录结构" style="zoom:80%;" />

<ul>
<li>bin：binaries，存放二进制可执行文件</li>
<li>sbin：super user binaries，存放二进制可执行文件，只有root超级用户可以访问</li>
<li>etc：etcetera，存放系统配置文件</li>
<li>usr：unix shared resources，用于存放共享的系统资源</li>
<li>home：存放用户文件的根目录</li>
<li>root：超级用户目录</li>
<li>dev：devices，用于存放设备文件</li>
<li>lib：library，存放跟文件系统中的程序运行所需要的共享库以及内核模块</li>
<li>mnt：mount，系统管理员安装临时文件系统的安装点</li>
<li>boot：存放用于系统引导时使用的各种文件</li>
<li>tmp：temporary，用于存放各种临时文件</li>
<li>var：variable，用于存放运行时需要改变数据的文件</li>
</ul>
<p>Linux系统中<code>/</code>路径下使用命令查看内容：</p>
<img src="/imgs/linux/image-20201217171828595.png" alt="使用ll查看内容" style="zoom:80%;" />

<h2 id="Linux配置"><a href="#Linux配置" class="headerlink" title="Linux配置"></a>Linux配置</h2><h3 id="网络IP设置"><a href="#网络IP设置" class="headerlink" title="网络IP设置"></a>网络IP设置</h3><blockquote>
<p><a href="https://dechen.blog.csdn.net/article/details/105407711?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param">教程</a> </p>
<p>centOS7中使用ens33代替了eth0文件，即文件<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code>。</p>
<p>使用时，如果需要，可以将ens33文件重命名为eth0后，更改配置，重新启动网络。</p>
</blockquote>
<ul>
<li><p>修改主机名：<code>vi /etc/sysconfig/network</code> </p>
<pre class="line-numbers language-xml"><code class="language-xml">#/etc/sysconfig/network
NETWORKING=yes        #网络是否工作，不可以为no
HOSTNAME=shizhan    #主机名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>修改ip地址和主机名的映射关系：<code>vi /etc/hosts</code> </p>
<pre class="line-numbers language-xml"><code class="language-xml">/etc/hosts
127.0.0.1 localhost  ...
192.168.2.2 CentOS1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p><strong>设置IP为静态地址</strong>：</p>
<ol>
<li><p>查看虚拟机提供给系统的网段</p>
<img src="/imgs/linux/image-20201218093833425.png" alt="虚拟机网段" style="zoom:80%;" />
</li>
<li><p>修改IP地址，使用管理员权限执行命令：<code>vi /etc/sysconfig/network-scripts/ifcfg-ens33</code></p>
<pre class="line-numbers language-vim"><code class="language-vim">#ifcfg<span class="token operator">-</span>ens33
TYPE<span class="token operator">=</span>Ethernet
BOOTPROTO<span class="token operator">=</span>static    #static为静态ip，dhcp为自动获取动态ip
DEFROUTE<span class="token operator">=</span>yes

NAME<span class="token operator">=</span>ens33            #网卡设备名，要和文件名一致，如修改成eth0，则此处也要一致

DEVICE<span class="token operator">=</span>ens33        #网卡设备名，要和文件名一致，如修改成eth0，则此处也要一致
ONBOOT<span class="token operator">=</span>yes            #yes<span class="token operator">=</span>网卡随网络服务启动  系统默认不启动，这里一定要设置成启动

#默认为dhcp，修改为static时需要新增下面部分内容
DNS1<span class="token operator">=</span><span class="token number">114.114</span><span class="token operator">.</span><span class="token number">114.114</span>    #DNS服务器ip地址
IPADDR<span class="token operator">=</span><span class="token number">192.168</span><span class="token operator">.</span><span class="token number">2.10</span>        #网卡为当前系统配置的静态ip地址
NETMASK<span class="token operator">=</span><span class="token number">255.255</span><span class="token operator">.</span><span class="token number">255.0</span>    #子网掩码
GATEWAY<span class="token operator">=</span><span class="token number">192.168</span><span class="token operator">.</span><span class="token number">2.1</span>        #网关<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p> 重启网络服务：<code>service network restart</code> 或者 <code>systemtcl restart network</code> </p>
</li>
<li><p>如果需要，则关闭系统防火墙：<code>systemctl stop firewalld</code> </p>
</li>
<li><p>查看修改后的ip地址：<code>ifconfig</code> 或者 <code>ip addr show</code> </p>
<img src="/imgs/linux/image-20201218092804966.png" alt="image-20201218092804966" style="zoom:80%;" />

</li>
</ol>
<h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a><strong>防火墙配置</strong></h3><blockquote>
<p>CentOS7默认采用的是firewalld管理netfilter子系统，底层调用的仍然是iptables命令。</p>
</blockquote>
<p>firewalld：dynamic firewall daemon，支持ipv4和ipv6.</p>
<ul>
<li>firewalld可以动态修改单条规则，并不需要像iptables那样，在修改了规则后必须全部刷新才可以生效。</li>
<li>firewalld在使用上要比iptables更人性化。</li>
</ul>
<img src="/imgs/linux/image-20201218112535580.png" alt="Linux防火墙结构" style="zoom:80%;" />

<p><strong>firewalld配置方式：</strong></p>
<ul>
<li>firewall-config：GUI工具</li>
<li>firewall-cmd：命令行工具<ul>
<li>firewall-cmd –version：查看版本号</li>
<li>firewall-cmd –state：查看防火墙状态</li>
<li>firewall-cmd –list-all：查看全部信息</li>
<li>firewall-cmd –list-ports：只看端口信息</li>
<li>等其他</li>
</ul>
</li>
<li>直接编辑xml文件，编辑后需要reload才会生效</li>
</ul>
<p><strong>配置文件存放位置：</strong>firewalld的配置文件以xml文件为主（主配置文件为firewalld.conf），有两个位置</p>
<ul>
<li><code>/etc/firewalld/</code> ：存放修改过的配置，优先查找，找不到才去查找默认的配置</li>
<li><code>/usr/lib/firewalld/</code>：默认的配置</li>
<li>修改配置的时候只需要将<code>/usr/lib/firewalld/</code>复制到<code>/etc/firewalld/</code> 进行修改即可。</li>
</ul>
<h4 id="防火墙相关命令："><a href="#防火墙相关命令：" class="headerlink" title="防火墙相关命令："></a><strong>防火墙相关命令：</strong></h4><ul>
<li>systemctl status firewalld：查看防火墙状态</li>
<li>systemctl stop firewalld：临时关闭防火墙</li>
<li>systemctl disable firewalld：禁止防火墙开机自启动</li>
<li>service firewalld start：开启防火墙</li>
<li><strong>service firewalld restart：重启防火墙</strong></li>
<li>service firewalld stop：关闭防火墙</li>
<li>开端口命令：firewall-cmd –zone=public –add-port=8080/tcp –permanent<ul>
<li>–zone：作用域</li>
<li>–add-port=8080/tcp：添加端口，格式即 端口/协议</li>
<li>–permanent：永久生效，不加此参数重启后失效</li>
</ul>
</li>
</ul>
<h2 id="Linux命令"><a href="#Linux命令" class="headerlink" title="Linux命令"></a>Linux命令</h2><blockquote>
<p>命令格式：命令 -选项 参数</p>
<p>如： ls -a /usr   =&gt;  显示/usr目录下所有文件信息</p>
</blockquote>
<h3 id="关机-重启命令"><a href="#关机-重启命令" class="headerlink" title="关机/重启命令"></a>关机/重启命令</h3><ul>
<li>shutdown：系统关机<ul>
<li>-r：关机后立即重启</li>
<li>-h：halt，关机后不重新启动，关闭电源</li>
</ul>
</li>
<li>reboot：重新启动，类似 shutdown -r</li>
</ul>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul>
<li>内部命令：属于Shell解析器的一部分<ul>
<li>pwd：print working directory，显示当前工作目录</li>
<li>cd：change directory，切换目录</li>
<li>help：帮助，后跟命令，可以查看该命令的详细描述，如 help cd</li>
</ul>
</li>
<li>外部命令：独立于Shell解析器之外的文件程序<ul>
<li>ls：list，显示文件和目录列表，可以指定选项和参数，不指定默认所在目录<ul>
<li>-l：long，输入文件和目录的详细信息，和 ll 命令相同</li>
<li>-a：all，所有文件和目录，包括隐藏文件和特殊目录</li>
<li>-t：time</li>
</ul>
</li>
<li>mkdir：make directory，创建目录</li>
<li>cp：copy，复制文件或目录</li>
<li>man：manual，查看帮助文档，后跟命令，如 man ls</li>
</ul>
</li>
<li>快捷键：<ul>
<li>ctrl + c：停止当前进程</li>
<li>ctrl + r：查看命令历史</li>
<li>ctrl + l：清屏，与clear命令作用相同</li>
</ul>
</li>
<li>查看本机ip地址<ul>
<li>ifconfig</li>
<li>ip address</li>
</ul>
</li>
</ul>
<h3 id="系统状态"><a href="#系统状态" class="headerlink" title="系统状态"></a>系统状态</h3><ul>
<li>top：显示当前系统中耗费资源最多的进程，动态列表</li>
<li>ps：显示瞬间的进程状态<ul>
<li>-e/-A：显示所有进程，环境变量</li>
<li>-f：全格式</li>
<li>-a：显示所有用户的所有进程（包括其他用户）</li>
<li>-u：按用户名和启动时间的顺序来显示进程</li>
<li>-x：显示无控制终端的进程</li>
</ul>
</li>
<li>kill：杀死一个进程<ul>
<li>kill -9 pid ：杀死指定pid的进程</li>
</ul>
</li>
<li>df：显示文件系统磁盘空间的使用情况</li>
<li>ifconfig：网卡网络配置详解</li>
<li>ping：测试网络的连通性（后跟ip或域名）</li>
<li>netstat：显示网络状态信息<ul>
<li>-a：显示所有的连接和监听端口</li>
<li>-t：tcp，仅显示tcp相关选项</li>
<li>-u：udp，仅显示udp相关选项</li>
<li>-n：拒绝显示别名，能显示数字的全部转化成数字</li>
<li>-p：显示建立相关链接的程序名</li>
</ul>
</li>
<li>free：显示当前内存和交换空间的使用情况</li>
<li>du：显示指定文件（目录）已使用的磁盘空间的总和<ul>
<li>-h：human-readable，文件大小以K，M，G为单位显示</li>
<li>-s：summarize，只显示各档案大小的总和</li>
</ul>
</li>
</ul>
<h3 id="操作文件或目录"><a href="#操作文件或目录" class="headerlink" title="操作文件或目录"></a>操作文件或目录</h3><ul>
<li>mkdir：make directory，创建目录<ul>
<li>-p：parents，创建指定目录时，如果父目录不存在则会先生父目录</li>
</ul>
</li>
<li>touch：创建空文件</li>
<li>cp：copy，复制文件或目录<ul>
<li>-r：recursive，递归处理，将指定目录下的文件与子目录一块拷贝</li>
</ul>
</li>
<li>mv：move，移动文件或目录，文件或目录改名</li>
<li><code>echo &quot;abc&quot; &gt; file3.txt</code> ：将字符串内容输出到file3文件中，没有则先创建文件<ul>
<li><strong><code>&gt;</code> ：代表覆盖内容</strong></li>
<li><strong><code>&gt;&gt;</code>：代表在文件中追加内容</strong></li>
</ul>
</li>
<li>less、more、cat，都是查看输出文件内容的命令，可以配合 <code>&gt;</code> 命令输出内容到新文件中<ol>
<li><code>cat 1.txt &gt; file4.txt</code></li>
<li><code> less 1.txt &gt; file5.txt</code> </li>
<li><code>more 1.txt &gt; file6.txt</code> </li>
</ol>
</li>
<li>rm：remove，删除文件<ul>
<li><code>-i</code>：删除前逐一询问确认</li>
<li>-r：recursive，同时删除该目录下的所有文件</li>
<li>-f：force，强制删除文件或目录（递归删除）</li>
</ul>
</li>
<li>rmdir：remove directory，删除空目录</li>
<li>cat：catenate，显示文本内容</li>
<li>more、less：分页显示文本文件内容</li>
<li>head、tail：查看文本中开头或结尾部分的内容<ul>
<li>head -n 5 a.log：查看a.log文件的前5行</li>
<li>tail -F b.log：follow，循环读取文件内容</li>
</ul>
</li>
<li>wc：word count，统计文本的行数、字数、字符数<ul>
<li>-m：统计文本字符数</li>
<li>-w：统计文本字数</li>
<li>-l：统计文本行数</li>
</ul>
</li>
<li>find：在文件系统中查找指定的文件，<code>find/etc/ -name &quot;aaa&quot;</code>：在/etc/目录下查找名为aaa的文件</li>
<li>grep：在指定的文本文件中查找指定的字符串</li>
</ul>
<h3 id="压缩-解压命令"><a href="#压缩-解压命令" class="headerlink" title="压缩/解压命令"></a>压缩/解压命令</h3><ul>
<li>gzip [参数项] 文件名：压缩/解压文件或目录，压缩文件后缀名为gz<ul>
<li>-d：decompress，将压缩文件解压</li>
<li>-l：list，显示压缩文件的大小，未压缩文件的大小，压缩比</li>
<li>-v：verbose，显示文件名和压缩比</li>
<li>-num：用指定的数字num来调整压缩的速度，如：<ul>
<li>-1或–fase表示最快压缩方法，低压缩比</li>
<li>-9或–best表示最慢压缩方法，高压缩比</li>
<li>系统缺省值（默认）为6</li>
</ul>
</li>
</ul>
</li>
<li>bzip2  [参数项] 文件名：压缩/解压文件或目录，压缩文件后缀为bz2<ul>
<li>-z：compress，压缩的参数</li>
<li>-d：decompress，解压缩的参数</li>
<li>-c：将压缩过程产生的数据输出到屏幕上</li>
<li>-num：同gzip中数字功能</li>
</ul>
</li>
<li>tar  [参数项] 文件名：文件、目录打包/解包<ul>
<li>-c：create，建立一个压缩文件的参数指令</li>
<li>-x：extract，解开一个压缩文件的参数指令</li>
<li>-z：是否需要用gzip压缩</li>
<li>-j：是否使用bzip2压缩</li>
<li>-v：verbose，压缩过程中显示文件</li>
<li>-f：使用档名，在f之后要立即接档名（file）</li>
</ul>
</li>
</ul>
<h2 id="Vim编辑器"><a href="#Vim编辑器" class="headerlink" title="Vim编辑器"></a>Vim编辑器</h2><h3 id="Vim工作模式"><a href="#Vim工作模式" class="headerlink" title="Vim工作模式"></a>Vim工作模式</h3><img src="/imgs/linux/image-20201218170322451.png" alt="vim工作模式" style="zoom:67%;" />



<h3 id="定位命令"><a href="#定位命令" class="headerlink" title="定位命令"></a>定位命令</h3><ul>
<li>:set nu：显示行号</li>
<li>:set nonu：取消行号</li>
<li>gg：小写，定位到文本的第一行</li>
<li>G：大写，定位到文本的最后一行</li>
<li>:n：定位到文本的第n行</li>
</ul>
<h3 id="插入命令"><a href="#插入命令" class="headerlink" title="插入命令"></a>插入命令</h3><ul>
<li>i：小写，在光标<strong>前</strong>插入内容</li>
<li>I：大写，在光标当前行<strong>开始处</strong>插入内容</li>
<li>a：小写，在光标<strong>后</strong>插入内容</li>
<li>A：大写，在光标当前行<strong>末尾处</strong>插入内容</li>
<li>o：小写，在光标当前行的<strong>下一行插入新行</strong></li>
<li>O：大写，在光标当前行的<strong>上一行插入新行</strong></li>
</ul>
<h3 id="替换和取消"><a href="#替换和取消" class="headerlink" title="替换和取消"></a>替换和取消</h3><ul>
<li>yy：复制当前行；nyy：复制n行</li>
<li>p：粘贴</li>
<li>u：undo，取消上一步操作</li>
<li>Ctrl + r：redo，返回到undo之前，即撤销撤销</li>
<li>r：替换光标所在处的字符</li>
<li>R：从光标处开始替换，按Esc后结束</li>
</ul>
<h3 id="删除命令"><a href="#删除命令" class="headerlink" title="删除命令"></a>删除命令</h3><ul>
<li>x：删除光标所在字符</li>
<li>nx：删除光标所在处后的n个字符</li>
<li>dd：删除光标所在行</li>
<li>D：删除光标所在处到行尾的所有内容</li>
<li>ndd：删除光标所在行开始的n行</li>
<li>dG：删除光标所在行到末尾行的所有内容</li>
<li>:5,7d：删除指定范围的行，此处是删除第5、7行</li>
</ul>
<h3 id="相关快捷键"><a href="#相关快捷键" class="headerlink" title="相关快捷键"></a>相关快捷键</h3><ul>
<li>Shift + zz：保存退出，与<code>:wq</code>命令作用相同</li>
<li>v：进入字符可视模式，选择单个字符，按y复制，按p粘贴</li>
<li>V或Shift + v：进入行可视模式，选择行，按y复制，按p粘贴</li>
<li>Ctrl + v：进入块可视模式，选择块，按y复制，按p粘贴</li>
</ul>
<h2 id="Linux用户和权限"><a href="#Linux用户和权限" class="headerlink" title="Linux用户和权限"></a>Linux用户和权限</h2><blockquote>
<p>Linux操作系统是一个多用户操作系统，允许多用户同时登录到系统上并使用资源。系统会根据账户来区分每个用户的文件，任务和工作环境，使得每个用户工作都不受干扰。</p>
</blockquote>
<h3 id="用户类别"><a href="#用户类别" class="headerlink" title="用户类别"></a>用户类别</h3><ul>
<li>超级用户：root，UID=0</li>
<li>伪用户：UID在1-499<ul>
<li>伪用户不能登录系统，且没有宿主目录</li>
<li>如系统和服务相关的：bin、daemon、shutdown等</li>
<li>进程相关的：mail、news、games等</li>
</ul>
</li>
<li>普通用户：UID在500-60000</li>
<li>普通用户切换至root用户：$ su -&gt; 输入密码就可切换为root用户</li>
<li>root用户切换至普通用户：$ su &lt;用户名&gt; 即可切换为指定用户</li>
</ul>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul>
<li><p><strong><code>/etc/passwd</code>：保存用户信息的文件</strong></p>
<p>使用<code>cat /etc/passwd</code>查看文件，内容<strong>格式</strong>为：</p>
<img src="/imgs/linux/image-20201219171544970.png" alt="用户文件内容" style="zoom:67%;" />

<ul>
<li>root - 用户名：用户登录系统的用户名</li>
<li>x - 密码：密码位</li>
<li>0 - UID：用户标识号</li>
<li>0 - GID：默认组标识号</li>
<li>root - 描述信息：存放用户的描述信息</li>
<li>/root - 宿主目录：用户登录系统的默认目录，默认是在/home/下</li>
<li>/bin/bash - 命令解析器：用户使用的Shell，默认是bash</li>
</ul>
</li>
<li><p><strong><code>/etc/shadow</code>：保存密码的文件</strong></p>
<p>使用命令<code>cat /etc/shadow</code>查看，内容格式如图所示，依次表示含义为：</p>
<img src="/imgs/linux/image-20201219172418997.png" alt="用户密码文件内容" style="zoom:67%;" />

<ul>
<li>用户名：登录系统的用户名</li>
<li>密码：加密密码</li>
<li>最后一次修改时间：最后一次修改密码距离现今的天数</li>
<li>最小时间间隔：两次修改密码间隔最小时间</li>
<li>最大时间间隔：~</li>
<li>警告时间</li>
<li>账号限制时间</li>
<li>失效时间</li>
<li>标志</li>
</ul>
</li>
<li><p><strong><code>/etc/group</code>：保存用户组的文件</strong></p>
<blockquote>
<p>每个用户至少属于一个组；每个组可以包含多个用户；同一个组的用户拥有组的权限；</p>
</blockquote>
<img src="/imgs/linux/image-20201219173014652.png" alt="用户组文件内容" style="zoom:67%;" />

<ul>
<li>组名：</li>
<li>组密码：密码位，一般不使用</li>
<li>GID：组标识号</li>
<li>组内用户列表：属于改组的用户的列表</li>
</ul>
</li>
<li><p><code>/etc/gshadow</code>：保存用户组密码的文件</p>
</li>
<li><p><code>/etc/default/useradd</code>：用户配置文件</p>
</li>
</ul>
<h3 id="操作用户命令"><a href="#操作用户命令" class="headerlink" title="操作用户命令"></a>操作用户命令</h3><ul>
<li>查看用户信息：<ul>
<li>查看当前登录用户信息:：<code>w/who/whoami</code></li>
<li>查看历史登录用户信息：<code>last</code></li>
<li>查看系统所有用户信息：<ul>
<li>用户信息保存在<code>/etc/passwd</code>文件下，查看用户完整信息：<code>cat /etc/passwd</code><ul>
<li>可以使用cut命令截取只显示用户名称：<code>cut -d: -f1 /etc/passwd</code></li>
<li>-d:，表示定义以:为截取分隔符</li>
<li>-f1，表示截取显示信息的第一列域信息</li>
</ul>
</li>
<li>还可以使用<code>getent passwd</code>命令来查看完成用户信息，使用cut截取</li>
<li>可以使用<code>compgen -u</code>命令查看所有用户名</li>
</ul>
</li>
</ul>
</li>
<li><code>useradd</code> ：<strong>添加用户</strong><ul>
<li>-u：uid，指定用户标识ID</li>
<li>-g：gid，指定所属的组名ID</li>
<li>-G：Groups，指定多个组，使用逗号， 间隔</li>
<li>-c：comment，用户描述</li>
<li>-e：expire date，失效时间</li>
<li>例如创建用户du的命令：<code>useradd -u 888 -g users -G sys,root -c &quot;hr du&quot; du passwd du</code> </li>
</ul>
</li>
<li>修改指定用户的密码：切换用户至root，使用<code>passwd [username]</code> 为用户设置新密码</li>
<li><code>usermod</code>：user modify，<strong>修改用户</strong><ul>
<li>-l：修改用户名，如将用户a名称改为b的命令是：<code>usermod -l a b</code> </li>
<li>-g：添加组，为用户tom添加sys组：<code>usermod -g sys tom</code> </li>
<li>-G：添加多个组，使用逗号间隔</li>
<li>-L：Lock，锁定账户密码</li>
<li>-U：Unlock，解锁账户密码</li>
</ul>
</li>
<li><code>userdel</code>：user delete，<strong>删除用户</strong><ul>
<li>-r：remove，删除账号同时删除账号相关目录 </li>
</ul>
</li>
</ul>
<h3 id="操作组命令"><a href="#操作组命令" class="headerlink" title="操作组命令"></a>操作组命令</h3><ul>
<li>groups：显示用户所属组</li>
<li>groupadd：添加组<ul>
<li>-g：指定组gid</li>
</ul>
</li>
<li>groupmod：修改组<ul>
<li>-n：new group，修改组名</li>
</ul>
</li>
<li>groupdel：删除组</li>
</ul>
<h3 id="权限操作命令"><a href="#权限操作命令" class="headerlink" title="权限操作命令"></a>权限操作命令</h3><p><strong>三种基本权限：</strong>r（read）读权限；w（write）写权限；x（execute）执行权限；</p>
<img src="/imgs/linux/image-20201219195144607.png" alt="文件权限信息" style="zoom:67%;" />

<ul>
<li>第1位：表示文件类型，d-目录，-普通文件，I-链接文件</li>
<li>第2-4位：所属用户权限，用u（user）表示</li>
<li>第5-7位：所属组权限，用g（group）表示</li>
<li>第8-10位：其他用户权限，用o（other）表示</li>
<li>2-10位标识所有的权限，用a（all）表示</li>
<li><code>-rwxrw-r--</code>：表示一个普通文件，所属用户有读/写/执行权限，同组用户有读/写权限，其他组只有读权限</li>
</ul>
<p><strong>更改文件权限操作：</strong></p>
<ul>
<li>chmod：change mode，修改文件权限<ul>
<li>-R：Receusive，表示其下的文件和子目录做相同的权限操作</li>
<li>如：<code>chmod u+x a.txt</code>  ：为a.txt文件的所属用户添加执行权限</li>
</ul>
</li>
<li>使用数字来表示权限：r=4，w=2，x=1，-=0<ul>
<li>如：<code>chmod 750 b.txt</code>：表示文件b.txt，所属用户有读/写/执行权限，所属组有读/执行/权限，其他无</li>
</ul>
</li>
</ul>
<h2 id="Linux中安装软件"><a href="#Linux中安装软件" class="headerlink" title="Linux中安装软件"></a>Linux中安装软件</h2><h3 id="RPM"><a href="#RPM" class="headerlink" title="RPM"></a>RPM</h3><blockquote>
<p>RedHat Package Manager，RedHat软件包管理工具</p>
</blockquote>
<p>相关参数：</p>
<ul>
<li>i：install，安装应用程序</li>
<li>e：erase，卸载应用程序</li>
<li>vh：verbose hash，显示安装进度</li>
<li>U：update，升级软件包</li>
<li>qa：query all，显示所有已安装软件包</li>
<li>结合grep命令使用</li>
</ul>
<h3 id="YUM"><a href="#YUM" class="headerlink" title="YUM"></a>YUM</h3><blockquote>
<p>Yellow dog Updater，Modified  是一个在Fedora和RedHat以及SUSE、CentOS中的Shell前端软件包管理器。</p>
</blockquote>
<ul>
<li><p>yum instll gcc-c++</p>
</li>
<li><p>yum remove gcc-c++</p>
</li>
<li><p>yum update gcc-c++</p>
</li>
<li><p>yum 安装软件时出现 is this ok [y/d/n]：</p>
<ul>
<li>y：下载安装</li>
<li>n：不安装</li>
<li>d：只下载不安装</li>
</ul>
</li>
</ul>
<h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><ol>
<li><p><a href="https://www.jdkdownload.com/">JDK下载</a> </p>
</li>
<li><p>将<code>jdk-8u181-linux-x64.tar.gz</code>传至Linux系统中</p>
<ul>
<li>使用FTP连接Linux进行文件传输，前提是Linux系统要安装FTP服务，且开启FTP的21端口</li>
<li>在XShell中使用命令传输文件，使用 <code>rz</code> 命令，实现windows项Linux传输文件，选择单个文件</li>
<li>使用<code>sz</code>命令，实现从Linux向windows传输文件</li>
</ul>
</li>
<li><p>解压缩，命令 <code>tar -zxvf jdk-8u181-linux-x64.tar.gz /usr/local </code> 解压缩到<code>/usr/local</code>中 </p>
</li>
<li><p>配置环境变量</p>
<ol>
<li><p>使用命令<code>vi /etc/profile</code> 编辑系统环境变量设置</p>
</li>
<li><p>最后追加内容：</p>
<pre><code>export JAVA_HOME=/usr/local/jdk1.7.0_45
export PATH=$PATH:$JAVA_HOME/bin</code></pre>
</li>
<li><p>刷新环境变量 <code>source /etc/profile</code> </p>
</li>
</ol>
</li>
<li><p>测试JDK环境，命令：<code>java -version</code> ，显示当前版本号即表示成功</p>
<img src="/imgs/linux/image-20201219204628690.png" alt="image-20201219204628690" style="zoom:67%;" />

</li>
</ol>
<h3 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h3><ol>
<li><p>上传<code>apache-tomcat-7.0.68.tar.gz</code>到Linux系统</p>
</li>
<li><p>解压缩文件到指定目录，<code>tar -zxvf apache-tomcat-7.0.68.tar.gz -C /usr/local</code> </p>
</li>
<li><p>启动tomcat，进入tomcat/bin目录下，执行启动文件<code>./startup.sh</code> </p>
<img src="/imgs/linux/image-20201220100649965.png" alt="启动tomcat" style="zoom:67%;" />
</li>
<li><p>显示启动后使用命令查看tomcat是否已经启动成功：</p>
<ol>
<li><p><code>netstat -nltp</code>：查看系统当前监听的端口情况</p>
</li>
<li><p>8080端口开启，表示启动成功</p>
<img src="/imgs/linux/image-20201220094551030.png" alt="tomcat运行成功" style="zoom:67%;" />
</li>
<li><p>此时访问ip:8080可以看到如下，则表示tomcat安装成功。</p>
<img src="/imgs/linux/image-20201220101613257.png" alt="image-20201220101613257" style="zoom:50%;" />
</li>
</ol>
</li>
<li><p><strong>Tomcat启动时常见问题</strong></p>
<ol>
<li><p>如果8080端口没有监听，说明tomcat启动失败</p>
<img src="/imgs/linux/image-20201220094454339.png" alt="tomcat启动失败" style="zoom:67%;" />
</li>
<li><p>若tomcat启动失败，查看tomcat日志</p>
<pre class="line-numbers language-cmd"><code class="language-cmd">cd tomcat/logs
cat catalina.out    #查看日志文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>日志文件内容如下：表示启动时tomcat没有找到指定的Java环境</p>
<img src="/imgs/linux/image-20201220101025996.png" alt="tomcat启动失败日志信息" style="zoom:67%;" />
</li>
<li><p>检查配置环境变量时JDK路径错误，修改后重新启动tomcat，查看端口情况如下：启动成功</p>
<img src="/imgs/linux/image-20201220094551030.png" alt="tomcat运行成功" style="zoom:67%;" />
</li>
<li><p>如果tomcat已经启动，外部访问仍然失败，则要检查防火墙是否关闭或者是否允许8080端口通行。</p>
</li>
</ol>
</li>
</ol>
<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><blockquote>
<p>yum安装是最简单的，使用压缩包安装失败，因此换用了yum方式。 <a href="https://blog.csdn.net/ntuxiaolei/article/details/81777335?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control">参考教程</a> </p>
</blockquote>
<ol>
<li><p>查看是否使用yum安装过mysql，使用命令：<code>rpm -qa | grep -i mysql</code> </p>
<ul>
<li><p>如下图显示已经安装的相关模块，则要先卸载，再重新安装</p>
<img src="/imgs/linux/image-20201221195202378.png" alt="image-20201221195202378" style="zoom:80%;" />

<ul>
<li><code>yum -y remove &lt;全名称&gt;</code>：卸载相关模块</li>
<li>如果上述命令卸载不掉，则使用命令： <code>rpm -er &lt;全名称&gt;</code> </li>
</ul>
</li>
<li><p>如果执行后无任何变化，则表示没有安装，可以正常进行</p>
</li>
</ul>
</li>
<li><p>使用yum命令下载并安装mysql相关服务</p>
<pre class="line-numbers language-cmd"><code class="language-cmd"># cd /usr/local        #进入/usr/local文件夹下
# wget http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm #下载.rpm文件
# rpm -ivh mysql57-community-release-el7-8.noarch.rpm #
# yum -y install mysql-server    #安装mysql服务
#也可以指定安装目录
# yum --install root=/usr/local/mysql --releaserver=/ -y install mysql-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>等待所有服务模块安装完成</p>
<img src="/imgs/linux/image-20201221203743558.png" alt="image-20201221203743558" style="zoom:67%;" />
</li>
<li><p>mysql相关配置文件路径，并配置mysql的配置文件</p>
<ul>
<li><p>配置文件：<code>/etc/my.cnf</code></p>
</li>
<li><p>日志文件：<code>/var/log/mysqld.log</code></p>
</li>
<li><p>服务启动脚本：<code>/usr/lib/systemd/system/mysqld.service</code></p>
</li>
<li><p>socket文件：<code>/var/run/mysqld/mysqld.pid</code></p>
</li>
<li><p>添加mysl配置内容：</p>
<pre class="line-numbers language-cnf"><code class="language-cnf">[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
server_id = 1
expire_logs_days = 3

# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>启动mysql服务，相关命令：</p>
<ul>
<li><code>systemctl start mysqld.service</code>：开启mysql服务</li>
<li><code>system status mysqld.service</code>：查看mysql服务状态，<ul>
<li>-l：查看详细状态信息</li>
</ul>
</li>
<li><code>systemctl stop mysql.service</code>：停止mysql服务</li>
<li><code>systemctl restart mysql.service</code>：重启mysql服务</li>
</ul>
</li>
<li><p>设置mysql开机自启动</p>
<ul>
<li><code>systemctl enable mysqld</code>：</li>
<li><code>systemctl daemon-reload</code>：</li>
</ul>
</li>
<li><p><strong>修改mysql密码</strong></p>
<blockquote>
<p>安装mysql后，会在相应的日志文件中产生一个随机密码，可以使用命令查看</p>
<ul>
<li>cat /var/log/mysqld.log    ：查看日志文件全部内容</li>
<li>grep “password” /var/log/mysqld.log   ：正则匹配日志文件中的password关键字</li>
</ul>
</blockquote>
<p>使用命令登录mysql：<code>mysql -u root -p</code>：命令回车后输入日志中密码，登录mysql</p>
<ul>
<li><p>登录成功，修改密码：<code>ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;rOOT@2020&#39;;</code>即root账户的密码修改为Root@2020</p>
</li>
<li><p>随机密码登录失败时，需要配置跳过认证阶段，登录后使用sql语句更新密码</p>
<ol>
<li><p>修改配置文件：<code>vi /etc/my.cnf</code> ，添加 skip-grant-tables 保存并退出，表示登录不验证</p>
</li>
<li><p>重启mysql服务，使用mysql直接登录mysql客户端</p>
</li>
<li><p>使用sql语句修改登录密码</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">#update user set password=password("Root@2020") where user="root";
#mysql 5.7的数据库没有了password字段 用的是authentication_string字段
use mysql;
update mysql.user set authentication_string=password('Root@2020') where user='root' ;
flush privileges;    #<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
</li>
<li><p><strong>修改密码策略</strong>（默认密码策略要求密码是大小写字母+数字+特殊字符的组合且最少8位）</p>
</li>
</ul>
</li>
<li><p>设置允许远程登录</p>
</li>
<li><p>设置允许其他端，navicate远程连接</p>
<pre class="line-numbers language-mysql"><code class="language-mysql">mysql -u root -p Root@2020    #连接客户端
mysql> use mysql;
mysql> ALTER USER 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'Root@2020';
#如果上句运行失败，则使用下面命令
#mysql> grant all on *.* to root@"%" identified by "Root@2020";
mysql> flush privileges;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<h3 id="安装使用Redis"><a href="#安装使用Redis" class="headerlink" title="安装使用Redis"></a>安装使用Redis</h3><p>安装步骤： <a href="https://wsk1103.github.io/2019/01/12/centos-7-%E5%AE%89%E8%A3%85Redis/">安装教程</a> </p>
<ol>
<li><p>如果电脑中没有安装过gcc依赖，则要先安装才行（否则编译时报错）</p>
<blockquote>
<p><code>$ yum -y install gcc</code></p>
</blockquote>
</li>
<li><p>可以直接使用命令安装，但是安装的版本不能指定，一般就是比较低的版本</p>
<blockquote>
<p><code># yum install redis</code></p>
</blockquote>
</li>
<li><p>使用命令下载文件后进行安装  进入到 usr/local 文件夹中下载</p>
<blockquote>
<p><code># wget http://download.redis.io/releases/redis-5.0.4.tar.gz</code></p>
</blockquote>
</li>
<li><p>解压压缩包  <code># tar zxvf redis-5.0.4.tar.gz</code> </p>
</li>
<li><p>解压后进入到 redis-5.0.4 目录下，进行编译</p>
<ol>
<li>先编译库  <code># make MALLOC=libc</code></li>
<li>再编译资源（安装） <code># cd src &amp;&amp; make install</code></li>
</ol>
</li>
<li><p>编译安装完成，可以启动redis服务了</p>
</li>
<li><p>为了使用redis更加方便，需要对redis进行一定的配置，redis-5.0.4下的redis.conf文件</p>
</li>
<li><p>将配置文件复制到etc文件夹下  <code>cp redis.conf /etc</code> ，然后进行更改（也可更改后复制）</p>
<blockquote>
<p><code># vi redis.conf</code>     etc是系统配置文件存放的目录，方便配置</p>
</blockquote>
<ol>
<li>允许其他ip访问 ：将 <code>bind 127.0.0.1</code> 注释掉，此处限制了访问redis的地址</li>
<li>解除安全保护机制：修改 <code>protected-mode yes</code> 为 <code>protected-mode no</code></li>
<li>修改redis启动为守护进程：修改 <code>daemonize no</code> 为  <code>daemonize yes</code> </li>
</ol>
</li>
<li><p><strong>启动修改后redis服务   <code>redis-server /etc/redis.conf</code></strong> 👍</p>
<img src="/../../../markdownLog/%25E9%259D%25A2%25E8%25AF%2595%25E6%2589%25BE%25E5%25B7%25A5%25E4%25BD%259C/assets/image-20201101215817433.png" alt="image-20201101215817433" style="zoom:80%;" />
</li>
<li><p>服务启动后，可以使用命令启动客户端进行测试  <code>redis-cli</code> </p>
<ol>
<li><p>模拟客户端发起通信 <code>redis-cli</code></p>
</li>
<li><p>如果不成功，要退出后重新进行 <code>exit</code></p>
<img src="/../../../markdownLog/%25E9%259D%25A2%25E8%25AF%2595%25E6%2589%25BE%25E5%25B7%25A5%25E4%25BD%259C/assets/image-20201101215939224.png" alt="image-20201101215939224" style="zoom:80%;" />
</li>
</ol>
</li>
<li><p>设置redis启动服务脚本（使用systemd管理redis）</p>
<ol>
<li><p>在 <code>/usr/lib/systemd/system</code> 目录下新建文件 <code>redis.service</code> ，并添加内容如下：</p>
<pre class="line-numbers language-linux"><code class="language-linux">[Unit]
Decription=Redis 6379
After=syslog.target network.target
[Service]
Type=forking
PrivateTmp=yes
Restart=always
ExecStart=/usr/local/bin/redis-server /etc/redis.conf
ExecStop=/usr/local/bin/redis-cli -h 127.0.0.1 -p 6379 -a jcon shutdown
User=root
Group=root
LimitCORE=infinity
LimitNOFILE=100000
LimitNPROC=100000
[Install]
WantedBy=multi-user.target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>设置完毕后，可以使用系统命令开启关闭redis</p>
</li>
</ol>
</li>
</ol>
<pre><code>3. 好像没有成功，等等再试</code></pre>
<ol start="12">
<li><p>设置redis开机自启动</p>
<ol>
<li><p>复制一份 <strong>utils/redis_init_script</strong> 到 <strong>/etc/init.d/</strong></p>
</li>
<li><p>修改 <code>redis_init_script</code> 文件，指定具体的启动文件</p>
<img src="/../../../markdownLog/%25E9%259D%25A2%25E8%25AF%2595%25E6%2589%25BE%25E5%25B7%25A5%25E4%25BD%259C/assets/image-20201102094652970.png" alt="image-20201102094652970" style="zoom:80%;" />
</li>
<li><p>设置自启动命令 <code># chkconfig redis_init_script on</code> ，</p>
</li>
<li><p>如果关闭自启动，将on换成off</p>
</li>
</ol>
</li>
<li><p>修改Redis的密码</p>
<img src="/../../../markdownLog/%25E9%259D%25A2%25E8%25AF%2595%25E6%2589%25BE%25E5%25B7%25A5%25E4%25BD%259C/assets/image-20201102094737334.png" alt="image-20201102094737334" style="zoom:80%;" />
</li>
<li><p>redis<a href="https://juejin.im/post/6844903889242685454">安装过程常见错误</a> </p>
</li>
</ol>
<h3 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h3><p><a href="https://blog.csdn.net/weixin_38118016/article/details/89949131">参考教程–安装成功！</a> </p>
<ol>
<li>查看Linux distribution版本号：<code>cat /etc/redhat-release</code> </li>
<li>nginx不在默认的yum源中，需要将nginx加入到yum中 <code>rpm -ivh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</code>  <ul>
<li>或者：<code>sudo yum -y install epel-release</code>添加Nginx存储库</li>
</ul>
</li>
<li>查看nginx是否存在：<code>yum repolist</code> </li>
<li>在yum中安装nginx：<code>yum install nginx</code> </li>
<li>安装完成测试本地访问：<code>curl -i localhost</code>返回响应信息<ul>
<li>或者浏览器访问<a href="http://localhost查看是否显示nginx页面/">http://localhost查看是否显示nginx页面</a></li>
</ul>
</li>
<li>使用外网访问（设置防火墙）<ul>
<li>允许http通信：<code>sudo fireawall-cmd --permanent --zone=public --add-service=http</code></li>
<li>语序https通信：<code>sudo fireawall-cmd --permanent --zone=public --add-service=https</code></li>
<li>重新加载防火墙配置：<code>sudo firewall-cmd --reload</code></li>
</ul>
</li>
</ol>
<p>Nginx 的相关操作命令：</p>
<ul>
<li><p>查看版本信息：nginx -V</p>
</li>
<li><p>启动 Nginx 服务：systemctl start nginx</p>
</li>
<li><p>停止 Nginx 服务：systemctl stop nginx</p>
</li>
<li><p>重启 Nginx 服务：systemctl restart nginx</p>
</li>
<li><p>重新加载 Nginx 配置文件，以优雅的方式重启：Nginx systemctl reload nginx</p>
</li>
<li><p>设置开机自启动：systemctl enable nginx</p>
</li>
<li><p> 停止开机自启动systemctl disable nginx</p>
</li>
<li><p>查看nginx的状态及进程、端口</p>
<ul>
<li>1、systemctl status nginx.service    （nginx服务状态）</li>
<li>2、netstat -antp | grep :                    （查看所有端口的占用情况）</li>
<li>3、netstat -antp | grep :80                （查看80端口占用）</li>
<li>4、ps aux | grep nginx                       （查看nginx进程运行状态）</li>
<li>5、ps -ef | grep nginx                         （查看Nginx运行端口号和安装位置）</li>
</ul>
</li>
<li><p>杀掉进程</p>
<ul>
<li>1、killall -9 nginx                                 （杀死所有nginx相关进程）</li>
<li>2、kill -9 pid1 and kill -9 pid2            （杀掉两个制定pid的进程）</li>
</ul>
</li>
</ul>
<p><strong>nginx配置文件路径</strong></p>
<ol>
<li>主配置文件：/etc/nginx/nginx.conf</li>
<li>子配置文件：/etc/nginx/conf.d/default.conf</li>
</ol>
<pre class="line-numbers language-conf"><code class="language-conf">server &#123;
    listen       80;    //要监听的端口，即访问时 url:port
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;    #日志

    #文件上传大小限制
    client_max_body_size    1000m;

    #静态资源文件
    #location / &#123;
    #    root   /usr/share/nginx/html;
    #    index  index.html index.htm;
    #&#125;

    #此处修改针对不同请求url分发到不同服务地址
    location ~ /eduservice/&#123;
        proxy_pass http://localhost;
    &#125;
    #对象存储
    location ~ /eduoss/&#123;
        proxy_pass http://localhost;
    &#125;
    #视频点播资源
    location ~ /eduvod/&#123;
        proxy_pass http://localhost;
    &#125;

    #error_page  404              /404.html;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="卸载Nginx"><a href="#卸载Nginx" class="headerlink" title="卸载Nginx"></a>卸载Nginx</h3><ul>
<li><p>停止Nginx服务：<code>systemctl stop nginx</code></p>
</li>
<li><p>删除Nginx自动启动：<code>systemctl disable nginx</code></p>
</li>
<li><p>删除Nginx相关源文件</p>
<pre class="line-numbers language-cmd"><code class="language-cmd">rm -rf /etc/nginx/
rm -rf /etc/init.d/nginx
rm -rf /usr/sbin/nginx
apt-get remove nginx*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>移除yum中的Nginx模块：<code>yum remove nginx</code></p>
</li>
</ul>
<h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><h4 id="使用yum安装"><a href="#使用yum安装" class="headerlink" title="使用yum安装"></a>使用yum安装</h4><ol>
<li>使用yum命令安装git：<code>yum -y install git</code> </li>
<li>安装完成后，使用命令查看版本信息：<code>git --version</code> </li>
<li>安装完成后的git路径在 <code>usr/libexec/git-core</code> 下</li>
<li>此种方式安装的git版本比较早，不是最新版。</li>
</ol>
<h4 id="下载软件包本地安装"><a href="#下载软件包本地安装" class="headerlink" title="下载软件包本地安装"></a>下载软件包本地安装</h4><ol>
<li>在github上找到git的最新版本，下载tar.gz包，地址：<a href="https://github.com/git/git/releases">https://github.com/git/git/releases</a></li>
<li>下载最新版本的tar.gz包至本地，并使用工具上传到linux服务器中</li>
<li>使用命令解压压缩包：<code>tar -zxvf git-2.22.0.tar.gz</code> </li>
<li>进入解压后的文件夹：<code>cd git-2.22.0.tar.gz</code>  </li>
<li>解压后拿到源码信息，就要对源码进行编译，首先安装编译需要的依赖：<code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</code>  </li>
<li>安装依赖时会自动使用yum安装git，可使用命令卸载旧版本：<code>yum -y remove git</code> </li>
<li>编译git源码：<code>make prefix=/usr/local/git all</code> </li>
<li>安装git至指定路径：<code>make prefix=/usr/local/git install</code>  </li>
<li>配置环境变量：<code>vi /etc/profile</code> <ul>
<li>在配置文件底部添加内容：<code>export PATH=$PATH:/usr/local/git/bin</code> </li>
</ul>
</li>
<li>刷新环境变量：<code>source /etc/profile</code> </li>
<li>查看git是否完成安装：<code>git --version</code> </li>
</ol>
<h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><h1 id="Linux常见问题"><a href="#Linux常见问题" class="headerlink" title="Linux常见问题"></a>Linux常见问题</h1><h2 id="Ubuntu系统远程连接"><a href="#Ubuntu系统远程连接" class="headerlink" title="Ubuntu系统远程连接"></a>Ubuntu系统远程连接</h2><blockquote>
<p>实验室服务器系统</p>
</blockquote>
<p><a href="https://jingyan.baidu.com/article/acf728fd440982f8e510a3a9.html">ubuntu修改登录密码</a> </p>
<p>du:123456</p>
<p>root:root</p>
<p>win本地使用Xshell连接远程Linux系统时，连接失败。如果本地对linux可以ping通，远程ping本地不通，则应该是：（解决后连接成功）</p>
<p><img src="/imgs/linux/image-20201120122929012.png" alt="image-20201120122929012"></p>
<h2 id="Linux虚拟机"><a href="#Linux虚拟机" class="headerlink" title="Linux虚拟机"></a>Linux虚拟机</h2><h4 id="执行sudo-su命令时提示-“用户不在sudoers文件中，此事将被报告。”"><a href="#执行sudo-su命令时提示-“用户不在sudoers文件中，此事将被报告。”" class="headerlink" title="执行sudo su命令时提示 “用户不在sudoers文件中，此事将被报告。”"></a>执行<code>sudo su</code>命令时提示 “用户不在sudoers文件中，此事将被报告。”</h4><p><strong>问题：</strong>使用shone切换至管理员权限时，<code>sudo su</code>命令提示 shone用户不在sudoers文件中，此事将被报告。</p>
<ul>
<li>sudo ：后跟命令，当前用户以root身份执行本身没有权限的操作，需要验证当前用户密码</li>
<li>sudo su：使用sudo 给su命令提权，而su命令需要执行该命令的用户在sudoers中有权限</li>
<li>su：不跟用户的su命令就代表切换至root账户，即su root（默认缺省为root）</li>
<li>su root：切换至root用户，验证root密码，不改变所在目录</li>
<li>su - root：切换至root用户，并进入到root用户对应目录下</li>
<li>su shone：切换至shone用户</li>
</ul>
<p><strong>原因：</strong>并不是所有的用户都可以执行sudo命令，配置文件/etc/sudoers中记录有权限执行sudo的用户。我们可以对配置文件进行编辑，添加当前用户的权限，配置完成后再次使用sudo命令成功执行。而sudoers文件是root用户只读文件，修改后需要使用命令<code>wq!</code>强制保存。</p>
<p><strong>解决办法：</strong></p>
<ol>
<li><p>使用命令<code>su root</code>切换至root用户，需要验证root用户密码</p>
</li>
<li><p>查看<code>/etc/sudoers</code>文件内容是否包含当前用户权限</p>
</li>
<li><p><code>vim /etc/sudoers</code>编辑文件增加shone用户的sudo权限</p>
<pre class="line-numbers language-sudoers"><code class="language-sudoers">## root用户默认存在，可以添加其他用户权限
root     ALL=(ALL:ALL) ALL
shone    ALL=(ALL:ALL) ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>注意<code>/etc/sudoers</code>文件的权限是440只读文件，编辑文件内容需增加写入权限或强制修改保存</p>
<ul>
<li><code>chmod u+w /etc/sudoers</code>，增加写入权限</li>
<li><code>chmod 740 /etc/sudoers</code>，增加root用户的全部权限（4+2+1）</li>
<li>或者编辑完成后使用命令<code>:wq!</code>强制保存修改</li>
</ul>
</li>
<li><p><code>su shone</code>切换至普通用户，测试权限是否增加成功</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程实现内容交替输出</title>
    <url>/multithreading/</url>
    <content><![CDATA[<h1 id="Java多线程并发"><a href="#Java多线程并发" class="headerlink" title="Java多线程并发"></a>Java多线程并发</h1><img src="/imgs/multithreading/image-20201204193843419.png" alt="image-20201204193843419" style="zoom:67%;" /> 

<a id="more"></a>

<h2 id="多线程基础"><a href="#多线程基础" class="headerlink" title="多线程基础"></a>多线程基础</h2><h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><p><strong>进程：</strong></p>
<p><strong>线程：</strong></p>
<ul>
<li>线程是操作系统能够进行运算调度的最小单位，包含在进程之中，是进程中的实际运作单位。</li>
<li>一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。</li>
</ul>
<h3 id="创建线程的方式"><a href="#创建线程的方式" class="headerlink" title="创建线程的方式"></a>创建线程的方式</h3><p><strong>继承Thread类：</strong></p>
<p><strong>实现Runnable接口：</strong></p>
<p><strong>基于Callable和Future接口：</strong></p>
<p><strong>使用线程池：</strong></p>
<h3 id="线程的几种状态"><a href="#线程的几种状态" class="headerlink" title="线程的几种状态"></a>线程的几种状态</h3><blockquote>
<p>新增、就绪、运行、阻塞、终止</p>
</blockquote>
<img src="/imgs/multithreading/image-20201204194410261.png" alt="image-20201204194410261" style="zoom:67%;" /> 

<h3 id="线程执行机制"><a href="#线程执行机制" class="headerlink" title="线程执行机制"></a>线程执行机制</h3><blockquote>
<p>JVM中一个应用可以有多个线程并行执行，线程被一对一映射为服务所在操作系统线程，调度在可用的CPU上执行，启动时会创建一个操作系统线程；当线程终止时，这个操作系统线程也会被回收。</p>
</blockquote>
<img src="/imgs/multithreading/image-20201204194643541.png" alt="image-20201204194643541" style="zoom:67%;" /> 

<h3 id="线程运行内存模型"><a href="#线程运行内存模型" class="headerlink" title="线程运行内存模型"></a>线程运行内存模型</h3><blockquote>
<p>Java虚拟机启动运行时，会创建多个线程，数据区中有的模块是线程共享的，有的是线程私有的</p>
<ul>
<li>线程共享的有：堆（Heap）、方法区（元空间）</li>
<li>线程私有的是：程序计数器、虚拟机栈、本地方法栈</li>
</ul>
<p>单个CPU在特定时刻只能执行一个线程，所以多线程通过几块空间的使用，然后不断的争抢CPU的执行时间段。</p>
</blockquote>
<img src="/imgs/multithreading/image-20201204194932940.png" alt="image-20201204194932940" style="zoom:67%;" /> 

<h3 id="其他线程概念"><a href="#其他线程概念" class="headerlink" title="其他线程概念"></a>其他线程概念</h3><ol>
<li><strong>线程优先级:</strong> 线程调度器倾向执行线程优先级高的线程，线程优先级高说明获取CPU资源的概率高，或者获取的执行时间分片多，即被执行的概率高，但优先级低的不代表一定最后执行。</li>
<li><strong>守护线程：</strong> 守护线程是支持辅助型线程，主要在程序中起到调度和支持性作用，当JVM中非守护线程全部结束，守护线程也就会结束。如JVM中的<code>GC</code>线程就是一个守护线程。</li>
<li><strong>线程加入：</strong> 线程A中，执行线程B的加入方法，那么A线程就会等待线程B执行完毕再返回继续执行。可使用<code>Thread.join()</code>加入一个线程。</li>
<li><strong>本地线程：</strong> <code>ThreadLocal</code>也叫做线程本地变量，是变量在每个线程中创建的副本变量，每个线程可以访问自己内部的副本变量，线程之间不相互影响。 </li>
</ol>
<h2 id="多线程安全"><a href="#多线程安全" class="headerlink" title="多线程安全"></a>多线程安全</h2><h3 id="同步控制"><a href="#同步控制" class="headerlink" title="同步控制"></a>同步控制</h3><h3 id="加锁机制"><a href="#加锁机制" class="headerlink" title="加锁机制"></a>加锁机制</h3><h1 id="多线程交替打印ABCDEABCDEABCDE的实现方法"><a href="#多线程交替打印ABCDEABCDEABCDE的实现方法" class="headerlink" title="多线程交替打印ABCDEABCDEABCDE的实现方法"></a>多线程交替打印<code>ABCDEABCDEABCDE</code>的实现方法</h1><h2 id="Synchronized同步方法"><a href="#Synchronized同步方法" class="headerlink" title="Synchronized同步方法"></a>Synchronized同步方法</h2><h2 id="ReentrantLock同步方法"><a href="#ReentrantLock同步方法" class="headerlink" title="ReentrantLock同步方法"></a><code>ReentrantLock</code>同步方法</h2><h2 id="Lock-Condition方式"><a href="#Lock-Condition方式" class="headerlink" title="Lock+Condition方式"></a>Lock+Condition方式</h2><h2 id="Semaphore信号量方式"><a href="#Semaphore信号量方式" class="headerlink" title="Semaphore信号量方式"></a>Semaphore信号量方式</h2>]]></content>
  </entry>
  <entry>
    <title>Hexo使用Next主题的优化策略</title>
    <url>/hexo-next-enhance/</url>
    <content><![CDATA[<p>Next主题进阶使用学习。</p>
<a id="more"></a> 



<h2 id="1-设置头像边框为圆形和旋转特效"><a href="#1-设置头像边框为圆形和旋转特效" class="headerlink" title="1.设置头像边框为圆形和旋转特效"></a>1.设置头像边框为圆形和旋转特效</h2><h3 id="自己设置："><a href="#自己设置：" class="headerlink" title="自己设置："></a>自己设置：</h3><p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210319204140943.png" alt="image-20210319204140943"></p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210319205220310.png" alt="image-20210319205220310"></p>
<p>系统自带：next已经内置了可以调节的功能，只需要将开关打开即可</p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210319205633875.png" alt="image-20210319205633875"></p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210319205653365.png" alt="image-20210319205653365"></p>
<h2 id="2-本地搜索"><a href="#2-本地搜索" class="headerlink" title="2.本地搜索"></a>2.本地搜索</h2><p>根目录下使用git命令：<code>npm install hexo-generator-searchdb --save</code> </p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210319210847331.png" alt="image-20210319210847331"></p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210319210928934.png" alt="image-20210319210928934"></p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210319211115663.png" alt="image-20210319211115663"></p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210319211136014.png" alt="image-20210319211136014"></p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210319211251125.png" alt="image-20210319211251125"></p>
<h2 id="3-博文置顶"><a href="#3-博文置顶" class="headerlink" title="3.博文置顶"></a>3.博文置顶</h2><p>使用文章的top属性，设置值越大，权重越大  top :100</p>
<h2 id="4-统计文章字数"><a href="#4-统计文章字数" class="headerlink" title="4.统计文章字数"></a>4.统计文章字数</h2><p>根目录下安装：<code>npm i --save hexo-wordcount</code></p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210319214610604.png" alt="image-20210319214610604"></p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210319214636660.png" alt="image-20210319214636660"></p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210319215657516.png" alt="image-20210319215657516"></p>
<p>Hexo 配置文件</p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210319223907209.png" alt="image-20210319223907209"></p>
<p>Next配置文件</p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210319223843925.png" alt="image-20210319223843925"></p>
<h2 id="文章结尾添加-“本文结束”-标记"><a href="#文章结尾添加-“本文结束”-标记" class="headerlink" title="文章结尾添加 “本文结束” 标记"></a>文章结尾添加 “本文结束” 标记</h2><p>新增文件，添加内容</p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210320105817230.png" alt="image-20210320105817230"> </p>
<p>将新文件关联到post文件中</p>
<p><img src="/imgs/Hexo-Next-Enhance/image-20210320091723707.png" alt="image-20210320091723707"></p>
<p>在主题配置文件中开启</p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210320092143130.png" alt="image-20210320092143130"></p>
<h2 id="修改访问路径"><a href="#修改访问路径" class="headerlink" title="修改访问路径"></a>修改访问路径</h2><blockquote>
<p>Hexo默认访问路径是以日期为路径，可以在显示时将日期隐藏</p>
</blockquote>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210320093135394.png" alt="image-20210320093135394"></p>
<h2 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h2><p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210320093854335.png" alt="image-20210320093854335"></p>
<h2 id="设置个人社交链接"><a href="#设置个人社交链接" class="headerlink" title="设置个人社交链接"></a>设置个人社交链接</h2><p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210320100414940.png" alt="image-20210320100414940"></p>
<h2 id="Hexo博客live2d看板娘"><a href="#Hexo博客live2d看板娘" class="headerlink" title="Hexo博客live2d看板娘"></a>Hexo博客<code>live2d</code>看板娘</h2><h3 id="1-安装hexo-helper-live2d插件"><a href="#1-安装hexo-helper-live2d插件" class="headerlink" title="1. 安装hexo-helper-live2d插件"></a>1. 安装<code>hexo-helper-live2d</code>插件</h3><p>在博客目录下打开git bash客户端，使用命令安装：<code>npm install --save hexo-helper-live2d </code></p>
<h3 id="2-下载需要的live2d模型"><a href="#2-下载需要的live2d模型" class="headerlink" title="2. 下载需要的live2d模型"></a>2. 下载需要的<code>live2d</code>模型</h3><p><a href="https://github.com/xiazeyu/live2d-widget-models">更多模型安装方法</a>  <a href="https://huaji8.top/post/live2d-plugin-2.0/">模型效果预览</a> </p>
<p><code>npm install --save live2d-widget-model-tororo</code></p>
<h3 id="3-将live2d添加到站点配置"><a href="#3-将live2d添加到站点配置" class="headerlink" title="3. 将live2d添加到站点配置"></a>3. 将<code>live2d</code>添加到站点配置</h3><blockquote>
<p>要在站点配置文件<code>_config.yml</code>中设置（注意区分站点配置和主题配置）</p>
</blockquote>
<pre class="line-numbers language-yml"><code class="language-yml">#Live2D动画
live2d:
  enable: true
  scriptFrom: local
  pluginRootPath: live2dw/
  pluginJsPath: lib/
  pluginModelPath: assets/
  tagMode: false
  debug: false
  model:
    use: live2d-widget-model-koharu 
  display:
    position: right #显示位置
    width: 150
    height: 300
  mobile:
    show: true    #移动端是否显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-最终效果展示"><a href="#4-最终效果展示" class="headerlink" title="4. 最终效果展示"></a>4. 最终效果展示</h3><p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210320113659962.png" alt="image-20210320113659962"></p>
<p>:see_no_evil:</p>
<h2 id="文章底部版权信息"><a href="#文章底部版权信息" class="headerlink" title="文章底部版权信息"></a>文章底部版权信息</h2><p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210320112122199.png" alt="image-20210320112122199"></p>
<p>要配合开启：</p>
<p><img src="/imgs/Hexo-Next-Enhance/image-20210320113209460.png" alt="image-20210320113209460"></p>
<h2 id="设置访问量"><a href="#设置访问量" class="headerlink" title="设置访问量"></a>设置访问量</h2><p>？？？</p>
<h2 id="左侧标题栏设置"><a href="#左侧标题栏设置" class="headerlink" title="左侧标题栏设置"></a>左侧标题栏设置</h2><h2 id="博客底部设置"><a href="#博客底部设置" class="headerlink" title="博客底部设置"></a>博客底部设置</h2><blockquote>
<p>显示时间、隐藏Hexo</p>
</blockquote>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210320105545766.png" alt="image-20210320105545766"></p>
<h2 id="首页隐藏指定文章"><a href="#首页隐藏指定文章" class="headerlink" title="首页隐藏指定文章"></a>首页隐藏指定文章</h2><p><a href="https://www.jianshu.com/p/79fe9fb9dfa0">https://www.jianshu.com/p/79fe9fb9dfa0</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/efbeddc5eb19">https://www.jianshu.com/p/efbeddc5eb19</a></p>
<p><a href="https://blog.csdn.net/zgcr654321/article/details/86751765">https://blog.csdn.net/zgcr654321/article/details/86751765</a></p>
<p><a href="https://io-oi.me/tech/hexo-next-optimization/">https://io-oi.me/tech/hexo-next-optimization/</a></p>
<p><a href="https://blog.csdn.net/qq_32767041/article/details/103284412">https://blog.csdn.net/qq_32767041/article/details/103284412</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>docker</title>
    <url>/docker/</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p><a href="https://blog.csdn.net/chaitoudaren/article/details/105467335">参考文章</a> </p>
<a id="more"></a>

<h2 id="1-Docker介绍"><a href="#1-Docker介绍" class="headerlink" title="1 Docker介绍"></a>1 Docker介绍</h2><p>Docker是当下使用最多的一种容器技术，docker对于专门的运维人员要求较高，开发人员也是要适当的学习下。</p>
<p>Docker中最重要的三个概念：仓库、镜像、容器。</p>
<ul>
<li>镜像（Image），即将jdk+项目jar包等文件以Docker的形式打包在一起就是镜像。类似系统镜像</li>
<li>容器（Container），将镜像实例化启动起来，就形成了容器。容器是一个轻量化的Linux系统，root用户权限、进程空间、用户空间和网络空间都有。<ul>
<li>比如需要部署一个redis，在linux系统中需要下载、安装、配置环境变量，而在docker中只需要将做好的redis镜像下载运行起来称为一个轻量级的linux，就直接拥有了redis环境。（类似win系统镜像中的自带软件）</li>
</ul>
</li>
<li>仓库（Repository）：仓库用于存放Docker镜像，类似GitHub存放代码的仓库；仓库可以供用户pull<ol>
<li>通过pull命令获取docker hub上的镜像，如mysql、redis等</li>
<li>将拉取的镜像在本地run起来，称为容器</li>
<li>如果需要自己构建一个镜像时，要在springboot项目中使用build命令构建</li>
</ol>
</li>
</ul>
<p><img src="https://gitee.com/shones/images/raw/master/blog/20200412212047658.png" alt="img"> </p>
<h2 id="2-Docker安装"><a href="#2-Docker安装" class="headerlink" title="2 Docker安装"></a>2 Docker安装</h2><p>参考文章：<a href="https://www.cnblogs.com/kingsonfu/p/11576797.html">https://www.cnblogs.com/kingsonfu/p/11576797.html</a> </p>
<p>拥有一台Linux系统，并连接到Linux系统。</p>
<h3 id="2-1-Ubuntu中安装docker"><a href="#2-1-Ubuntu中安装docker" class="headerlink" title="2.1 Ubuntu中安装docker"></a>2.1 Ubuntu中安装docker</h3><ol>
<li>切换至root用户下，否则权限不够： <code>sudo su</code> </li>
<li>更新apt-get，保证apt-get最新版本： <code>apt-get update</code> </li>
<li>安装docker： <code>apr-get install -y docker.io</code> </li>
<li>安装完成后查看docker版本： <code>docker version</code> </li>
<li>启动docker服务： <code>service docker start</code> （已经运行后再次执行也不会报错）</li>
<li>再次执行 <code>docker version</code> 可以查看是否启动成功<ul>
<li>如果有Clinet和Service说明启动成功了  </li>
</ul>
</li>
</ol>
<h3 id="2-2-CentOS中安装docker"><a href="#2-2-CentOS中安装docker" class="headerlink" title="2.2 CentOS中安装docker"></a>2.2 CentOS中安装docker</h3><ul>
<li><p>CentOS7安装docker要求系统为64位，内核版本为3.10以上，查看内核版本： <code>uname -r</code> </p>
</li>
<li><p>如果存在旧版本docker，则先卸载后重新安装（使用卸载成功）</p>
<pre class="line-numbers language-linux"><code class="language-linux"># 1、查看安装过的docker：
yum list installed | grep docker
docker.x86_64                      2:1.13.1-74.git6e3bb8e.el7.centos
docker-client.x86_64               2:1.13.1-74.git6e3bb8e.el7.centos
docker-common.x86_64               2:1.13.1-74.git6e3bb8e.el7.centos
# 2、卸载docker：（删除安装包命令：yum remove docker，功能类似） 
sudo yum remove -y docker-ce.x86_64 docker-client.x86_64 docker-common.x86_64
# 3、删除容器镜像：
sudo rm -rf /var/lib/docker
# 4、 再次查看安装过的docker，显示不存在
# 5、 重新安装docker
sudo yum install docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用docker仓库进行安装（虚拟机安装成功）</p>
<ol>
<li>安装依赖包： <code>sudo yum install -y yum-utils device-mapper-persistent-data lvm2 </code> </li>
<li>配置镜像源<ul>
<li>官方地址（慢）：<code>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code> </li>
<li>阿里云镜像：<code>sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo </code> </li>
<li>清华大学源：<code>sudo yum-config-manager --add-repo https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/centos/docker-ce.repo</code> </li>
</ul>
</li>
<li>安装docker-ce： <code>sudo yum install docker-ce</code>  </li>
<li>启动docker服务：<code>sudo systemctl start docker</code>  开机自启：<code>sudo systemctl enable docker</code>  <img src="https://gitee.com/shones/images/raw/master/blog/image-20210605173038139.png" alt="image-20210605173038139"> </li>
<li>查看docker服务运行状态：<code>sudo systemctl status docker</code>  </li>
<li>使用hello-world镜像命令验证docker是否可用：<code>docker run hello-world</code> （如果不存在该镜像会自动从远程仓库拉取并运行） <img src="https://gitee.com/shones/images/raw/master/blog/image-20210605172909117.png" alt="image-20210605172909117">  </li>
</ol>
</li>
<li><p>用yum源安装docker（同上一种安装方式）</p>
<ol>
<li>查看是否存在已安装的docker列表： <code>yum list installed | grep docker</code> </li>
<li>使用yum命令安装docker： <code>yum -y install docker</code> （-y表示不询问安装）</li>
<li>安装完成后再次使用  <code>yum list installed | grep docker</code>  查看安装列表</li>
<li>使用命令启动docker服务： <code>systemctl start docker</code> </li>
<li>命令查看docker服务状态： <code>systemctl status docker</code> </li>
<li>如图所示表示docker服务安装并启动成功：<img src="https://gitee.com/shones/images/raw/master/blog/761230-20190924101735498-1013963263.png" alt="img"></li>
</ol>
</li>
<li><p>使用官方安装脚本自动安装</p>
<ul>
<li>安装命令为：<code>curl -fsSL https://get.docker.com | bash -s docker --mirror aliyun</code> </li>
<li>或国内daocloud安装命令：<code>curl -sSL https://get.daocloud.io/docker | sh</code> </li>
</ul>
</li>
<li><p>离线安装docker</p>
<ol>
<li><p>通过 <code>wget https://download.docker.com/linux/static/stable/x86_64/docker-18.06.3-ce.tgz</code>  下载docker或 <a href="https://download.docker.com/linux/static/stable/x86_64/">点击下载</a> 至本地，再使用ftp工具上传服务器。</p>
</li>
<li><p>使用命令解压docker包：<code>tar -zxvf docker-18.06.3-ce.tgz</code> </p>
</li>
<li><p>将解压文件复制到 <code>/usr/bin/</code> 目录下： <code>cp docker/* /usr/bin/</code>  </p>
</li>
<li><p>在 <code>/etc/systemd/sysgtem/</code> 下新增docker.service文件，添加如下内容，将docker.service注册为服务</p>
<pre><code>[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
After=network-online.target firewalld.service
Wants=network-online.target

[Service]
Type=notify
# the default is not to use systemd for cgroups because the delegate issues still
# exists and systemd currently does not support the cgroup feature set required
# for containers run by docker  #设置域名访问权限
ExecStart=/usr/bin/dockerd --selinux-enabled=false --insecure-registry=127.0.0.1
ExecReload=/bin/kill -s HUP $MAINPID
# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
#TasksMax=infinity
TimeoutStartSec=0
# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes
# kill only the docker process, not all processes in the cgroup
KillMode=process
# restart the docker process if it exits prematurely
Restart=on-failure
StartLimitBurst=3
StartLimitInterval=60s

[Install]
WantedBy=multi-user.target</code></pre>
</li>
<li><p>修改docker.service文件权限：<code>chmod +x /etc/system/docker.service</code> 并进行服务的重载<code>systemctl daemon-reload</code>  </p>
</li>
<li><p>命令启动docker服务： <code>systemctl start docker</code> </p>
</li>
<li><p>（可选）设置docker服务为开机自启：<code>systemctl enable docker.service</code> </p>
</li>
<li><p>查看docker启动状态： <code>systemctl status docker</code>  <img src="https://gitee.com/shones/images/raw/master/blog/761230-20190924100503875-876834976.png" alt="img"> </p>
</li>
</ol>
</li>
</ul>
<h2 id="3-Docker使用"><a href="#3-Docker使用" class="headerlink" title="3 Docker使用"></a>3 Docker使用</h2><h3 id="3-1-第一个Docker镜像"><a href="#3-1-第一个Docker镜像" class="headerlink" title="3.1 第一个Docker镜像"></a>3.1 第一个Docker镜像</h3><ol>
<li>使用命令查看docker本地镜像信息：<code>docker images</code> </li>
<li>使用命令从远程仓库拉取指定镜像到本地： <code>docker pull hello-world</code> </li>
<li>使用run命令执行一个镜像： <code>docker run hello-world</code> </li>
<li>配置仓库拉取镜像时的加速器（docker hub是外网，拉取镜像时可能会网络超时，配置阿里云加速器）</li>
<li><a href="https://cr.console.aliyun.com/">登录阿里云</a>  ，进行加速器的配置 <img src="https://gitee.com/shones/images/raw/master/blog/20200412131208246.png" alt="配置加速器"></li>
<li>使用命令配置镜像加速器  <img src="https://gitee.com/shones/images/raw/master/blog/image-20210607123938501.png" alt="image-20210607123938501"> <ul>
<li>命令行换行输入使用：<code>\+enter</code></li>
<li>&lt;&lt;-EOF之后回车会自动换行，直到最后EOF输入后执行所有语句</li>
</ul>
</li>
<li>重新加载配置：<code>sudo systemctl daemon-reload</code> </li>
<li>重新启动docker服务：<code>sudo systemctl restart docker</code> </li>
<li>查看当前运行的容器信息：<code>docker ps</code> ，查看所有容器信息：<code>docker ps -a</code> </li>
<li>docker中镜像运行方式<ol>
<li>前台运行：<code>docker run nginx</code> ，显示当前运行状态，无法进行其他操作，使用ctrl+C停止</li>
<li>后台运行：<code>docker run -d nginx</code> ，-d即 –detach ，执行后返回容器id，使用ps查看当前运行的容器</li>
</ol>
</li>
<li>使用命令结束容器运行：<code>docker stop id</code>  （id一般使用前两位即可） </li>
</ol>
<h3 id="3-2-Nginx镜像"><a href="#3-2-Nginx镜像" class="headerlink" title="3.2 Nginx镜像"></a>3.2 Nginx镜像</h3><ol>
<li>拉取nginx镜像</li>
<li>后台运行nginx并映射主机端口： <code>docker run -d -p 8080:80 nginx</code> </li>
<li>访问主机地址:端口，显示nginx主页：<img src="https://gitee.com/shones/images/raw/master/blog/image-20210605203533170.png" alt="image-20210605203533170">  </li>
</ol>
<h3 id="3-3-容器化MySQL"><a href="#3-3-容器化MySQL" class="headerlink" title="3.3 容器化MySQL"></a>3.3 容器化MySQL</h3><p>可以在 <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/images">阿里云镜像中心</a> 搜索相关的镜像，会跳转到docker官网镜像处。</p>
<p>MySQL镜像使用步骤：</p>
<ol>
<li>使用命令查询mysql镜像信息：<code>docker search mysql</code> </li>
<li>从远程仓库拉取mysql镜像，<code>docker pull mysql</code></li>
<li>通过docker run 运行镜像<ul>
<li>-d进行后台运行</li>
<li>-p指定mysql镜像映射的主机端口</li>
<li>-e后跟mysql的参数，来连接查询数据库的名称和连接密钥</li>
</ul>
</li>
<li>如命令：<code>docker run -d -p 3306:3306 -e MYSQL—_ROOT_PASSWORD=root -e MYSQL_DATABASE=datebase mysql:latest</code>  <ul>
<li>属性名称必须要大写，否则无效</li>
<li><strong>-e MYSQL_ROOT_PASSWORD=root</strong>：设置 MySQL 服务 root 用户的密码为root</li>
<li><code>-e MYSQL_DATABASE=datebase</code> ，创建一个名为databse的数据库</li>
</ul>
</li>
<li>运行成功后，可以进入到mysql镜像中并查看mysql信息<ol>
<li>使用<code>docker ps</code> 查看当前执行的镜像的ID，</li>
<li>使用命令进入到docker镜像中：<code>docker exec -it 镜像ID bash</code> ，进入后命令行前缀用户就变成了容器ID。</li>
<li>进入容器中，就相当于进入了一个轻量级Linux，命令是相同的</li>
<li>进入mysql镜像后，使用命令连接mysql：<code>mysql --user=root --password</code> 或<code>mysql -h localhost -u root -p</code>  然后输入密码登录</li>
</ol>
</li>
</ol>
<p><strong>错误：</strong>服务器上通过docker命令运行和访问正常，但是使用navicate远程连接mysql时报错如下：<img src="https://gitee.com/shones/images/raw/master/blog/image-20210605210755813.png" alt="image-20210605210755813"></p>
<ul>
<li><p> 首先通过mysql镜像的ID进入到镜像中，并连接mysql  <code>mysql -u root -p</code>  输入密码</p>
</li>
<li><p>开启远程访问权限</p>
<ul>
<li>查看数据库信息<code>show databases;</code> </li>
<li>切换使用mysql数据库：<code>use mysql;</code></li>
<li>查询user表权限信息：<code>select host,user from user</code> </li>
<li> <code>ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;root&#39;;</code>  </li>
<li> 刷新操作：<code>flush privileges;</code> </li>
<li>然后可以远程使用navicate连接了。 </li>
<li>原因：镜像中root用户已经有了远程连接的权限，但是模式不一样导致无法连接，因此要将root用户的密码改成 mysql_native_password 模式即可。</li>
</ul>
<p><img src="https://gitee.com/shones/images/raw/master/blog/997646-20200117102022439-1012036839.png" alt="img"> </p>
</li>
</ul>
<p><strong>问题：</strong> 每次运行mysql时使用命令创建数据库，当服务stop之后，数据库就没了，下次运行要重新创建？</p>
<ul>
<li>如果每次都重新run运行mysql镜像，那么每次启动后服务的ID是不同的，就是不同的服务，则数据库是一个原始的数据库</li>
<li>而使用命令 <code>docker ps -a</code> 可以查看所有的服务，找到之前服务的ID，直接 <code>docker start ID</code> 可以运行已经存在的服务，且配置是一样的。<img src="https://gitee.com/shones/images/raw/master/blog/image-20210606135102552.png" alt="image-20210606135102552"> </li>
</ul>
<h3 id="3-4-Docker安装Redis"><a href="#3-4-Docker安装Redis" class="headerlink" title="3.4 Docker安装Redis"></a>3.4 Docker安装Redis</h3><h2 id="4-Docker中网络设置"><a href="#4-Docker中网络设置" class="headerlink" title="4 Docker中网络设置"></a>4 Docker中网络设置</h2><p>docker容器是一个小的linux，也就是一个虚拟机。容器想要跟外部进行交互，就只能先通过CentOS服务器主机的网卡，然后再与外界交互。docker容器与外部主机网络通讯的方式有三种：</p>
<ul>
<li>桥接（Bridge），最常用，将主机上的端口映射到docker容器的端口上，如8080:8081既是将主机上的8080端口映射到docker容器的8081端口<ul>
<li>桥接模式使用 <code>-P</code>  或<code>-p</code> 参数指定端口映射方式，如：<code>-p 主机端口:容器端口</code>  <code>-P</code> 则是使用随机的主机端口来映射docker端口。</li>
<li>如命令 <code>docker run -d -p 8080:80 nginx</code> ，即后台执行nginx，使用主机8080端口映射docker中80端口。</li>
<li><code>docker run -d -P nginx</code> ，即后台执行nginx，并使用主机随机端口来映射nginx对应的80端口</li>
<li>映射并运行成功后，访问主机地址:主机端口就可以访问docker容器中运行的服务</li>
</ul>
</li>
<li>共享（Host），主机与docker容器共享同一个端口</li>
<li>无网络（None），docker容器中没有网络，外界无法访问</li>
</ul>
<h2 id="5-Docker常用命令"><a href="#5-Docker常用命令" class="headerlink" title="5 Docker常用命令"></a>5 Docker常用命令</h2><ul>
<li>重启docker：<code>systemctl restart docker</code> </li>
<li>关闭docker：<code>systemctl stop docker</code> </li>
</ul>
<h3 id="5-1-镜像操作"><a href="#5-1-镜像操作" class="headerlink" title="5.1 镜像操作"></a>5.1 镜像操作</h3><blockquote>
<p>镜像即远程仓库中拉取的系统镜像</p>
</blockquote>
<ul>
<li>搜索查询镜像：<code>docker search mysql</code> </li>
<li>下载拉取镜像（最新）：<code>docker pull mysql:latest</code> </li>
<li>查看、删除本地镜像<ul>
<li>查看本地镜像：<code>docker images</code> </li>
<li>删除本地镜像：<code>docker rmi &lt;image id&gt;</code></li>
<li>删除全部镜像：<code>docker rmi $(docker images -q)</code></li>
<li>如果镜像因为关联而无法删除，可以使用-f参数强制删除：<code>docker rmi -f $(docker images -q)</code></li>
</ul>
</li>
</ul>
<h3 id="5-2-容器操作"><a href="#5-2-容器操作" class="headerlink" title="5.2 容器操作"></a>5.2 容器操作</h3><blockquote>
<p>容器是将拉取的镜像执行后生成的服务</p>
</blockquote>
<ul>
<li>运行指定容器服务：<code>docker start &lt;容器名/ID&gt;</code> ，如 <code>docker run mysql</code> <ul>
<li>后台运行容器服务：<code>docker run -d mysql</code></li>
<li>后台运行并端口映射：<code>docker run -d -p 3306:3306 mysql</code> </li>
<li>映射 <code>120.0.0.1:3306:3306</code> 不指定主机端口时映射到随机端口；主机地址默认为0.0.0.0</li>
<li>重启指定容器：<code>docker restart &lt;容器名/ID&gt;</code>  </li>
</ul>
</li>
<li>查看进程（正在运行的容器）：<code>docker ps</code> <ul>
<li>查看所有容器，包括已经停止的：<code>docker ps -a</code>  </li>
</ul>
</li>
<li>停止、杀死、删除指定容器<ul>
<li>停止指定容器：<code>docker stop &lt;容器名/ID&gt;</code> <ul>
<li>停止所有容器：<code>docker stop $(docker ps -a -q)</code></li>
</ul>
</li>
<li>杀死指定容器：<code>docker kill &lt;容器名/ID&gt;</code>   </li>
<li>删除容器：<code>docker rm &lt;容器名/ID&gt;</code> <ul>
<li>删除所有容器：<code>docker rm $(docker ps -a -q)</code> </li>
</ul>
</li>
<li>关闭docker中的mysql容器服务：<code>docker stop mysqlserver/ID </code> </li>
<li>重启docker中的mysql服务：<code>docker restart ID</code> </li>
</ul>
</li>
<li>查看容器日志：<code>docker logs -f &lt;容器名/ID&gt;</code> <ul>
<li>查看docker中指定容器的前10条日志信息：<code>docker logs -f --tail 10 ID</code>  </li>
</ul>
</li>
<li>进入到docker镜像<ul>
<li><code>sudo docker attach &lt;image id&gt;</code>，该命令在多端使用时会同步阻塞，不太适合生成环境</li>
<li>可以安装ssh Server后使用ssh连接进入，但是没有必要</li>
<li>安装nsenter后使用命令，使用比较繁琐</li>
<li>docker 1.3.x之后提供了exec命令进入容器，<code>sudo docker exec -it &lt;image id&gt; /bin/bash</code> </li>
</ul>
</li>
</ul>
<h2 id="6-制作Docker镜像"><a href="#6-制作Docker镜像" class="headerlink" title="6 制作Docker镜像"></a>6 制作Docker镜像</h2><p>将自己的springboot项目制作成为镜像，需要：</p>
<ol>
<li><p>将项目打为jar包</p>
</li>
<li><p>服务器获取项目的jar包（可上传至git上，然后使用get clone来远程获取）</p>
<ul>
<li><code>git clone https://gitee.com/chaitou/hello-springboot</code> </li>
<li>前提是服务器linux中已经安装了git</li>
</ul>
</li>
<li><p>进入到项目jar包中，并在同级目录下编写dockerfile文件</p>
<ul>
<li><p><code>cd hello-springboot</code> </p>
</li>
<li><p><code>vim Dockerfile</code> </p>
<ul>
<li><pre class="line-numbers language-dockerfile"><code class="language-dockerfile"># 依赖的基础镜像
from java:8
# 创建者
MAINTAINER bugpool xxx@163.com
# 将当前目录下的jar复制到容器/目录下
COPY hello-springboot.jar /hello-springboot.jar
# 指定启动时运行java -jar 命令
ENTRYPOINT ["java", "-jar","/hello-springboot.jar"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ul>
</li>
<li><p>拉取java镜像以满足项目运行环境</p>
<ul>
<li><code>docker pull java:8</code> </li>
</ul>
</li>
<li><p>使用 docker build来构建镜像，将springboot构建为本地镜像</p>
<ul>
<li><code>docker build -t hello-springboot:1.0 .</code> </li>
<li>-t指明了镜像名和版本号；点号代表当前目录</li>
</ul>
</li>
<li><p>启动构建的镜像，并使用-p来映射主机端口</p>
<ul>
<li><code>docker run -p 80:8080 hello-springboot:1.0</code> </li>
</ul>
</li>
<li><p>可以通过主机地址:80端口+项目接口地址/hello来访问</p>
</li>
</ol>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
  </entry>
  <entry>
    <title>解决GitHub访问慢的问题</title>
    <url>/github-request-problem/</url>
    <content><![CDATA[<blockquote>
<p>经常在github上找一些好玩的学习项目，但是经常出现github页面打开速度很慢甚至无法打开的情况，往往导致计划被打乱，瞬间不想学习了。今天就来总结一下解决github访问慢的方法。</p>
</blockquote>
<p>GitHub访问慢或者无法访问一般是由以下问题引起的：</p>
<ol>
<li>本地网络访问慢，科学上网速度很快</li>
<li>本地网络无法访问（响应时间过长导致无法访问）</li>
<li>由于github的加速分发CDN域名assets-cdn.github.com遭到DNS污染，无法访问</li>
</ol>
<h2 id="1-修改本地hosts映射"><a href="#1-修改本地hosts映射" class="headerlink" title="1. 修改本地hosts映射"></a>1. 修改本地hosts映射</h2><blockquote>
<p>域名解析直接指向GitHub的IP地址，以此来绕过DNS解析</p>
</blockquote>
<h3 id="1-1-查看最新GitHub-的最新ip地址"><a href="#1-1-查看最新GitHub-的最新ip地址" class="headerlink" title="1.1 查看最新GitHub 的最新ip地址"></a>1.1 查看最新GitHub 的最新ip地址</h3><p>在 <a href="www.ipaddress.com">ip地址查询</a> 网站中查询GitHub相关的网站对应的最新IP地址</p>
<ul>
<li>github.com</li>
<li>github.global.ssl.fastly.net</li>
<li>assets-cdn.github.com</li>
<li>codeload.github.com</li>
</ul>
<p>在当前网站中查询指定网站ip地址还可以使用另外方法</p>
<p>①直接将网站作为参数进行请求，省略点击查询的步骤：</p>
<ul>
<li><a href="https://websites.ipaddress.com/github.global.ssl.fastly.net">https://websites.ipaddress.com/github.global.ssl.fastly.net</a></li>
<li><a href="https://websites.ipaddress.com/github.com">https://websites.ipaddress.com/github.com</a></li>
<li><a href="https://websites.ipaddress.com/assets-cdn.github.com">https://websites.ipaddress.com/assets-cdn.github.com</a></li>
<li><a href="https://websites.ipaddress.com/codeload.github.com">https://websites.ipaddress.com/codeload.github.com</a></li>
</ul>
<p>②将ip查询网站拼接在之后进行查询（后边也可加#ipinfo，没影响）</p>
<ul>
<li><a href="http://github.global.ssl.fastly.net.ipaddress.com/">http://github.global.ssl.fastly.net.ipaddress.com/</a></li>
<li><a href="https://github.com.ipaddress.com/">https://github.com.ipaddress.com/</a></li>
<li><a href="https://assets-cdn.github.com.ipaddress.com/">https://assets-cdn.github.com.ipaddress.com/</a></li>
<li><a href="https://codeload.github.com.ipaddress.com/">https://codeload.github.com.ipaddress.com/</a></li>
</ul>
<h3 id="1-2-本地hosts文件映射ip地址"><a href="#1-2-本地hosts文件映射ip地址" class="headerlink" title="1.2 本地hosts文件映射ip地址"></a>1.2 本地hosts文件映射ip地址</h3><p>找到对应的IP地址后，将IP地址与网站地址进行对应，并将对应关系写入本地hosts文件中。</p>
<p>在windows系统中的<code>c:/Windows/System32/drivers/etc</code> 下找到hosts文件，编辑打开，将四个网站的IP地址和网站地址对应写入进入，作为DNS的映射。</p>
<p>hosts文件直接编辑修改时可能没有权限，可以通过以下方法完成修改：</p>
<ol>
<li>修改当前文件权限，右键hosts文件 -&gt; 属性 -&gt; 安全 -&gt; 编辑 -&gt; Users -&gt; Users的权限后加入写权限</li>
<li>将当前文件复制到别的盘中，修改文件后复制回来覆盖原来文件</li>
</ol>
<pre class="line-numbers language-hosts"><code class="language-hosts">#github dns映射 格式如：    [ip]: [domainName]
199.232.69.194 github.global.ssl.Fastly.net
140.82.114.4 GitHub.com
185.199.108.153 assets-cdn.Github.com
140.82.114.9 codeload.Github.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="1-3-刷新DNS缓存来访问新的映射"><a href="#1-3-刷新DNS缓存来访问新的映射" class="headerlink" title="1.3 刷新DNS缓存来访问新的映射"></a>1.3 刷新DNS缓存来访问新的映射</h3><p>hosts文件内容更新成功后，还需要刷新windows系统的DNS才可以生效。</p>
<p>使用 win+R ，打开cmd命令行，输入 <code>ipconfig/flushdns</code> 刷新DNS缓存即可。</p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20211016150711634.png" alt="image-20211016150711634"> </p>
<p>刷新完成后，再次打开github网站时速度会明显提升，需要注意的是以上github网站的ip经常发生变化，如果访问再次变慢可以重新更新映射信息。</p>
<h2 id="2-一键更新"><a href="#2-一键更新" class="headerlink" title="2. 一键更新"></a>2. 一键更新</h2><p>手动更新本地hosts文件的方式比较繁琐，我们可以编写程序来代替手动操作，实现需要时hosts文件内容的一键更新。</p>
<p>推荐一个github开源项目：<a href="https://github.com/isevenluo/github-hosts">更新hosts</a> ，作者会每日提供最新的相关ip地址映射信息，我们可以直接复制使用或者使用其中的程序进行一键更新操作。</p>
<p>作为一个coder，我们也可以自己去实现一个脚本程序。</p>
<h2 id="3-Chrome插件"><a href="#3-Chrome插件" class="headerlink" title="3. Chrome插件"></a>3. Chrome插件</h2><p>chrome插件如github加速等，可以实现在访问和下载项目是使用镜像加速，提升访问速度。</p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20211016153443393.png" alt="image-20211016153443393"> </p>
<p>如果无法访问chrome下载插件，推荐一个好用的chrome插件下载网站：<a href="https://www.extfans.com/">Extfans</a>  ，下载后使用开发者模式安装插件即可使用。</p>
<h2 id="4-镜像网站"><a href="#4-镜像网站" class="headerlink" title="4. 镜像网站"></a>4. 镜像网站</h2><p>github访问速度慢，我们还可以使用镜像网站来代替github</p>
<ul>
<li><a href="https://github.com.cnpmjs.org/">https://github.com.cnpmjs.org</a></li>
<li><a href="https://hub.fastgit.org/">https://hub.fastgit.org</a></li>
</ul>
<p>以上两个网站作为镜像网站，基本包含了github上已有的项目信息，并且可以查看和下载相关项目，速度还不错，可以作为备用网站使用。</p>
]]></content>
      <categories>
        <category>GitHub</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo博客中增加导航页面</title>
    <url>/hexo-navigation/</url>
    <content><![CDATA[<p>Hexo中使用matery主题创建导航页面</p>
<a id="more"></a>



<h1 id="Hexo博客中增加导航页面"><a href="#Hexo博客中增加导航页面" class="headerlink" title="Hexo博客中增加导航页面"></a>Hexo博客中增加导航页面</h1><h2 id="1-切换博客主题"><a href="#1-切换博客主题" class="headerlink" title="1. 切换博客主题"></a>1. 切换博客主题</h2><p>在学习的过程中，发现Hexo博客当前的<code>landscape</code>主题扩展性不够，没有找到添加导航页的方法；与之相比，<code>matery</code>主题在众多大佬的不断调教下，扩展了更丰富的功能。</p>
<h3 id="1-1-查看Hexo当前的主题"><a href="#1-1-查看Hexo当前的主题" class="headerlink" title="1.1 查看Hexo当前的主题"></a>1.1 查看Hexo当前的主题</h3><p>在本地设置好hexo博客项目后，进入博客项目下blog文件夹找到<code>_config.yml</code>文件，这就是hexo的全局配置文件，使用编辑器打开，搜索<code>theme</code>关键字，则可以看到项目的当前主题设置。</p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20211002_currentTheme.png" alt="image-20211002223930692"></p>
<h3 id="1-2-切换到matery主题"><a href="#1-2-切换到matery主题" class="headerlink" title="1.2 切换到matery主题"></a>1.2 切换到matery主题</h3><p>Hexo默认使用的主题是<code>landscape</code>，切换hexo主题到matery主题流程为：</p>
<ol>
<li><p>首先下载matery主题项目文件，<a href="https://github.com/blinkfox/hexo-theme-matery">项目地址</a> </p>
</li>
<li><p>将下载的hexo-theme-matery项目文件放到hexo博客项目的hexo/themes文件夹下</p>
</li>
<li><p>再次打开hexo的全局配置文件，<code>blog/_config.yml</code>文件</p>
</li>
<li><p>全局搜索theme找到主题配置选项，将当前主题设置为<code>hexo-theme-matery</code></p>
<ul>
<li><p>注意theme配置项的值要和本地主题文件夹的名字一致</p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20211002_changeTheme.png" alt="image-20211002225143210"></p>
</li>
</ul>
</li>
<li><p>设置完成后，使用<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>命令重新部署执行博客项目，并在本地<a href="http://localhost:4000/%E6%9F%A5%E7%9C%8B%E6%96%B0%E7%9A%84%E4%B8%BB%E9%A2%98%E6%98%AF%E5%90%A6%E7%94%9F%E6%95%88%E3%80%82">http://localhost:4000/查看新的主题是否生效。</a></p>
</li>
</ol>
<h2 id="2-添加导航页"><a href="#2-添加导航页" class="headerlink" title="2. 添加导航页"></a>2. 添加导航页</h2><p>现在博客的主题已经是matery了，就可以在此基础上添加一个导航页来收藏我们常用的网址了。</p>
<h3 id="2-1-新建导航页面"><a href="#2-1-新建导航页面" class="headerlink" title="2.1 新建导航页面"></a>2.1 新建导航页面</h3><p>首先需要在项目中增加一个导航页，进入到项目文件夹下，使用git终端执行命令：<code>hexo new page &#39;navigate&#39;</code> ，为博客创建一个导航页面。此时在blog/source文件夹下可以看到出现一个navigate文件夹，其中含有一个index.md文件。</p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20211002232707021.png" alt="image-20211002232707021"></p>
<h3 id="2-2-添加导航栏页面"><a href="#2-2-添加导航栏页面" class="headerlink" title="2.2 添加导航栏页面"></a>2.2 添加导航栏页面</h3><p>创建了导航相关的文件夹和文件，还需要在博客网站功能菜单栏中展示出来，而展示菜单是要在具体的主题中进行配置的。在<code>matery</code>主题对应的文件夹下找到配置文件：<code>\theme\hexo-theme-matery\_config.yml</code> ，搜索<code>menu</code>配置项，在最后添加一个导航栏页面。图标可以指定本地资源或者在<a href="https://fontawesome.com/v5.15/icons?d=gallery&p=2&q=navigate&m=free/">fontawesome</a>网站引用。 </p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210703181939759.png" alt="image-20210703181939759"></p>
<p>配置完成后，再此执行<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>命令重新部署本地博客项目，查看配置是否生效，如下图所示则已经生效。</p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210703174641583.png" alt="image-20210703174641583"></p>
<h3 id="2-3-添加对应中文名称"><a href="#2-3-添加对应中文名称" class="headerlink" title="2.3 添加对应中文名称"></a>2.3 添加对应中文名称</h3><p>在配置文件中的菜单中添加了navigate属性并部署后，页面中已经生效，但是显示的是英文navigate，因此需要将英文显示翻译为中文显示。</p>
<p>博客网站的语言设置分为Hexo项目全局语言设置和matery主题语言设置：</p>
<ol>
<li><p>hexo博客项目中的全局配置：打开blog/_config.yml文件搜索language，找到整个站点的语言设置，设置language值为<code>zh-CN</code>，默认为en。 </p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20211003162902420.png" alt="image-20211003162902420"> </p>
</li>
<li><p>matery主题配置：</p>
<ul>
<li><p>主题语言文件，进入<code>hexo-theme-matery/languages</code>文件夹，其中文件即是不同语言配置。其中default.yml是默认英文配置；zh-CN是对应简体中文配置；zh-HK是繁体中文配置。因为我们新增了navigate功能页，因此需要在相应的文件总添加navigate对应显示的英文、简体中文、繁体中文。</p>
<pre class="line-numbers language-yml"><code class="language-yml">#default.yml
navigate: Navigate

#zh-CN.yml
navigate: 导航

#zh-HK.yml
navigate: 導航<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>在<code>hexo-theme-matery/layout/_partial</code>文件夹下，找到<code>mobile-nav.ejs</code>文件和<code>navigation.ejs</code>文件，在其中找到菜单相关集合的配置，添加navigate和对应的中文名称。</p>
<pre class="line-numbers language-yml"><code class="language-yml"><%
var menuMap = new Map();
menuMap.set("Index", "首页");
menuMap.set("Tags", "标签");
menuMap.set("Categories", "分类");
menuMap.set("Archives", "归档");
menuMap.set("About", "关于");
menuMap.set("Contact", "留言板");
menuMap.set("Friends", "友情链接");
menuMap.set("Navigate", "导航");
%><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
<li><p>配置完成后，重新部署博客项目，可以预览当前功能栏已经显示为中文名称。</p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20210703181954296.png" alt="image-20210703181954296"></p>
</li>
</ol>
<h3 id="2-3-添加navigate-ejs配置页面信息"><a href="#2-3-添加navigate-ejs配置页面信息" class="headerlink" title="2.3 添加navigate.ejs配置页面信息"></a>2.3 添加navigate.ejs配置页面信息</h3><p>导航栏配置完成，接下来就是要在点击导航功能栏的时候显示我们自定义的导航页面。</p>
<p>在<code>\themes\matery\layout\</code> 文件夹中新建<code>navigate.ejs</code>文件，自定义的导航页的信息和样式都在该文件中设置。</p>
<ul>
<li>页面搜索框部分</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 搜索框 <span class="token operator">--</span><span class="token operator">></span>
<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"baidu baidu-2 large-screen"</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>form name<span class="token operator">=</span><span class="token string">"f"</span> action<span class="token operator">=</span><span class="token string">"https://www.baidu.com/"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">"Select-2"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"Select-box-2"</span> id<span class="token operator">=</span><span class="token string">"baidu"</span><span class="token operator">></span>
                <span class="token operator">&lt;</span>ul style<span class="token operator">=</span><span class="token string">"height: 46px;"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"this_s"</span><span class="token operator">></span>百 · 度<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
                    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"bing_s"</span><span class="token operator">></span>必 · 应<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
                    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"google_s"</span><span class="token operator">></span>谷 · 歌<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
                    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"baidu_s"</span><span class="token operator">></span>百 · 度<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
                    <span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"zhihu_s"</span><span class="token operator">></span>知 · 乎<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
                <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> 
            <span class="token operator">&lt;</span>input name<span class="token operator">=</span><span class="token string">"wd"</span> id<span class="token operator">=</span><span class="token string">"kw-2"</span> maxlength<span class="token operator">=</span><span class="token string">"100"</span> autocomplete<span class="token operator">=</span><span class="token string">"off"</span> type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"qingkong"</span> id<span class="token operator">=</span><span class="token string">"qingkong"</span> title<span class="token operator">=</span><span class="token string">"清 · 空"</span> style<span class="token operator">=</span><span class="token string">"display: none;"</span><span class="token operator">></span>x<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span> 
        <span class="token operator">&lt;</span>input value<span class="token operator">=</span><span class="token string">"搜 · 索"</span> id<span class="token operator">=</span><span class="token string">"su-2"</span> type<span class="token operator">=</span><span class="token string">"submit"</span><span class="token operator">></span> 
        <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"keylist"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>页面导航网址部分</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"row tags-posts "</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"col s12 m6 l4 friend-div"</span> data<span class="token operator">-</span>aos<span class="token operator">=</span><span class="token string">"zoom-in-up"</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"card"</span><span class="token operator">></span>
            <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"jj-list-tit"</span><span class="token operator">></span>精典 · 导航<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
                <span class="token operator">&lt;</span>ul <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"jj-list-con"</span><span class="token operator">></span>
                    <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://tophub.today/"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link-3"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>今日热榜<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
                    <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://search.chongbuluo.com/"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link-3"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>虫部落快搜<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
                    <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://ilxdh.com/"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link-3"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>龙轩导航<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
                    <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://adzhp.cn/"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link-3"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>爱达杂货铺<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
                    <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://fuliba123.net/"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link-3"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>福利吧导航<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
                    <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://cxy521.com/"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link-3"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>程序员导航<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
                    <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.6453.net/"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link-3"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>龙猫学术导航<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
                    <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"https://ac.scmor.com/"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link-3"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>谷歌镜像<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
                    <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.pansoso.com/"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"link-3"</span> target<span class="token operator">=</span><span class="token string">"_blank"</span><span class="token operator">></span>网盘搜索<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>
                   <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">...</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>搜索引擎配置部分</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*选择搜索引擎*/</span> 
<span class="token operator">&lt;</span>script<span class="token operator">></span> 
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.Select-box ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'auto'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'40px'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.Select-box-2 ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hover</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'auto'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span><span class="token string">'46px'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.Select-box li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> 
        <span class="token keyword">var</span> _tihs <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">var</span> _html <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_tihs <span class="token operator">==</span> <span class="token string">'baidu_s'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _tihs <span class="token operator">=</span> <span class="token string">'https://www.baidu.com/s'</span><span class="token punctuation">;</span> _name <span class="token operator">=</span> <span class="token string">'wd'</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_tihs <span class="token operator">==</span> <span class="token string">'zhihu_s'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _tihs <span class="token operator">=</span> <span class="token string">'https://www.zhihu.com/search'</span><span class="token punctuation">;</span> _name <span class="token operator">=</span> <span class="token string">'q'</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_tihs <span class="token operator">==</span> <span class="token string">'google_s'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _tihs <span class="token operator">=</span> <span class="token string">'https://www.google.com/search'</span><span class="token punctuation">;</span> _name <span class="token operator">=</span> <span class="token string">'q'</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_tihs <span class="token operator">==</span> <span class="token string">'bing_s'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _tihs <span class="token operator">=</span> <span class="token string">'https://www.bing.com/search'</span><span class="token punctuation">;</span> _name <span class="token operator">=</span> <span class="token string">'q'</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> 
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.baidu form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">,</span> _tihs<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.this_s'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>_html<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#kw'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> _name<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.Select-box ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'40px'</span><span class="token punctuation">)</span> 
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.Select-box-2 li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> 
        <span class="token keyword">var</span> _tihs <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'class'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">var</span> _html <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_tihs <span class="token operator">==</span> <span class="token string">'baidu_s'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _tihs <span class="token operator">=</span> <span class="token string">'https://www.baidu.com/s'</span><span class="token punctuation">;</span> _name <span class="token operator">=</span> <span class="token string">'wd'</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_tihs <span class="token operator">==</span> <span class="token string">'zhihu_s'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _tihs <span class="token operator">=</span> <span class="token string">'https://www.zhihu.com/search'</span><span class="token punctuation">;</span> _name <span class="token operator">=</span> <span class="token string">'q'</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_tihs <span class="token operator">==</span> <span class="token string">'google_s'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _tihs <span class="token operator">=</span> <span class="token string">'https://www.google.com/search'</span><span class="token punctuation">;</span> _name <span class="token operator">=</span> <span class="token string">'q'</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span>_tihs <span class="token operator">==</span> <span class="token string">'bing_s'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> _tihs <span class="token operator">=</span> <span class="token string">'https://www.bing.com/search'</span><span class="token punctuation">;</span> _name <span class="token operator">=</span> <span class="token string">'q'</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> 
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.baidu form'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'action'</span><span class="token punctuation">,</span> _tihs<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.this_s'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>_html<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'#kw-2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> _name<span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.Select-box-2 ul'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'height'</span><span class="token punctuation">,</span> <span class="token string">'48px'</span><span class="token punctuation">)</span> 
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>页面样式部分</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style<span class="token operator">></span>
    <span class="token operator">...</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>页面背景图片轮换</li>
</ul>
<pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>theme<span class="token punctuation">.</span>banner<span class="token punctuation">.</span>enable<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> 
    <span class="token operator">%</span><span class="token operator">></span> 
        <span class="token operator">&lt;</span>script<span class="token operator">></span> 
            Switch banner image every day<span class="token punctuation">.</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/'</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> 
    <span class="token operator">&lt;</span><span class="token operator">%</span> 
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">%</span><span class="token operator">></span>
        <span class="token operator">&lt;</span>script<span class="token operator">></span> 
              <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.bg-cover'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">'background-image'</span><span class="token punctuation">,</span> <span class="token string">'url(/medias/banner/0.jpg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> 
<span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-4-重新部署"><a href="#2-4-重新部署" class="headerlink" title="2.4 重新部署"></a>2.4 重新部署</h3><p>导航页配置完成后，在本地git终端中使用命令<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>重新部署本地hexo项目，部署完成后在本地<a href="http://localhost:4000/navigate/%E6%9F%A5%E7%9C%8B%E5%AF%BC%E8%88%AA%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C%E3%80%82">http://localhost:4000/navigate/查看导航页面效果。</a></p>
<p>导航页显示成功后，使用命令<code>hexo d</code>将本地修改部署到远程，并通过github pages页面进行访问查看导航页效果。</p>
<p><img src="https://gitee.com/shones/images/raw/master/blog/image-20211003220836889.png" alt="image-20211003220836889"> </p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>本意是想要在hexo博客中增加一个导航页面来管理常用网址，以免去浏览器中臃肿的标签，在网上查询并学习了文章方法，并作记录。</p>
<ol>
<li>当前导航功能针对hexo的matery主题，尝试在next主题中使用，由于主题文件不一样不可用。</li>
<li>导航页参考网络大佬的一些文章，仅做了一些搜索源、网址源的修改，后边有机会学习更加自定义的配置（如是否可以更改样式、更方便添加网址）。</li>
<li>继续深入学习其他主题是否也可以创建导航页呢？</li>
<li>参考文章：<a href="https://www.mobaijun.com/posts/2328089344.html#toc-heading-1">https://www.mobaijun.com/posts/2328089344.html#toc-heading-1</a> </li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Matery</tag>
      </tags>
  </entry>
  <entry>
    <title>CompletableFuture</title>
    <url>/completablefuture/</url>
    <content><![CDATA[<p>参考文档</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/344431341">CompletableFuture用法详解</a> </li>
</ul>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Executor</title>
    <url>/executor/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Executor、ExecutorService</title>
    <url>/executor-executorservice/</url>
    <content><![CDATA[<h2 id="Executor-介绍"><a href="#Executor-介绍" class="headerlink" title="Executor 介绍"></a>Executor 介绍</h2><p>Executor 是 java.util.concurrent 包中重要的接口，是用来执行提交线程任务的对象。</p>
<p>线程池是线程的集合，线程池中的单个线程是工作单元也是执行机制。</p>
<p>JDK 1.5 之后，为了将工作单元与执行机制分离，Executor 框架就出现了，Executor 框架实现了线程池的功能，是一个用于统一创建与运行的接口。</p>
<h3 id="Executor-源码"><a href="#Executor-源码" class="headerlink" title="Executor 源码"></a>Executor 源码</h3><p>Executor 是一个顶层接口，其源码中仅定义了 execute() 方法</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>其实现类中，最终要的就是 <strong>ExecutorService</strong> 接口了</li>
</ul>
<h2 id="Executor-框架结构"><a href="#Executor-框架结构" class="headerlink" title="Executor 框架结构"></a>Executor 框架结构</h2><p>Executor 框架由三大部分组成，包括任务对象、任务执行、以及任务执行结果。</p>
<ol>
<li>任务，即线程池的工作单元，包括被执行任务需要实现的接口，Runnable 或 Callable 接口</li>
<li>任务执行，即将任务分给执行机制，执行机制如 Executor 接口或 ExecutorService 接口（继承了 Executor ）</li>
<li>任务执行结果，线程的执行往往是异步的，对于异步计算结果，有 Future 或 FutureTask（实现了 Future ）</li>
</ol>
<h2 id="Executor-框架继承实现关系"><a href="#Executor-框架继承实现关系" class="headerlink" title="Executor 框架继承实现关系"></a>Executor 框架继承实现关系</h2><ul>
<li>FutureTask 类，实现了 RunnableFuture 接口，而 RunnableFuture 接口继承了 Future 接口和 Runnable 接口。</li>
<li>Callable 接口</li>
<li>Executor 接口作为顶层接口 ，<ul>
<li>ExecutorService 接口继承了 Executor 接口<ul>
<li>AbastractExecutorService 抽象类实现了 ExecutorService 接口<ul>
<li>ThreadPoolExecutor 类继承了 AbastractExecutorService 抽象类</li>
</ul>
</li>
<li>ScheduledExecutorService 接口继承了 ExecutorService 接口<ul>
<li>ScheduledThreadPoolExecutor 类实现了 ScheduledExecutorService 接口，同时又继承了 ThreadPoolExecutor 类</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Executor-框架成员"><a href="#Executor-框架成员" class="headerlink" title="Executor 框架成员"></a>Executor 框架成员</h2><p>Executor，顶层接口</p>
<p>Runnable/Callable 接口，任务接口</p>
<p>ThreadPoolExecutor，实现类</p>
<p>ScheduledThreadPoolExecutor，实现类</p>
<p>Executors，工厂类，其中提供了常见的配置线程池的方法，也可以使用 ThreadPoolExecutor 自行初始化线程池。但是因为 ThreadPoolExecutor  的参数众多且意义重大，为避免出错，才有了 Executors 工厂类。</p>
<p>Future / FutureTask，结果接口和实现类</p>
<h2 id="Executor-框架使用流程"><a href="#Executor-框架使用流程" class="headerlink" title="Executor 框架使用流程"></a>Executor 框架使用流程</h2><ol>
<li><p>使用 Runnable 或 Callable 接口创建线程任务对象</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">callableTest</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String <span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            String a <span class="token operator">=</span> <span class="token string">"return String"</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> a<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token string">"exception"</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>使用 Executor 的实现类 ThreadPoolExecutor  或 ScheduledThreadPoolExecutor 创建线程执行对象，也可以使用 Executors 工厂类获取。</p>
<ul>
<li>调用创建对象的 submit() 或 execute() 方法来将线程任务添加到线程中</li>
<li>execute() 方法接收参数并从线程池中选择线程进行执行，一般 Runnable 任务无返回值 </li>
<li>submit() 接收参数从线程池中选择线程执行后，提供一个返回值 Future 对象，Callable 类型对象会有返回值。</li>
<li>也可以通过 callable() 方法将 Runnable 传入实现线程结果返回</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java">ThreadPoolExecutor tpe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span>
                <span class="token number">100</span><span class="token punctuation">,</span> MILLISECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Future<span class="token operator">&lt;</span>String<span class="token operator">></span> future <span class="token operator">=</span> tpe<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">callableTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>对于有返回结果的，调用 Future 对象的 get() 方法获取返回结果，注意 get() 方法获取结果是阻塞的，即线程没有执行完则调用结果的线程会阻塞直到获取执行结果。</p>
</li>
</ol>
<h1 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h1><p>并发 API 引入了 <code>ExecutorService</code> 作为一个在程序中直接使用 Thread 的高层次的替换方案。</p>
<p>ExecutorService 作为接口，直接继承了 Executor 接口，并在其基础上，提供了终止线程池线程的 shutdown() 方法，并新增了可以生成 Future 结果对象的 submit() 方法。</p>
<p>Executors 必须显式的停止，否则它们将持续监听新的任务，即 Java 线程不停止，保持活跃等待。</p>
<p><code>ExecutorService</code> 接口则包含大量用于控制任务进度和管理服务终止的方法。我们可以使用此接口来提交要执行的任务，还可以使用此接口返回的 Future 实例控制任务的执行。</p>
<h2 id="ExecutorService-源码结构"><a href="#ExecutorService-源码结构" class="headerlink" title="ExecutorService 源码结构"></a>ExecutorService 源码结构</h2><p>ExecutorService 在 Executor 的基础上增加了执行停止、有返回结果的执行方法、以及有返回结果的批量执行方法。</p>
<h3 id="执行停止相关方法"><a href="#执行停止相关方法" class="headerlink" title="执行停止相关方法"></a>执行停止相关方法</h3><ul>
<li><code>void shutdown();</code>，停止任务的执行，如果当前有任务正在执行，则会等待任务执行完成后停止，先前已提交但是没有执行的任务不会开始执行，所有线程执行完当前任务后停止。</li>
<li><code>List&lt;Runnable&gt; shutdownNow();</code> ，该方法在 shutdown() 方法的基础上，会立即停止所有线程，即使有正在执行的任务也会停止，方法返回正在等待执行的任务列表。</li>
<li><code>boolean isShutdown();</code>，判断执行器是否停止</li>
<li><code>boolean isTerminated();</code>，判断是否在所有的任务都正常执行完成后关闭线程执行，如果没有执行  shutdown() 等方法，则线程永远不会停止。</li>
<li><code>boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException;</code>，该方法停止线程池时，会阻塞等待所有线程任务执行完成，或线程抛出异常、或线程被迫中断。</li>
</ul>
<h3 id="带返回结果的执行方法"><a href="#带返回结果的执行方法" class="headerlink" title="带返回结果的执行方法"></a>带返回结果的执行方法</h3><ul>
<li><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task);</code>，方法传入 Callable 任务对象，提供线程执行后，返回任务执行结果封装的 Future 对象，返回类型为 Callable 的泛型类型</li>
<li><code>&lt;T&gt; Future&lt;T&gt; submit(Runnable task, T result);</code>，增加了 指定返回结果类型的 result 参数</li>
<li><code>Future&lt;?&gt; submit(Runnable task);</code>，返回结果无指定类型</li>
</ul>
<h3 id="批量执行任务并返回结果"><a href="#批量执行任务并返回结果" class="headerlink" title="批量执行任务并返回结果"></a>批量执行任务并返回结果</h3><ul>
<li><p>传入 Callable 任务的集合，返回结果为所有任务的结果的列表</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>Future<span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> tasks<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>参数传入 Callable 任务的集合、超时时间和时间单位，在最大超时时间内执行任务，并返回所有任务结果列表</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> List<span class="token operator">&lt;</span>Future<span class="token operator">&lt;</span>T<span class="token operator">>></span> <span class="token function">invokeAll</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> tasks<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>参数传入 Callable 任务的集合，在其中任意一个任务执行得到结果后返回</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">invokeAny</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> tasks<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>参数传入 Callable 任务的集合、超时时间和单位，在最大超时时间内，返回任意一个任务执行得到结果后返回，如果都没有执行完则返回超时异常</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>T<span class="token operator">></span> T <span class="token function">invokeAny</span><span class="token punctuation">(</span>Collection<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>T<span class="token operator">>></span> tasks<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">,</span> TimeoutException<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
</ul>
<h2 id="ExecutorService-实现和继承关系"><a href="#ExecutorService-实现和继承关系" class="headerlink" title="ExecutorService 实现和继承关系"></a>ExecutorService 实现和继承关系</h2><p>ExecutorService 接口下，比较常见有的 AbstractExecutorService 抽象类和 ScheduledExecutorService 接口。</p>
<h2 id="ExecutorService-创建和使用"><a href="#ExecutorService-创建和使用" class="headerlink" title="ExecutorService 创建和使用"></a>ExecutorService 创建和使用</h2><p>ExecutorService 作为一个在程序中直接使用 Thread 的高层次的替换方案，可以通过 Executors 工厂类来创建 ExecutorService 对象使用。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建</span>
ExecutorService executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 执行</span>
Future<span class="token operator">&lt;</span>String<span class="token operator">></span> future <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
String threadName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 阻塞获取结果</span>
future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="Executor-和-ExecutorService-的使用区别"><a href="#Executor-和-ExecutorService-的使用区别" class="headerlink" title="Executor 和 ExecutorService 的使用区别"></a>Executor 和 ExecutorService 的使用区别</h2><p>Executor 中仅定义了一个 execute() 方法用来执行 Rnnable 类型的任务，如果可以满足要求则可以使用 Executor 类型接收对象；如果操作较多，则使用 ExecutorService 类型接收对象。</p>
<h2 id="ScheduledExecutorService"><a href="#ScheduledExecutorService" class="headerlink" title="ScheduledExecutorService"></a>ScheduledExecutorService</h2><p>ScheduledExecutorService 接口也是继承 ExecutorService 接口的，与 ExecutorService 接口不同的是，ScheduledExecutorService 可以设置任务在指定的延迟之后、或者以指定周期执行。</p>
<h3 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h3><p>ScheduledExecutorService 接口中仅定义了三种扩展方法，分别是 schedule、scheduleAtFixedRate、和 scheduleWithFixedDelay。</p>
<ul>
<li>schedule 方法用来在指定延迟之后执行任务，方法的任务参数可以是 Runnable 或 Callable</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">schedule</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">,</span>
                                       <span class="token keyword">long</span> delay<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token operator">&lt;</span>V<span class="token operator">></span> ScheduledFuture<span class="token operator">&lt;</span>V<span class="token operator">></span> <span class="token function">schedule</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>V<span class="token operator">></span> callable<span class="token punctuation">,</span>
                                           <span class="token keyword">long</span> delay<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>scheduleAtFixedRate 方法是在指定的延迟之后，使用固定周期进行执行任务，该周期是指两次任务的开始时间间隔。</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">,</span>
                                                  <span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span>
                                                  <span class="token keyword">long</span> period<span class="token punctuation">,</span>
                                                  TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>scheduleWithFixedDelay 方法也是是在指定的延迟之后，使用固定周期进行执行任务，与 scheduleAtFixedRate 不同的是，scheduleWithFixedDelay  方法的周期是指的上次任务执行完成后到下次任务开始时的时间间隔，即纯间隔时间。</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ScheduledFuture<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">scheduleWithFixedDelay</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">,</span>
                                                     <span class="token keyword">long</span> initialDelay<span class="token punctuation">,</span>
                                                     <span class="token keyword">long</span> delay<span class="token punctuation">,</span>
                                                     TimeUnit unit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>参考文档：<a href="https://www.twle.cn/c/yufei/javatm/javatm-basic-executorservice.html">一文秒懂 Java ExecutorService</a> </p>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Future</title>
    <url>/future/</url>
    <content><![CDATA[<p>参考文档</p>
<ul>
<li><a href="https://www.cnblogs.com/flydean/p/12680281.html">Java 中 Future 的使用</a> </li>
<li><a href="https://zhuanlan.zhihu.com/p/54459770">Java 的 Future 机制详解</a> </li>
</ul>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>FutureTask</title>
    <url>/futuretask/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Java 多线程并发摘要</title>
    <url>/java-duo-xian-cheng-bing-fa-zhai-yao/</url>
    <content><![CDATA[<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://www.twle.cn/c/yufei/javatm/javatm-basic-concurrency-interview.html">一文秒懂系列之 Java 并发编程面试题</a> </li>
</ul>
<h2 id="线程和执行器"><a href="#线程和执行器" class="headerlink" title="线程和执行器"></a>线程和执行器</h2><h2 id="Thread-和-Runnable"><a href="#Thread-和-Runnable" class="headerlink" title="Thread 和 Runnable"></a>Thread 和 Runnable</h2><p>Java 从 JDK1.0 开始执行线程，在开始一个新的线程之前，你必须指定由这个线程执行的代码，通常称为 task 。</p>
<p>Java 中创建新线程（定义线程的执行代码）可以通过继承 Thread 类或实现 Runnable 接口的方式进行，而实现 Runnable 中的 run 方法后，执行线程时仍需要执行  Thread  对象的 start() 方法调用。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// lambda 方式创建匿名函数（函数表达式）</span>
Runnable task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    String threadName <span class="token operator">=</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello "</span> <span class="token operator">+</span> threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><p>在使用 Thread 类创建线程时，方法单调，且比较容器出错，因此在 2004 年 Java5 发布的时候引入了并发 API。 这些 API 位于 <code>java.util.concurrent</code> 包下，包含很多处理并发编程的有用的类。</p>
<p>Java8 的时候又在此基础上提供了新的类和方法来处理并发。</p>
<p>详细内容可见：<a href="D:\Documents\MarkDown\Java\多线程\Executor、ExecutorService.md">Executor </a>  </p>
<h3 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h3><p><code>Executors</code> 类提供了便利的工厂方法来创建不同类型的 executor services 。</p>
<h3 id="Callable-和-Future"><a href="#Callable-和-Future" class="headerlink" title="Callable 和 Future"></a>Callable 和 Future</h3><p>除了 <code>Runnable</code>，Executor 还支持另一种类型的任务，即 <code>Callable</code>，Callables 也是类似于 Runnables 的函数接口，不同之处在于，Callable 在执行完成后会返回一个值。</p>
<p>Future 就是线程中用来接收 Callable  任务执行完成后返回结果的对象。</p>
<pre class="line-numbers language-java"><code class="language-java">Callable<span class="token operator">&lt;</span>Integer<span class="token operator">></span> task <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"task interrupted"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 执行并获取返回结果</span>
ExecutorService executor <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Future<span class="token operator">&lt;</span>Integer<span class="token operator">></span> future <span class="token operator">=</span> executor<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future done? "</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Integer result <span class="token operator">=</span> future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"future done? "</span> <span class="token operator">+</span> future<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"result: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>实现异步消费队列</title>
    <url>/java-shi-xian-yi-bu-xiao-fei-dui-lie/</url>
    <content><![CDATA[<p>参考文档：<a href="https://blog.csdn.net/u014373554/article/details/109473443">https://blog.csdn.net/u014373554/article/details/109473443</a> </p>
<h2 id="使用阻塞队列-线程池实现异步消费"><a href="#使用阻塞队列-线程池实现异步消费" class="headerlink" title="使用阻塞队列+线程池实现异步消费"></a>使用阻塞队列+线程池实现异步消费</h2><h3 id="1-定义任务队列"><a href="#1-定义任务队列" class="headerlink" title="1. 定义任务队列"></a>1. 定义任务队列</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 定义队列
 */</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> LinkedBlockingDeque<span class="token operator">&lt;</span>String<span class="token operator">></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-定义线程池（单例、单线程）"><a href="#2-定义线程池（单例、单线程）" class="headerlink" title="2. 定义线程池（单例、单线程）"></a>2. 定义线程池（单例、单线程）</h3><ul>
<li><p>线程池只可以有单个线程，这样才可以保证消费队列内容时是顺序的，多线程时会导致重复消费。</p>
</li>
<li><p>线程池需要使用常量存放，避免每次使用时创建新的线程池，而变成多个线程并发操作，也会导致重复消费。</p>
</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 消费者,单一线程， 进行处理业务逻辑
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ExecutorService EXECUTOR_SERVICE <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="3-存储任务和顺序消费逻辑"><a href="#3-存储任务和顺序消费逻辑" class="headerlink" title="3. 存储任务和顺序消费逻辑"></a>3. 存储任务和顺序消费逻辑</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * 模拟数据库存放数据，并保证不重复
 */</span>
<span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> strList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/**
 * 服务请求生成任务存放至队列，并调用线程消费队列
 */</span>
<span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/process"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>String equipmentNo<span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>equipmentNo<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"参数不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">remainingCapacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            deque<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>equipmentNo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"队列已经满了,请稍后重试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        EXECUTOR_SERVICE<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token comment" spellcheck="true">//开始处理请求队列中的请求,按照队列的FIFO的规则,先处理先放入到队列中的请求</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>deque <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> deque<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token comment" spellcheck="true">//处理请求</span>
                <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    String orderNo <span class="token operator">=</span> deque<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>strList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"处理订单号：&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        strList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>orderNo<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"处理订单号发生异常，异常信息：&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"处理发生异常，异常信息：&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/query"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"获取strList"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> strList<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>Executors.newSingleThreadExecutor() 线程池中只有一个线程，而线程中队列是无界队列，如果短时间生产大量任务，可能会导致内存溢出</li>
</ul>
<h3 id="使用-Jmeter-进行并发测试"><a href="#使用-Jmeter-进行并发测试" class="headerlink" title="使用 Jmeter 进行并发测试"></a>使用 Jmeter 进行并发测试</h3><p><a href="https://jmeter.apache.org/download_jmeter.cgi">官网下载地址</a> </p>
<p>下载 Binaries 文件，解压后运行 jmeter.bat 即可启动 jmeter 程序</p>
<ol>
<li>打开程序后，在当前测试项目下，添加线程组，并配置并发数量和启动时间</li>
<li>在当前线程组下，添加 HTTP 请求信息，可以配置请求信息（地址、参数等）</li>
<li>在当前测试项目下，添加测试报告，显示并发测试信息</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>Spring ApplicationEvent 事件</title>
    <url>/spring-applicationevent-shi-jian/</url>
    <content><![CDATA[<p>事件机制在一些大型项目中被经常使用，Spring 专门提供了一套事件机制的接口，满足了架构原则上的解耦。</p>
<p><code>ApplicationContext</code> 通过 <strong><code>ApplicationEvent</code></strong> 类和 <strong><code>ApplicationListener</code></strong> 接口进行事件处理。</p>
<p>如果将实现 <code>ApplicationListener</code> 接口的 bean 注入到上下文中，则每次使用 <code>ApplicationContext</code> 发布 <code>ApplicationEvent</code> 时，都会通知该 bean。</p>
<p>本质上，这是标准的<code>观察者设计模式</code>。 </p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul>
<li>ApplicationContext，Spring 上下文对象，进行事件的发布，发布后通知监听器消费</li>
<li>ApplicationEvent，事件对象，可以继承该类并定义消息体</li>
<li>ApplicationListener，事件监听器顶层接口，实现该接口来消费消息</li>
</ul>
<h3 id="1-定义消息体"><a href="#1-定义消息体" class="headerlink" title="1. 定义消息体"></a>1. 定义消息体</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * @author shone
 * @date 2022年07月28日 09:22
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token function">TestEvent</span><span class="token punctuation">(</span>Object source<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="2-定义监听器进行消息消费"><a href="#2-定义监听器进行消息消费" class="headerlink" title="2. 定义监听器进行消息消费"></a>2. 定义监听器进行消息消费</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * @author shone
 * @date 2022年07月28日 09:26
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEventListener</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>TestEvent<span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>TestEvent event<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"监听器处理事件：&amp;#123;&amp;#125;"</span><span class="token punctuation">,</span>event<span class="token punctuation">.</span><span class="token function">getSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>注意</strong></p>
<p>需要自定义事件类继承 ApplicationEvent 类，因为 ApplicationEvent 是所有事件的基类，如果监听  ApplicationEvent 类型的任务，Spring 中存在其他的事件发布也会被监听到。</p>
<p>因此需要实现自定义的任务类，并在监听器中使用泛型执行监听任务类型，且发布时发布对应类型的任务。</p>
<h3 id="3-消息发布"><a href="#3-消息发布" class="headerlink" title="3. 消息发布"></a>3. 消息发布</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/test/pushEvent"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">pushEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"发布事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 发布Spring事件通知</span>
    SpringUtil<span class="token punctuation">.</span><span class="token function">getApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestEvent</span><span class="token punctuation">(</span><span class="token string">"hello event!"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="4-实现异步消费"><a href="#4-实现异步消费" class="headerlink" title="4. 实现异步消费"></a>4. 实现异步消费</h3><p>定义线程池配置，并在监听器处理任务时指定使用的线程池，如果不指定 Spring 会生产默认类型，即会是同步处理任务。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/**
 * @author shone
 * @date 2022年07月28日 09:45
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> SimpleApplicationEventMulticaster <span class="token function">applicationEventMulticaster</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"defaultThreadPoolExecutor"</span><span class="token punctuation">)</span> ThreadPoolExecutor defaultThreadPoolExecutor<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        SimpleApplicationEventMulticaster simpleApplicationEventMulticaster <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        simpleApplicationEventMulticaster<span class="token punctuation">.</span><span class="token function">setTaskExecutor</span><span class="token punctuation">(</span>defaultThreadPoolExecutor<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> simpleApplicationEventMulticaster<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"defaultThreadPoolExecutor"</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">"shutdown"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> ThreadPoolExecutor <span class="token function">systemCheckPoolExecutorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span>r<span class="token punctuation">,</span> executor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"system pool is full! "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="实现原理机制"><a href="#实现原理机制" class="headerlink" title="实现原理机制"></a>实现原理机制</h2>]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 中配置线程池</title>
    <url>/springboot-zhong-pei-zhi-xian-cheng-chi/</url>
    <content><![CDATA[<h3 id="线程池配置"><a href="#线程池配置" class="headerlink" title="线程池配置"></a>线程池配置</h3><ul>
<li>Java线程池实现原理及其在美团业务中的实践：<a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html">https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html</a></li>
<li>SpringBoot 线程池 配置使用：<a href="https://www.cnblogs.com/dudou/p/15136180.html">https://www.cnblogs.com/dudou/p/15136180.html</a></li>
<li>线程池参数及配置：<a href="https://blog.csdn.net/xinpz/article/details/110132365">https://blog.csdn.net/xinpz/article/details/110132365</a></li>
</ul>
<h2 id="线程池-ThreadPoolExecutor"><a href="#线程池-ThreadPoolExecutor" class="headerlink" title="线程池 ThreadPoolExecutor"></a>线程池 ThreadPoolExecutor</h2><p>JDK 中提供的 ThreadPoolExecutor 类</p>
<p>使用线程池可以带来一系列好处：</p>
<ul>
<li>降低资源消耗：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。</li>
<li>提高响应速度：任务到达时，无需等待线程创建即可立即执行。</li>
<li>提高线程的可管理性：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。<br>= 提供更多更强大的功能：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。</li>
</ul>
<h2 id="自定义线程池执行异步任务"><a href="#自定义线程池执行异步任务" class="headerlink" title="自定义线程池执行异步任务"></a>自定义线程池执行异步任务</h2><h3 id="线程池配置-1"><a href="#线程池配置-1" class="headerlink" title="线程池配置"></a>线程池配置</h3><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">### 自定义配置</span>
<span class="token attr-name">task.pool.core-size</span> <span class="token punctuation">=</span> <span class="token attr-value">8</span>
<span class="token attr-name">task.pool.maxSize</span> <span class="token punctuation">=</span> <span class="token attr-value">8</span>
<span class="token attr-name">task.pool.keepAliveSeconds</span> <span class="token punctuation">=</span> <span class="token attr-value">60</span>
<span class="token attr-name">task.pool.queueCapacity</span> <span class="token punctuation">=</span> <span class="token attr-value">20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"task.pool"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolConfig</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> coreSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> maxSize<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> keepAliveSeconds<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> queueCapacity<span class="token punctuation">;</span>


    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"customizeThreadPool"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> Executor <span class="token function">doConfigCustomizeThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        ThreadPoolTaskExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//核心线程池大小</span>
        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span>coreSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//最大线程数</span>
        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span>maxSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//队列容量</span>
        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span>queueCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//活跃时间</span>
        executor<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span>keepAliveSeconds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//线程名字前缀</span>
        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"customize-thread-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment" spellcheck="true">/*
            当poolSize已达到maxPoolSize，如何处理新任务（是拒绝还是交由其它线程处理）
            CallerRunsPolicy：不在新线程中执行任务，而是由调用者所在的线程来执行
         */</span>
        executor<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="重写-SpringBoot-默认异步线程池"><a href="#重写-SpringBoot-默认异步线程池" class="headerlink" title="重写 SpringBoot 默认异步线程池"></a>重写 SpringBoot 默认异步线程池</h3><pre class="line-numbers language-Java"><code class="language-Java">@Data
@Configuration
@ConfigurationProperties(prefix = "task.pool")
public class OverrideDefaultThreadPoolConfig implements AsyncConfigurer &#123;
    private static final Logger log = LoggerFactory.getLogger(OverrideDefaultThreadPoolConfig.class);

    private int coreSize;
    private int maxSize;
    private int keepAliveSeconds;
    private int queueCapacity;

    @Override
    public Executor getAsyncExecutor() &#123;
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        //核心线程池大小
        executor.setCorePoolSize(coreSize);
        //最大线程数
        executor.setMaxPoolSize(maxSize);
        //队列容量
        executor.setQueueCapacity(queueCapacity);
        //活跃时间
        executor.setKeepAliveSeconds(keepAliveSeconds);
        //线程名字前缀
        executor.setThreadNamePrefix("default-thread-");
        /*
            当poolSize已达到maxPoolSize，如何处理新任务（是拒绝还是交由其它线程处理）
            CallerRunsPolicy：不在新线程中执行任务，而是由调用者所在的线程来执行
         */
        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
        executor.initialize();
        return executor;

    &#125;

    @Override
    public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler() &#123;
        return (ex, method, params) -> &#123;
            log.error("==========================" + ex.getMessage() + "=======================", ex);
            log.error("exception method:" + method.getName());
        &#125;;

    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="定义异步方法"><a href="#定义异步方法" class="headerlink" title="定义异步方法"></a>定义异步方法</h3><ul>
<li>异步方法来执行异步任务</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAsync</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolHandler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"customizeThreadPool"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doStatusAnalyseHandle</span><span class="token punctuation">(</span>String start<span class="token punctuation">,</span> String end<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sleepSeconds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sleepSeconds <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>sleepSeconds <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在自定义线程"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行了"</span> <span class="token operator">+</span> sleepSeconds <span class="token operator">+</span> <span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Async</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doStatusAnalyseHandle</span><span class="token punctuation">(</span>String end<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sleepSeconds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>sleepSeconds <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"333"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>sleepSeconds <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在默认线程"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"执行了"</span> <span class="token operator">+</span> sleepSeconds <span class="token operator">+</span> <span class="token string">"秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="测试异步任务执行"><a href="#测试异步任务执行" class="headerlink" title="测试异步任务执行"></a>测试异步任务执行</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolTest</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> ThreadPoolHandler threadPoolHandler<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ThreadPoolHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doStatusAnalyseHandle</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>ThreadPoolHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doStatusAnalyseHandle</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>

        threadPoolHandler<span class="token punctuation">.</span><span class="token function">doStatusAnalyseHandle</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
        threadPoolHandler<span class="token punctuation">.</span><span class="token function">doStatusAnalyseHandle</span><span class="token punctuation">(</span>null<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot 异步注解 @Async</title>
    <url>/springboot-yi-bu-zhu-jie-async/</url>
    <content><![CDATA[<p>除了硬编码的异步编程处理方式， SpringBoot 框架还提供了 <code>注解式</code> 解决方案，以 <code>方法体</code> 为边界，方法体内部的代码逻辑全部按异步方式执行。</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>@Async 注解使用时需要标注在方法上，来指明当前方法被调用时会异步执行。</p>
<p>需要注意的是，</p>
<ul>
<li>使用该注解方法的类对象需要在 Spring Bean 中维护，否则注解不生效；</li>
<li>需要在启动类或配置类上使用 @EnableAsync 注解声明开启异步注解，否则 SpringBoot 不会去搜索 @Async 注解标注的方法</li>
</ul>
<p>另外，@Async 注解直接使用时采用的是  SpringBoot 中默认的线程池对象，如想要指定线程池进行异步操作，可在 @Async 注解中指定：<code>@Async(&quot;defaultThreadPoolExecutor&quot;)</code>，对应的线程池对象需要自己实现并加入到 SpringBean 中。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolConfiguration</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"defaultThreadPoolExecutor"</span><span class="token punctuation">,</span> destroyMethod <span class="token operator">=</span> <span class="token string">"shutdown"</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> ThreadPoolExecutor <span class="token function">systemCheckPoolExecutorService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">ThreadFactoryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setNameFormat</span><span class="token punctuation">(</span><span class="token string">"default-executor-%d"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span>r<span class="token punctuation">,</span> executor<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"system pool is full! "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>注意：@Async 注解标注的方法是异步执行，因此在外层直接获取方法返回结果是获取不到的，即外部线程得到的结果为 null。</p>
<h2 id="注解原理机制"><a href="#注解原理机制" class="headerlink" title="注解原理机制"></a>注解原理机制</h2><p>参考文档：<a href="https://cloud.tencent.com/developer/article/1426027">https://cloud.tencent.com/developer/article/1426027</a></p>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>ThreadPoolExecutor</title>
    <url>/threadpoolexecutor/</url>
    <content><![CDATA[<p>ThreadPoolExecutor，位于 java.util.concurrent; 包中，继承了 AbstractExecutorService 抽象类，间接继承了 ExecutorService 接口。</p>
<h2 id="ThreadPoolExecutor-结构"><a href="#ThreadPoolExecutor-结构" class="headerlink" title="ThreadPoolExecutor 结构"></a>ThreadPoolExecutor 结构</h2><p><code>ThreadPoolExecutor</code> 是一个可被继承 ( extends ) 的线程池实现，包含了用于微调的许多参数和钩子。</p>
<p>ThreadPoolExecutor 中定义了众多的参数和方法，此处仅对其比较重要的参数进行学习。</p>
<h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>ThreadPoolExecutor 有多个参数不同的构造函数，其中参数最完整的定义如下：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span> <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span> <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span> TimeUnit unit<span class="token punctuation">,</span> BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span> ThreadFactory threadFactory<span class="token punctuation">,</span> ThreadPoolExecutor<span class="token punctuation">.</span>RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>ctl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token function">ctlOf</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">536870912</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>workers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>termination <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>mainLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>submittedCount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>lastContextStoppedTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span>0L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>lastTimeThreadKilledItself <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span>0L<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>threadRenewalDelay <span class="token operator">=</span> 1000L<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> maximumPoolSize <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> maximumPoolSize <span class="token operator">>=</span> corePoolSize <span class="token operator">&amp;&amp;</span> keepAliveTime <span class="token operator">>=</span> 0L<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> threadFactory <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> handler <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">prestartAllCoreThreads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>对于线程池初始化的相关参数，可以接释为</p>
<ul>
<li>corePoolSize，int，线程池的核心线程数</li>
<li>maximumPoolSize，int，线程池的最大线程数</li>
<li>keepAliveTime，long，线程存活时间</li>
<li>unit，TimeUnit，线程池存活时间的单位</li>
<li>workQueue，BlockingQueue<Runnable>，线程池的线程任务队列</li>
<li>threadFactory，ThreadFactory，线程工厂函数<ul>
<li>工厂函数可以不指定，默认使用 Executors.defaultThreadFactory() 工厂对象</li>
</ul>
</li>
<li>handler，ThreadPoolExecutor.RejectedExecutionHandler，线程池队列拒绝策略<ul>
<li>拒绝策略可以不指定，默认使用 new ThreadPoolExecutor.RejectPolicy() 策略</li>
</ul>
</li>
</ul>
<h3 id="线程池中线程创建策略"><a href="#线程池中线程创建策略" class="headerlink" title="线程池中线程创建策略"></a>线程池中线程创建策略</h3><p>线程工厂函数对象，用于线程池中创建线程对象，如果不指定会使用默认的 Executors.defaultThreadFactory() 工厂对象。</p>
<p>ThreadPoolExecutor 创建的线程池由固定数量的核心线程组成，这些线程在线程池生命周期内始终存在。</p>
<p>如果线程任务数量超过核心线程数，新的任务会被加入到线程队列中，并在核心线程空闲时从队列中读取任务进行执行。</p>
<p>如果任务数量超过核心线程数，且线程队列中也已经加满（有界队列），此时如果最大线程数大于核心线程数，则会增加线程数量来处理新的线程任务，额外增加的非核心线程数会在空闲超过指定时间后被回收。</p>
<p>如果任务数量超过核心线程数，且线程队列中也已经加满（有界队列），并且线程数量已经增加至最大线程数，此时如果有新的线程任务，则会执行线程池的拒绝策略。</p>
<h3 id="线程池线程任务拒绝策略"><a href="#线程池线程任务拒绝策略" class="headerlink" title="线程池线程任务拒绝策略"></a>线程池线程任务拒绝策略</h3><p>线程池的线程任务拒绝策略参数 handler ，如果不指定则使用默认的 new ThreadPoolExecutor.RejectPolicy() 策略。</p>
<p>线程池的拒绝策略都定义在 ThreadPoolExecutor 类中，其中的内部接口 ThreadPoolExecutor.RejectedExecutionHandler，有默认的实现策略类五种：</p>
<ol>
<li> new ThreadPoolExecutor.RejectPolicy()，直接拒绝新任务的策略</li>
<li> new ThreadPoolExecutor.DiscardOldestPolicy()，丢弃任务队列中最老的任务的策略</li>
<li> new ThreadPoolExecutor.DiscardPolicy()，丢弃新任务的策略</li>
<li> new ThreadPoolExecutor.AbortPolicy()，抛出异常的策略</li>
<li> new ThreadPoolExecutor.CallerRunsPolicy()，由当前主线程执行新任务的策略</li>
</ol>
<h2 id="ScheduledThreadPoolExecutor"><a href="#ScheduledThreadPoolExecutor" class="headerlink" title="ScheduledThreadPoolExecutor"></a>ScheduledThreadPoolExecutor</h2><p>ScheduledThreadPoolExecutor 也是  java.util.concurrent;  包中的线程池类，且其继承了 ThreadPoolExecutor 类，并实现了 ScheduledExecutorService 接口。</p>
<h3 id="构造函数-1"><a href="#构造函数-1" class="headerlink" title="构造函数"></a>构造函数</h3><p>ScheduledThreadPoolExecutor 类继承了 ThreadPoolExecutor 类，因此其构造函数基本是在调用父级构造函数，且 ScheduledThreadPoolExecutor 类在初始化时只可以设置核心线程数、工厂对象、以及拒绝策略，代码如下：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>
                                   ThreadFactory threadFactory<span class="token punctuation">,</span>
                                   RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> NANOSECONDS<span class="token punctuation">,</span>
          <span class="token keyword">new</span> <span class="token class-name">DelayedWorkQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> threadFactory<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>ScheduledThreadPoolExecutor 初始化时 corePoolSize 核心线程数是必填的</li>
<li>线程池的最大线程数不可修改，使用默认值 Integer.MAX_VALUE</li>
<li>线程存活时间不可以修改，使用默认值 0</li>
<li>线程池存活时间的单位不可修改，使用默认值 NANOSECONDS</li>
<li>线程池的线程任务队列不可修改，使用默认值 new DelayedWorkQueue()</li>
<li>工厂函数 threadFactory 和阻塞策略 handler 与 ThreadPoolExecutor  初始化一致，可以指定，不指定则使用父级默认值。</li>
</ul>
<h3 id="附加功能"><a href="#附加功能" class="headerlink" title="附加功能"></a>附加功能</h3><p>ScheduledThreadPoolExecutor 类除了继承 ThreadPoolExecutor  外，还实现了 ScheduledExecutorService 接口，该接口提供了一些功能方法。</p>
<ul>
<li>schedule(Callable<V> callable （Runnable command）,<pre><code>long delay,
TimeUnit unit) ，方法允许在指定的延迟后执行一次任务</code></pre>
</li>
<li>scheduleAtFixedRate(Runnable command,<pre><code>long initialDelay,
long period,
TimeUnit unit)， 方法允许在指定的初始延迟后执行任务，然后以一定的周期重复执行，其中 `period` 参数用于指定两个任务的开始时间之间的间隔时间，因此任务执行的频率是固定的。</code></pre>
</li>
<li>scheduleWithFixedDelay(Runnable command,<pre><code>long initialDelay,
long delay,
TimeUnit unit)， 方法类似于 `scheduleAtFixedRate()` ，它也重复执行给定的任务，但 `delay` 参数用于指定前一个任务的结束和下一个任务的开始之间的间隔时间。也就是指定下一个任务延时多久后才执行。执行频率可能会有所不同，具体取决于执行任何给定任务所需的时间。</code></pre>
</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://www.twle.cn/c/yufei/javatm/javatm-basic-thread-pool2.html">一文秒懂 Java ThreadPoolExecutor</a> </p>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Threads 和 Executors</title>
    <url>/threads-he-executors/</url>
    <content><![CDATA[<h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><h2 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h2><h2 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h2><h2 id="Executors"><a href="#Executors" class="headerlink" title="Executors"></a>Executors</h2><p>Executors 是 java.util.concurrent; 包中的一个工具类，用来快速的创建线程池对象等。</p>
<h3 id="创建-ExecutorService"><a href="#创建-ExecutorService" class="headerlink" title="创建 ExecutorService"></a>创建 ExecutorService</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建一个核心线程数等于最大线程数的线程池，线程队列是无界的</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>
                                  0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>
                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 创建一个核心线程数等于最大线程数的线程池，线程队列是无界的，可指定工厂函数对象</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> ThreadFactory threadFactory<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>
                                  0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>
                                  <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>并行线程池，不太常见</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建并行线程池，可以使用多个队列</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> parallelism<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span>
        <span class="token punctuation">(</span>parallelism<span class="token punctuation">,</span>
         ForkJoinPool<span class="token punctuation">.</span>defaultForkJoinWorkerThreadFactory<span class="token punctuation">,</span>
         null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span>
        <span class="token punctuation">(</span>Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
         ForkJoinPool<span class="token punctuation">.</span>defaultForkJoinWorkerThreadFactory<span class="token punctuation">,</span>
         null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建单线程，其中核心线程数和最大线程数都是 1，任务队列是无界的</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>
        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>
                                0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>
                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 创建单线程，其中核心线程数和最大线程数都是 1，可以自定义指定 工厂函数对象</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span>ThreadFactory threadFactory<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>
        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>
                                0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>
                                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                threadFactory<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建缓存线程池，核心线程为 0，最大线程为 Integer.MAX_VALUE，同步队列，长度为1</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span>ThreadFactory threadFactory<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>
                                  60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>
                                  <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="创建-ScheduledExecutorService"><a href="#创建-ScheduledExecutorService" class="headerlink" title="创建 ScheduledExecutorService"></a>创建 ScheduledExecutorService</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建单线程，即线程池核心线程为 1 </span>
<span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DelegatedScheduledExecutorService</span>
        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 创建单线程，并可以指定工厂对象</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newSingleThreadScheduledExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DelegatedScheduledExecutorService</span>
        <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 创建指定核心线程数的任务调度线程池</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">// 创建指定核心线程数的任务调度线程池，并且可以指定工厂函数</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> ScheduledExecutorService <span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span>
    <span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span> ThreadFactory threadFactory<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ScheduledThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池线程异常捕获</title>
    <url>/xian-cheng-chi-xian-cheng-yi-chang-bu-huo/</url>
    <content><![CDATA[<h2 id="线程池中的一个线程异常了会发生什么？"><a href="#线程池中的一个线程异常了会发生什么？" class="headerlink" title="线程池中的一个线程异常了会发生什么？"></a>线程池中的一个线程异常了会发生什么？</h2><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://zhuanlan.zhihu.com/p/136571068">https://zhuanlan.zhihu.com/p/136571068</a></p>
<ol>
<li>线程抛出异常信息</li>
<li>异常线程被线程池回收；线程不是被回收而是线程池把这个线程移除掉，同时创建一个新的线程放到线程池中。</li>
<li>其他非异常线程不受影响，继续执行</li>
</ol>
<h3 id="多线程（线程池）异常捕获"><a href="#多线程（线程池）异常捕获" class="headerlink" title="多线程（线程池）异常捕获"></a>多线程（线程池）异常捕获</h3><ul>
<li>线程池中的一个线程异常了会被怎么处理?：<a href="https://zhuanlan.zhihu.com/p/136571068">https://zhuanlan.zhihu.com/p/136571068</a></li>
<li>线程池的拒绝策略、异常捕获：<a href="https://blog.csdn.net/qq_43783527/article/details/125044548">https://blog.csdn.net/qq_43783527/article/details/125044548</a></li>
<li>Java多线程：捕获线程异常：<a href="https://blog.csdn.net/lilizhou2008/article/details/106953380">https://blog.csdn.net/lilizhou2008/article/details/106953380</a></li>
<li>（九）线程池异常捕获：<a href="https://blog.csdn.net/yudianxiaoxiao/article/details/107580289">https://blog.csdn.net/yudianxiaoxiao/article/details/107580289</a></li>
</ul>
<h2 id="Executors-线程池"><a href="#Executors-线程池" class="headerlink" title="Executors 线程池"></a>Executors 线程池</h2><p>线程池有两种提交线程的方式，execute() 和 submit() ，使用时有以下区别：</p>
<ul>
<li>execute 没有返回值。可以执行任务，但无法判断任务是否成功完成。<ul>
<li>实现 Runnable 接口</li>
</ul>
</li>
<li>submit 返回一个 future ，可以用这个 future 来判断任务是否成功完成。<ul>
<li>实现 Callable 接口</li>
</ul>
</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    ThreadPoolTaskExecutor executorService <span class="token operator">=</span> <span class="token function">buildThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"execute方法"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"submit方法"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    String printStr <span class="token operator">=</span> <span class="token string">"【thread-name:"</span> <span class="token operator">+</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",执行方式:"</span> <span class="token operator">+</span> name<span class="token operator">+</span><span class="token string">"】"</span><span class="token punctuation">;</span>
    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>printStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>printStr <span class="token operator">+</span> <span class="token string">",出现异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> ThreadPoolTaskExecutor <span class="token function">buildThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    ThreadPoolTaskExecutor executorService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    executorService<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"(小罗技术笔记)-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    executorService<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    executorService<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    executorService<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    executorService<span class="token punctuation">.</span><span class="token function">setKeepAliveSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    executorService<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>CallerRunsPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    executorService<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> executorService<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>运行程序， execute 执行方式抛出异常显示在控制台了；submit 执行程序并没有任何异常打印</li>
</ul>
<p>这是因为 submit() 方法执行线程后会返回线程执行结果，而相应的执行异常信息也被放入到结果中了，可以通过结果对象来获取异常信息</p>
<pre class="line-numbers language-java"><code class="language-java">Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> result<span class="token operator">=</span>executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"submit方法"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>如果线程抛出异常，则使用 get() 获取结果时会抛出异常信息</li>
</ul>
<h2 id="捕获线程池线程异常"><a href="#捕获线程池线程异常" class="headerlink" title="捕获线程池线程异常"></a>捕获线程池线程异常</h2><p>参考：<a href="https://www.cnblogs.com/549294286/p/4618798.html">https://www.cnblogs.com/549294286/p/4618798.html</a></p>
<p>Java 中线程执行的任务接口 java.lang.Runnable 要求不抛出 Checked 异常，但是当实现的 run() 方法中出现了异常，会怎么样呢？又怎么啦捕获异常信息呢？</p>
<p>通常 java.lang.Thread 对象运行设置一个默认的异常处理方法，这个默认的静态全局的异常捕获方法是直接输出异常堆栈。</p>
<pre class="line-numbers language-java"><code class="language-java">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">setDefaultUncaughtExceptionHandler</span><span class="token punctuation">(</span>UncaughtExceptionHandler<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>我们可以覆盖此默认实现，只需要一个自定义的 java.lang.Thread.UncaughtExceptionHandler 接口实现即可。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UncaughtExceptionHandler</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">uncaughtException</span><span class="token punctuation">(</span>Thread t<span class="token punctuation">,</span> Throwable e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>线程池中却比较特殊，默认情况下，线程池 java.util.concurrent.ThreadPoolExecutor 会 Catch 住所有异常， 当任务执行完成 (java.util.concurrent.ExecutorService.submit(Callable)) 获取其结果时 Future.get()) 会抛出此异常信息 RuntimeException 。</p>
<pre class="line-numbers language-java"><code class="language-java">V <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">,</span> ExecutionException<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>其中 ExecutionException 异常即是java.lang.Runnable 或者 java.util.concurrent.Callable 抛出的异常。</p>
<p>java.util.concurrent.ThreadPoolExecutor 中预留了一个方法，在任务执行完毕进行扩展（当然也预留一个protected 方法在任务执行前扩展， beforeExecute(Thread t, Runnable r)）。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterExecute</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>此方法的默认实现为空，这样我们就可以通过继承或者覆盖ThreadPoolExecutor 来达到自定义的错误处理。</p>
<h3 id="重写线程池-afterExecute-方法实现异常捕获"><a href="#重写线程池-afterExecute-方法实现异常捕获" class="headerlink" title="重写线程池 afterExecute() 方法实现异常捕获"></a>重写线程池 afterExecute() 方法实现异常捕获</h3><pre class="line-numbers language-java"><code class="language-java">ThreadPoolExecutor threadPoolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//</span>
        <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//</span>
        <span class="token keyword">new</span> <span class="token class-name">DefaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">afterExecute</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">afterExecute</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printException</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printException</span><span class="token punctuation">(</span>Runnable r<span class="token punctuation">,</span> Throwable t<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> r <span class="token keyword">instanceof</span> <span class="token class-name">Future</span><span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> future <span class="token operator">=</span> <span class="token punctuation">(</span>Future<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> r<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>future<span class="token punctuation">.</span><span class="token function">isDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CancellationException</span> ce<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            t <span class="token operator">=</span> ce<span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> ee<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            t <span class="token operator">=</span> ee<span class="token punctuation">.</span><span class="token function">getCause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ie<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ignore/reset</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">!=</span> null<span class="token punctuation">)</span>
        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>如果使用 @Configuration + @Bean(”threadPoolTaskExecutor“) 可以配置系统线程池异常捕获</li>
</ul>
<p>事实上 afterExecute 并不会总是抛出异常 Throwable t，通过查看源码得知，异常是封装在此时的Future对象中的， 而此 Future 对象其实是一个 java.util.concurrent.FutureTask 的实现，默认的 run 方法其实调用的 java.util.concurrent.FutureTask.Sync.innerRun()。</p>
<p>吃掉了异常，将异常存储在java.util.concurrent.FutureTask.Sync的exception字段中</p>
<p>当我们获取异步执行的结果时， java.util.concurrent.FutureTask.get()</p>
<p>异常就会被包装成ExecutionException异常抛出。</p>
<h3 id="ScheduledThreadPoolExecutor"><a href="#ScheduledThreadPoolExecutor" class="headerlink" title="ScheduledThreadPoolExecutor"></a>ScheduledThreadPoolExecutor</h3><p>java.util.concurrent.<strong>ScheduledThreadPoolExecutor</strong> 是继承 <strong>ThreadPoolExecutor</strong> 的，因此情况类似。</p>
<h3 id="主线程和子线程"><a href="#主线程和子线程" class="headerlink" title="主线程和子线程"></a>主线程和子线程</h3><p>如果主线程想拿到子线程的异常，比如展示给界面，该怎么做？</p>
<ul>
<li>友好的做法是子线程不抛出异常，返回不同的结果，或者将异常封装到return对象中。父对象根据此结果/异常封装友好的提示给界面。</li>
</ul>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 实现优化文章标题中文字符</title>
    <url>/hexo-shi-xian-you-hua-wen-zhang-biao-ti-zhong-wen-zi-fu/</url>
    <content><![CDATA[<h2 id="Hexo-创建文章标题"><a href="#Hexo-创建文章标题" class="headerlink" title="Hexo 创建文章标题"></a>Hexo 创建文章标题</h2><h3 id="命令设置文章标题"><a href="#命令设置文章标题" class="headerlink" title="命令设置文章标题"></a>命令设置文章标题</h3><p>Hexo 新建一篇博客文章时使用如下命令</p>
<pre class="line-numbers language-shell"><code class="language-shell">hexo new [layout] 'titleName'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>layout 是一个可选参数，用来指定创建文章对应的布局，即文章最终会被分配到的文件夹路径<ul>
<li>layout 参数有三种默认布局：post、page 和 draft，</li>
<li>post，默认类型，创建时文章会储存到 <code>source/_posts</code> 文件夹</li>
<li>page，创建时文章会储存到 <code>source</code> 文件夹              </li>
<li>draft，代表博客草稿，创建时文章会储存到 <code>source/_drafts</code> 文件夹</li>
<li>另外，也可以根据 Hexo 的结构和主题自定义创建一些布局</li>
</ul>
</li>
<li>titleName 是必填参数，代表创建文章的文件名及链接地址名称</li>
</ul>
<h3 id="根据时间分类管理文章"><a href="#根据时间分类管理文章" class="headerlink" title="根据时间分类管理文章"></a>根据时间分类管理文章</h3><p>Hexo 默认以标题做为文件名称，但您可编辑 <code>new_post_name</code> 参数来改变默认的文件名称，举例来说，设为 <code>:year-:month-:day-:title.md</code> 可让您更方便的通过日期来管理文章。<br>变量         | 描述                   |<br>| ———- | ——————– |<br>| <code>:title</code>   | 标题（小写，空格将会被替换为短杠）    |<br>| <code>:year</code>    | 建立的年份，比如， <code>2015</code>     |<br>| <code>:month</code>   | 建立的月份（有前导零），比如， <code>04</code> |<br>| <code>:i_month</code> | 建立的月份（无前导零），比如， <code>4</code>  |<br>| <code>:day</code>     | 建立的日期（有前导零），比如， <code>07</code> |<br>| <code>:i_day</code>   | 建立的日期（无前导零），比如， <code>7</code> |</p>
<h3 id="Front-matter-设置文章标题"><a href="#Front-matter-设置文章标题" class="headerlink" title="Front-matter 设置文章标题"></a>Front-matter 设置文章标题</h3><p>Hexo 中 Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定文件的变量数据。</p>
<pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>
title: blog's title
<span class="token title important">date: 2023/06/30 20:46:25
<span class="token punctuation">---</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li>title 代表当前文章的标题<br>因此除了使用 <code>hexo new &lt;title&gt;</code> 参数创建指定名称的文章外，还可以在文件夹中自定义创建 <code>.md</code> 文件，并在内容中定义对应的 title 属性。</li>
</ul>
<p>需要注意的是，对于文件名称和 Front-matter 中 title 内容不一致时有：</p>
<ul>
<li>文件名称作为 Hexo 默认的文件地址链接，名称改变后地址随之变化</li>
<li>title 代表文章内容的标题</li>
<li>使用命令指定 title 时默认文件名称和内容标题一致</li>
</ul>
<h3 id="自定义模板-Front-matter"><a href="#自定义模板-Front-matter" class="headerlink" title="自定义模板 Front-matter"></a>自定义模板 Front-matter</h3><p>Hexo 提供了模板文件供创建文章时使用，可以在 <code>scaffolds</code> 文件夹下创建对应的模板文件，然后在 <code>hexo new [layout] &lt;title&gt;</code> 命令中使用模板文件名称代替 layout 参数，既可以按照模板文件内容创建指定文件。</p>
<p>详细模板文件使用可见官网链接:<a href="https://hexo.io/zh-cn/docs/writing#%E6%A8%A1%E7%89%88%EF%BC%88Scaffold%EF%BC%89">模版（Scaffold）</a> </p>
<h3 id="文章标题-路径-为中文的问题"><a href="#文章标题-路径-为中文的问题" class="headerlink" title="文章标题(路径)为中文的问题"></a>文章标题(路径)为中文的问题</h3><p>由于语言使用习惯，我们在创建 Hexo 文章时更喜欢使用中文来定义文章标题，Hexo 创建博客文章时使用中文作为作为页面的标题，会默认以该标题名作为文章的的 url，这样就会导致在网页中 name 为中文，因此在页面文章的 SEO 中会出现如下问题：</p>
<ol>
<li>搜索引擎收录文章地址不友好</li>
<li>分享或复制文章地址时可能会对中文进行 url 编码，导致地址乱码</li>
<li>文章标题发生变更时，文章访问地址也会改变，导致已分享的地址不可用</li>
</ol>
<h2 id="文章标题-SEO-优化"><a href="#文章标题-SEO-优化" class="headerlink" title="文章标题 SEO 优化"></a>文章标题 SEO 优化</h2><p>对于文章 SEO 问题，其实只需要做到两点即可：</p>
<ol>
<li>将文章链接地址编码成非中文地址，这也在搜索引擎收录和分享地址时不会出现问题</li>
<li>开启 Hexo 设置文章地址为永久地址，这样就不会跟随文章标题发生变更</li>
</ol>
<h3 id="简单的路径与标题分离"><a href="#简单的路径与标题分离" class="headerlink" title="简单的路径与标题分离"></a>简单的路径与标题分离</h3><p>由于文件名称和文章标题可以分开定义，因此可以在创建 <code>.md</code> 文件时名称定义为非中文字符，而在文章的 Front-matter 内容中使用 title 定义中文名称，这样可以避免文章路径为中文导致的问题。</p>
<ul>
<li>但是这样仍然不可避免在文件名称改变时导致的原始链接不可用</li>
</ul>
<h3 id="设置文章地址永久有效"><a href="#设置文章地址永久有效" class="headerlink" title="设置文章地址永久有效"></a>设置文章地址永久有效</h3><p>为了避免文章名称改变导致链接地址发生变化，Hexo 官方提供了设置文件链接地址为永久有效的方法。<br>在站点配置文件<code>_config.yml</code> 中使用 permalink 属性配置文章的永久链接。</p>
<pre class="line-numbers language-yml"><code class="language-yml">permalink: :year/:month/:day/:title<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<ul>
<li>上述配置即代表文章生成后永久链接格式为：年/月/日/名称，如果不希望显示时间也可以仅设置为 <code>title</code></li>
</ul>
<p>配置文件 permalink 代表没有其他配置时的默认配置，如果在文章的 Front-matter 中进一步设置了 permalink 属性，则会优先使用 Front-matter 中配置的内容。</p>
<ul>
<li>  如果每篇文章中 <code>permalink</code> 有值，则使用文章中的 <code>permalink</code> 作为文章的永久链接</li>
<li>  如果文章没有设置 <code>permalink</code> 的值，默认以站点配置文件中 <code>permalink</code> 的格式生成文章的永久链接</li>
</ul>
<p>最后，相同的是，Front-matter 中可以设置 permalink，则也可以在 <code>scaffolds</code> 对应的模板文件中设置文章创建使用的模板属性值。</p>
<ul>
<li>详细使用方法可见官网：<a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a></li>
</ul>
<h3 id="文章标题（地址）转数字"><a href="#文章标题（地址）转数字" class="headerlink" title="文章标题（地址）转数字"></a>文章标题（地址）转数字</h3><p>Hexo 博客文章可以使用 <a href="https://github.com/rozbo/hexo-abbrlink">abbrlink</a> 插件实现链接地址转数字，使用流程如下：</p>
<ol>
<li>在项目目录下使用命令安装 abbrlink 插件<pre class="line-numbers language-shell"><code class="language-shell">npm install hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>在 Hexo 配置文件中配置文章地址格式和 abbrlink 插件参数<pre class="line-numbers language-yml"><code class="language-yml">#permalink_defaults:
permalink: posts/:abbrlink/  
abbrlink:  
  alg: crc32 #support crc16(default) and crc32  
  rep: dec   #support dec(default) and hex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<ul>
<li>alg 是 abbrlink 插件提供的算法</li>
<li>rep 是一种散射编码方式</li>
</ul>
<ol start="3">
<li>设置完成后，使用 <code>hexo new &lt;title&gt;</code> 创建新文章时会在文章的 Front-matter 中自动生成 abbrlink 属性值，并将其作为地址链接的内容，这样在文件名称修改后仍然保持有效。</li>
</ol>
<h4 id="hexo-number-title"><a href="#hexo-number-title" class="headerlink" title="hexo-number-title"></a>hexo-number-title</h4><p>除此之外，还有<a href="https://github.com/hluglk/hexo-number-title">hexo-number-title</a> 也是将中文转为数字链接地址，只不过是根据创建文章时的时间戳来代替。</p>
<h3 id="文章标题（地址）转拼音"><a href="#文章标题（地址）转拼音" class="headerlink" title="文章标题（地址）转拼音"></a>文章标题（地址）转拼音</h3><p>Hexo 文件地址中文转拼音是比较符合国人口味的一个插件，其开源地址为<a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> 。<br>使用方法如下：</p>
<ol>
<li>安装插件<pre class="line-numbers language-shell"><code class="language-shell">npm i hexo-permalink-pinyin --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>配置插件<pre class="line-numbers language-yml"><code class="language-yml">permalink_pinyin:
enable: true             # Enable this plugin
separator: '-'           # Separator of the slug, default: '-'
exclude: /ignore_post/   # Regex for which post should skip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<ul>
<li>enable 为开关</li>
<li>separator 表示每个汉字拼音之间的连接符合，默认是 ‘-‘ </li>
<li>exclude 可以指定需要跳过的 post 路径</li>
</ul>
<ol start="3">
<li>配置完成后，正常使用名称生成文章便会将中文地址转为拼音</li>
</ol>
<h3 id="文章标题（地址）转英文"><a href="#文章标题（地址）转英文" class="headerlink" title="文章标题（地址）转英文"></a>文章标题（地址）转英文</h3><p>Hexo 博客地址链接转英文主要是使用 <a href="https://github.com/cometlj/hexo-translate-title">hexo-translate-title</a> 插件来实现。</p>
<ol>
<li>本地 Hexo 文件目录下安装 hexo-translate-title 插件<pre class="line-numbers language-shell"><code class="language-shell">npm install hexo-translate-title --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li>配置 Hexo 的 <code>_config.yml</code> 配置文件<pre class="line-numbers language-yml"><code class="language-yml">permalink: :year/:month:day/:translate_title.html
translate_title:
translate_way: google  # google,youdao,baidu_with_appid,baidu_no_appid
youdao_api_key: '' # Your youdao_api_key
youdao_keyfrom: xxxx-blog # Your youdao_keyfrom
is_need_proxy: false     # true | false
proxy_url: http://localhost:50018 # Your proxy_url
baidu_appid: '' # Your baidu_appid
baidu_appkey: '' # Your baidu_appkey
rewrite: false # is rewrite true | false <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ol>
<ul>
<li>将<code>:title</code> 修改为<code>:translate_title</code> 即可，前面的路径也可按照自己的要求变更，例如 permalink: blog/:translate_title.html</li>
<li>配置翻译相关内容时需要注意：<ul>
<li>如果不需要代理，请将<code>_config.yml</code> 下的 <code>is_need_proxy: true</code> 改为 false。如果设置为 true, 需要设置本地代理地址</li>
<li>目前 google 翻译，youdao 翻译均可直接使用，百度翻译使用 APPID 版本，无 APPID 版本均已完成，APPID 版本需要在<a href="http://api.fanyi.baidu.com/">百度翻译开放平台</a> 获取 appId</li>
<li>如果不希望百度翻译开发平台的 APP_ID 和 APP_KEY 有泄漏风险，建议在百度翻译开发平台 -&gt; 管理控制台的服务器地址一栏，填写好服务器 IP 即可</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>String 的不可变性怎么理解？</title>
    <url>/string-de-bu-ke-bian-xing-zen-me-li-jie/</url>
    <content><![CDATA[<h2 id="String-类"><a href="#String-类" class="headerlink" title="String 类"></a>String 类</h2><h3 id="String-类结构"><a href="#String-类结构" class="headerlink" title="String 类结构"></a>String 类结构</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>
  <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> CharSequence <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token comment" spellcheck="true">// ...</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>Java String 类是 java.lang 包中的类，其实现了 java.io.Serializable, Comparable<String>, CharSequence 等接口。</p>
<p>String 类对象中存储的字符串，最终都是以字符形式存储在其 char[] 数组中，获取时从数组中读取字符列表，且 String 中该属性使用了 final 关键字定义。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>除此之外，String 类在 Object 的基础上重写了 equals() 和 hashCode() 方法，</p>
<ul>
<li>  equals() 除了使用 == 判断相等外，还会遍历循环比较两个字符串对应字符串数组中的每个字符，如果完全相同也会认为字符串相等。</li>
<li>  toString() 方法直接返回字符串本身，因为其就是字符串，无需 toString 转换</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object anObject<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        String anotherString <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                i<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="String-的不可变性怎么理解？"><a href="#String-的不可变性怎么理解？" class="headerlink" title="String 的不可变性怎么理解？"></a>String 的不可变性怎么理解？</h3><p>Java 中 String 类是不可变的，这意味着一旦创建了一个 String 对象，就不能再修改它的值。</p>
<pre class="line-numbers language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>
System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出 123</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<ul>
<li>  上述代码看似是改变了字符串内容，但是实际上只是将变量 str 指向的地址由 “abc” 改成了 “123”，在字符串常量池中 “abc” 仍然存在，不被改变。</li>
<li>  对于 String 提供的 trim()、replace() 等修改字符串字面值的方法也是同理，都是重新创建一个字符串返回，并没有修改原始字符串。</li>
</ul>
<h4 id="String-类的不可变性体现在如下方面："><a href="#String-类的不可变性体现在如下方面：" class="headerlink" title="String 类的不可变性体现在如下方面："></a>String 类的不可变性体现在如下方面：</h4><ol>
<li> String 类使用 final 修饰，保证该类不会被继承进行修改</li>
<li> String 类中存储内容的 char [] 使用 final 修饰，保证字符数组引用不会被修改</li>
<li>尽管 String 类的 char[] 中的元素仍可以修改，但是又通过如下两种方式控制不被修改<ul>
<li>char[] 定义为 private ，即不可以从外部进行操作</li>
<li>String 类中所有内部方法都避免操作 char[] 内容</li>
</ul>
</li>
</ol>
<p>基于上述内容，保证了 String 的 char[] 内容是不可变的，即 String 的不可变性。</p>
<p>由于 String 类是不可变的，所以它的性能比较高，且是线程安全的，即多个线程可以同时访问同一个 String 对象，而不会出现线程问题。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>
    <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> CharSequence <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">/** The value is used for character storage. */</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">char</span> value<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//...</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="String-类的常用方法都有那些？"><a href="#String-类的常用方法都有那些？" class="headerlink" title="String 类的常用方法都有那些？"></a>String 类的常用方法都有那些？</h3><ul>
<li>  length()：返回字符串长度</li>
<li>  trim()：去除字符串两端空白。</li>
<li>  toLowerCase()：将字符串转成小写字母。</li>
<li>  toUpperCase()：将字符串转成大写字符。</li>
<li>  charAt(int index)：返回指定索引处的字符。</li>
<li>  inexOf(char c)：返回指定字符的索引。</li>
<li>  replace()：字符串替换。</li>
<li>  split()：分割字符串，返回一个分割后的字符串数组。</li>
<li>  substring (int beginIndex, int endIndex)：返回从 beginIndex 到 endIndex-1 的子字符串。</li>
<li>  equals(Object obj)：字符串比较是否相等。</li>
<li>  getBytes()：返回字符串的 byte 类型数组。</li>
</ul>
<h3 id="String-常用工具类"><a href="#String-常用工具类" class="headerlink" title="String 常用工具类"></a>String 常用工具类</h3><p>StringUtils 是处理字符串的工具类，String 类实现 CharSequence 接口，为实现不同的 String 操作，各大厂商封装了相应的 StringUtils 工具类。</p>
<ol>
<li><code>org.springframework.util.StringUtils</code>，spring 自带 String 工具类，可以满足基本的使用。<ul>
<li>Java Web 中不需要导包，在 spring-core 包中存在，可以直接使用</li>
</ul>
</li>
<li><code>org.apache.commons.lang.StringUtils</code>， apache 提供的 String 工具类，对 java.lang 的扩展。<ul>
<li>lang 最新版本是 2.6，最低要求 Java1.2 以上，目前官方已不再维护。</li>
</ul>
</li>
<li><code>apache-commons-lang3.StringUtils</code>，lang 的升级包，将参数换成 CharSequence 数组，贴合 String 类型的内部结构，最常用工具类包。<ul>
<li>lang3 目前最新版本是 3.12.0，最低要求 Java8 以上。相对于 lang 来说完全支持 Java8 的特性，废除了一些旧的 API。该版本无法兼容旧有版本，于是为了避免冲突改名为 lang3。<pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-lang3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>剑指 Offer 04. 二维数组的查找</title>
    <url>/jian-zhi-offer-04-er-wei-shu-zu-de-cha-zhao/</url>
    <content><![CDATA[<h2 id="一、题目描述"><a href="#一、题目描述" class="headerlink" title="一、题目描述"></a>一、题目描述</h2><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>示例：<br>有二维数组矩阵如下：</p>
<pre><code>[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]</code></pre>
<ul>
<li>给定 target = 5，返回 true。</li>
<li>给定 target = 20，返回 false。</li>
</ul>
<h3 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h3><ul>
<li><code>0 &lt;= n &lt;= 1000</code></li>
<li><code>0 &lt;= m &lt;= 1000</code></li>
</ul>
<h3 id="难度：中等"><a href="#难度：中等" class="headerlink" title="难度：中等"></a>难度：中等</h3><p>此题为中等，根据规律寻找的方法，着实是不能一下子想到！</p>
<h2 id="二、思路分析"><a href="#二、思路分析" class="headerlink" title="二、思路分析"></a>二、思路分析</h2><blockquote>
<p>众所周知，力扣上，简单题是真简单，中等题有些困难，困难题看不懂答案。</p>
</blockquote>
<h3 id="题目解析"><a href="#题目解析" class="headerlink" title="题目解析"></a>题目解析</h3><ol>
<li>二维数组中的查找，根据题目描述，给到一个每行从左到右、每列从上到下满足递增顺序的二维数组，并在数组中寻找给定的目标值，存在返回 true，不存在返回 false。</li>
<li>对比一维数组中查找目标值，相同的，对于二位数组，无论是否有序，都可以通过一次完整的遍历并比较来判断是否存在，对于数组维数增加，算法的复杂度回平方增加，如果数量较大可能会超出时间限制。</li>
<li>由于题目给出的二维数组符合一定的排序规律，因此可以利用规律来减少比较次数<ul>
<li>根据规律，数组最右侧元素作为一行中元素最大值，数组最上侧元素作为一列中最小值</li>
<li>可以以右上角元素作为切入，判断与目标值的关系</li>
<li>如果相等则返回 true；</li>
<li>如果小于目标值，则当前行中所有元素均小于目标值，此时行数 +1，继续比较下方元素</li>
<li>如果大于目标值，则当前列中所有元素均大于目标值，此时列数 -1，继续比较左侧元素</li>
<li>最终最多遍历比较一行和一列即 m+n 次既可得到最终结果。</li>
</ul>
</li>
</ol>
<h2 id="三、AC-代码"><a href="#三、AC-代码" class="headerlink" title="三、AC 代码"></a>三、AC 代码</h2><h3 id="遍历二维数组寻找目标值"><a href="#遍历二维数组寻找目标值" class="headerlink" title="遍历二维数组寻找目标值"></a>遍历二维数组寻找目标值</h3><ul>
<li>遍历二维数组，逐个判断是否存在目标值，存在返回true，不存在则返回false，需要判断n的平方次<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
          <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7ef4f9df53e347cf9a2d2c0090d81aa2~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h3 id="通过边界判断"><a href="#通过边界判断" class="headerlink" title="通过边界判断"></a>通过边界判断</h3><ul>
<li>根据数组有序的规律，选择右上角元素，与目标值比较，如果小于，则增加行数，如果大于则减少列数，最多只需要判断 m+n 次<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> col <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span>row <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> col <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> cur <span class="token operator">=</span> matrix<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>cur <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> row<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">else</span> col<span class="token operator">--</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/637e1d0bf2774de191bb0ae7fa5a7e11~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul>
<li>二维数组的遍历</li>
<li>二位有序数组利用规律求解，寻找目标值</li>
</ul>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>剑指 Offer ，算法刷起来！<a href="https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof/">LeetCode 剑指 Offer</a>。</p>
]]></content>
  </entry>
  <entry>
    <title>MarkDown 绘图小技巧</title>
    <url>/markdown-hui-tu-xiao-ji-qiao/</url>
    <content><![CDATA[<blockquote>
<p>MarkDown 语法在记笔记、写文章等方面越来越受到更多人的喜欢，掘金、CSDN 等平台的文章内容就是 MarkDown 语法格式。</p>
<p>MarkDown 编译器可以把引用的语法对应成相应的 HTML 标签，不同的插件对应的语法也不太一样，今天不说基础，说一下使用 MarkDown 怎么画出常用的流程图。</p>
</blockquote>
<h2 id="1-样式流程图（graph）"><a href="#1-样式流程图（graph）" class="headerlink" title="1. 样式流程图（graph）"></a>1. 样式流程图（graph）</h2><p>流程图是工作学习中使用最为频繁的图形，一些简单的流程图可以直接使用 MarkDown 来实现了。</p>
<h3 id="1-1-定义流程图类型"><a href="#1-1-定义流程图类型" class="headerlink" title="1.1 定义流程图类型"></a>1.1 定义流程图类型</h3><p>流程图使用时，要使用 MarkDown 中的源代码格式，且代码格式为 mermaid 类型才可以正常编译。</p>
<ul>
<li>源代码中绘图时，需要使用 <code>graph</code> 关键词作为开始标志，之后设置图的延申方向<ul>
<li><code>TB</code>/<code>TD</code>(top bottom / top down)：从上至下；BT：从下至上</li>
<li><code>RL</code>(right left)：从右至左；LR：从左至右</li>
</ul>
</li>
</ul>
<p>编码内容</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f94fecdfd0f243acbbe146986b18763f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>实际效果</p>
<pre class="line-numbers language-mermaid"><code class="language-mermaid">graph TB
mermaid --> graphTB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="1-2-节点类型和样式"><a href="#1-2-节点类型和样式" class="headerlink" title="1.2 节点类型和样式"></a>1.2 节点类型和样式</h3><p>节点类型：流程图中的节点通过使用不同的括号来代表不同的形状</p>
<ul>
<li>默认为矩形（不加任何括号）：A</li>
<li>矩形节点：B[矩形]</li>
<li>圆角矩形节点：C(圆角矩形)</li>
<li>圆形节点：D((圆形))</li>
<li>非对称节点：E &gt;非对称]</li>
<li>菱形节点：F{菱形}</li>
</ul>
<p>编码</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d544b258c74f43b4b8e83682f8211c64~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>效果</p>
<pre class="line-numbers language-mermaid"><code class="language-mermaid">graph BT
A 
B[B]
C(C)
D((D))
E>E]
F&#123;F&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="1-3-节点连线类型"><a href="#1-3-节点连线类型" class="headerlink" title="1.3 节点连线类型"></a>1.3 节点连线类型</h3><p>连线类型：流程图中节点之间使用线条连接，线条的类型也有很多种</p>
<ul>
<li>箭头连接：A –&gt; B</li>
<li>开放连接（无箭头）：A — B</li>
<li>虚线箭头连接：A .-&gt; B 或 A -.-&gt; B</li>
<li>虚线连接：A .- B 或 A -.- B</li>
<li>粗线箭头连接：A ==&gt; B</li>
<li>粗线开放连接（无箭头）：A === B</li>
<li>带标签虚线箭头连接： A -.text.-&gt; B</li>
<li>带标签开放连接（无箭头）：A –text— B</li>
</ul>
<p>编码</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c1b769731204219827e694efe95db52~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>效果</p>
<pre class="line-numbers language-mermaid"><code class="language-mermaid">graph LR
A --> B
A --- B
A .-> B
A -.- B
A ==> B
A === B
A -.to.-> B
A -.to.- B
A --to--> B
A --to--- B
A ==to===> B<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-时序图"><a href="#2-时序图" class="headerlink" title="2 时序图"></a>2 时序图</h2><p>时序图作为流程图的变形，也是比较常用的。</p>
<h3 id="2-1-基本语法："><a href="#2-1-基本语法：" class="headerlink" title="2.1 基本语法："></a>2.1 基本语法：</h3><ul>
<li><code>Title:标题</code> ：指定时序图的标题</li>
<li><code>Note [位置] 对象:描述</code> ： 在对象的某一侧添加描述，<code>direction</code> 可以为 <code>right of/left of/over</code> ， <code>对象</code> 可以是多个对象，以 <code>,</code> 作为分隔符</li>
<li><code>participant 对象 as 简称</code> ：创建一个对象</li>
<li>激活方块：<ul>
<li>开始：activate [对象]</li>
<li>结束：deactivate [对象]</li>
</ul>
</li>
<li><code>loop...end</code> ：创建一个循环体（不确定怎么用？？）</li>
<li>对象A-&gt;对象B:描述<br>： 绘制A与B之间的对话，以实线连接<ul>
<li><code>-&gt;</code> 实线实心箭头指向</li>
<li><code>--&gt;</code> 虚线实心箭头指向</li>
<li><code>-&gt;&gt;</code> 实线小箭头指向</li>
<li><code>--&gt;&gt;</code> 虚线小箭头指向</li>
</ul>
</li>
<li>  loop … end 循环</li>
<li>  alt … else … end 条件分支</li>
<li>  opt … end 分支 </li>
</ul>
<h3 id="2-2-时序图实现"><a href="#2-2-时序图实现" class="headerlink" title="2.2 时序图实现"></a>2.2 时序图实现</h3><p>使用mermaid格式进行解析，并使用sequenceDiagram 作为开始</p>
<p>编码</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e57f94ee50849048ca1766278d050fd~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>效果</p>
<pre class="line-numbers language-mermaid"><code class="language-mermaid">sequenceDiagram 
对象A ->> 对象B:hello？
对象B -->> 对象A:yes

activate 对象A
对象A ->> 对象B:激活方块
对象B ->> 对象A:激活方块
对象A ->> 对象B:激活方块
deactivate 对象A

loop 循环流程
对象B -->> 对象A:循环
对象A -->> 对象B:循环
end

alt 条件1
对象A ->> 对象B:1
else 条件2
对象A ->> 对象B:2
end

opt 另外
对象A ->> 对象B:others
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="3-甘特图"><a href="#3-甘特图" class="headerlink" title="3 甘特图"></a>3 甘特图</h2><p>甘特图虽然不太常用，但是在一些项目进度、工时排列等方面还是大有用处的。</p>
<h3 id="3-1-基本语法"><a href="#3-1-基本语法" class="headerlink" title="3.1 基本语法"></a>3.1 基本语法</h3><ul>
<li>使用 <code>mermaid</code> 解析语言，在开头使用关键字 <code>gantt</code> 指明</li>
<li><code>deteFormat 格式</code> 指明日期的显示格式</li>
<li><code>title 标题</code> 设置图标的标题</li>
<li><code>section 描述</code> 定义纵向上的一个环节</li>
<li>定义步骤：每个步骤有两种状态done（已完成）/ active（执行中）<ul>
<li><code>描述: 状态,id,开始日期,结束日期/持续时间</code></li>
<li><code>描述: 状态[,id],after id2,持续时间</code></li>
<li><code>crit</code> ：可用于标记该步骤需要被修正，将高亮显示</li>
<li>如果不指定具体的开始时间或在某个步骤之后，将默认依次顺序排列</li>
</ul>
</li>
</ul>
<h3 id="3-2-甘特图实现"><a href="#3-2-甘特图实现" class="headerlink" title="3.2 甘特图实现"></a>3.2 甘特图实现</h3><p>编码</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6ef5a0582cc042e6a3a7ec10bfc726d8~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>效果</p>
<pre class="line-numbers language-mermaid"><code class="language-mermaid">gantt
    dateFormat YYYY-MM-DD
    title 甘特图

    section 设计
    需求: done,des1, 2021-09-22,1d
    原型: active,des2, 2021-09-23,1d
    UI: des3, after des2, 2d

    section 开发
    设计框架: crit, done, des4, 2021-09-25, 24h
    开发: active, des5, after des4, 3d
    假期: desc6, 2021-10-01, 7d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>对于 MarkDown 语法的使用还是有很多内容的，而且针对不同的 MarkDown 工具，其在实现上可以有所不同，即针对某些语法是无法正常解析的。</p>
]]></content>
  </entry>
  <entry>
    <title>MySQL 安装十分详细版</title>
    <url>/mysql-an-zhuang-shi-fen-xiang-xi-ban/</url>
    <content><![CDATA[<h2 id="一、Windows-下安装-MySQL"><a href="#一、Windows-下安装-MySQL" class="headerlink" title="一、Windows 下安装 MySQL"></a>一、Windows 下安装 MySQL</h2><p><a href="https://www.runoob.com/mysql/mysql-install.html">https://www.runoob.com/mysql/mysql-install.html</a></p>
<h2 id="二、Linux-下安装-MySQL"><a href="#二、Linux-下安装-MySQL" class="headerlink" title="二、Linux 下安装 MySQL"></a>二、Linux 下安装 MySQL</h2><h3 id="1-yum-命令安装-MySQL"><a href="#1-yum-命令安装-MySQL" class="headerlink" title="1. yum 命令安装 MySQL"></a>1. yum 命令安装 MySQL</h3><p>使用 yum 方式安装 MySQL 是最简单的，在使用压缩包安装是遇到不少问题，换用 yum 方式后简单迅速。</p>
<h4 id="1-1-查看并移除旧版本-MySQL"><a href="#1-1-查看并移除旧版本-MySQL" class="headerlink" title="1.1 查看并移除旧版本 MySQL"></a>1.1 查看并移除旧版本 MySQL</h4><p>使用命令：<strong>rpm -qa | grep -i mysql</strong> （-i，代表忽略大小写的差别）</p>
<ul>
<li>  如显示已经安装的相关模块，则要先卸载，再重新安装</li>
</ul>
<!---->

<ul>
<li><ul>
<li><strong>yum -y remove &lt;全名称&gt;</strong> ：卸载相关模块：使用联合命令，将查询结果作为参数移除：<code>yum -y remove $(rpm -qa | grep -i mysql)</code><ul>
<li>  如果上述命令卸载不掉，则使用命令： <strong>rpm -er &lt;全名称&gt;</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<!---->

<ul>
<li>  如果执行后无任何变化，表示没有安装</li>
</ul>
<p>使用命令查看是否存在 mysql yum 安装包，<code>yum list mysql*</code>，如果有遗留，可以使用命令删除</p>
<ul>
<li>  <code>rpm -e mysql</code>，普通删除模式</li>
<li>  <code>rpm -e --nodeps mysql</code>，强力删除模式</li>
</ul>
<p>使用命令：<strong>whereis mysql</strong> 查看系统中是否存在 mysql 相关文件</p>
<ul>
<li>  如果存在，则使用命令删除 <strong>rm -rf …</strong></li>
</ul>
<p>使用命令：<strong>find / -name mysql</strong> 查看 mysql 相关文件</p>
<ul>
<li>  删除无用文件</li>
</ul>
<h4 id="1-2-下载并安装-MySQL-服务"><a href="#1-2-下载并安装-MySQL-服务" class="headerlink" title="1.2 下载并安装 MySQL 服务"></a>1.2 下载并安装 MySQL 服务</h4><p>简单安装</p>
<ul>
<li>  安装 mysql 客户端，<code>yum install mysql</code></li>
<li>  安装 mysql 服务端，<code>yum install mysql-community-server</code></li>
</ul>
<p>完整安装</p>
<pre><code># ①进入/usr/local文件夹下
cd /usr/local
# ②下载.rpm文件
wget http://repo.mysql.com/mysql57-community-release-el7-8.noarch.rpm 
# ③执行 rpm文件
rpm -ivh mysql57-community-release-el7-8.noarch.rpm 
# ④安装mysql服务（-y代表安装过程中所有提示选择为y）
yum -y install mysql-server
# 或者指定安装目录（不必要）
yum --installroot=/usr/local/mysql --releasever=/ -y install mysql-server

## 另一种快速安装方式
wget -i -c http://dev.mysql.com/get/mysql57-community-release-el7-10.noarch.rpm
yum -y install mysql57-community-release-el7-10.noarch.rpm
yum -y install mysql-community-server</code></pre>
<ul>
<li>  等待所有服务模块安装完成 即可</li>
</ul>
<h4 id="1-3-MySQL配置文件"><a href="#1-3-MySQL配置文件" class="headerlink" title="1.3 MySQL配置文件"></a>1.3 MySQL配置文件</h4><ul>
<li>  配置文件： <strong>/etc/my.cnf</strong></li>
<li>  日志文件： <strong>/var/log/mysqld.log</strong></li>
<li>  服务启动脚本： <strong>/usr/lib/systemd/system/mysqld.service</strong></li>
<li>  socket文件： <strong>/var/run/mysqld/mysqld.pid</strong></li>
<li>  添加mysql配置内容：</li>
</ul>
<pre><code>[mysqld]
datadir=/var/lib/mysql
socket=/var/lib/mysql/mysql.sock
server_id = 1
expire_logs_days = 3

# Disabling symbolic-links is recommended to prevent assorted security risks
symbolic-links=0

log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid</code></pre>
<ul>
<li>  查看 mysql 的编码信息，登录mysql后，使用命令<code>show variables like &#39;character_set%&#39;;</code></li>
<li>  设置 mysql 的默认字符集，在/etc/my.cnf文件中，增加 <code>default-character-set=utf-8</code></li>
</ul>
<pre><code>[mysqld]
character-set-server=utf8 
[client]
default-character-set=utf8 
[mysql]
default-character-set=utf8</code></pre>
<h4 id="1-4-MySQL服务相关命令"><a href="#1-4-MySQL服务相关命令" class="headerlink" title="1.4 MySQL服务相关命令"></a>1.4 MySQL服务相关命令</h4><ul>
<li>  <strong>systemctl start mysqld.service</strong>：开启 mysql 服务</li>
<li>  <strong>systemctl status mysqld.service</strong>：查看 mysql 服务状态，</li>
</ul>
<!---->

<ul>
<li><ul>
<li>  -l：查看详细状态信息</li>
</ul>
</li>
</ul>
<!---->

<ul>
<li>  <strong>systemctl stop mysqld.service</strong>：停止 mysql 服务</li>
<li>  <strong>systemctl restart mysqld.service</strong>：重启mysql服务</li>
<li>  <strong>systemctl enable mysqld</strong>：设置mysql开机自启动</li>
<li>  <strong>systemctl daemon-reload</strong>：作为守护进程开启</li>
</ul>
<h4 id="1-5-MySQL-密码修改"><a href="#1-5-MySQL-密码修改" class="headerlink" title="1.5 MySQL 密码修改"></a>1.5 MySQL 密码修改</h4><h5 id="查看随机生成密码"><a href="#查看随机生成密码" class="headerlink" title="查看随机生成密码"></a>查看随机生成密码</h5><p>安装mysql后，会在相应的日志文件中产生一个随机密码，可以使用命令查看：</p>
<ul>
<li>  <strong>cat /var/log/mysqld.log</strong> ：查看日志文件全部内容</li>
<li>  <strong>grep “password” /var/log/mysqld.log</strong> ：使用正则匹配日志文件中的password关键字</li>
</ul>
<h5 id="跳过密码认证"><a href="#跳过密码认证" class="headerlink" title="跳过密码认证"></a>跳过密码认证</h5><p>随机密码登录失败时，需要配置跳过认证阶段，登录后使用sql语句更新密码</p>
<ul>
<li>  <strong>vi /etc/my.cnf</strong>：修改配置文件，添加<strong>skip-grant-tables</strong>后保存退出，表示登录不验证</li>
</ul>
<!---->

<ul>
<li><ul>
<li>  <strong>mysqld_safe –skip-grant-tables –skip-networking&amp;</strong> 命令效果相同</li>
</ul>
</li>
</ul>
<!---->

<ul>
<li>  重启mysql服务，使用mysql直接登录mysql客户端</li>
</ul>
<h5 id="使用sql语句修改登录密码"><a href="#使用sql语句修改登录密码" class="headerlink" title="使用sql语句修改登录密码"></a>使用sql语句修改登录密码</h5><ul>
<li>  <strong>mysql -u root -p</strong>：使用命令登录mysql，命令回车后输入日志中密码，登录mysql</li>
<li>  <strong>ALTER USER ‘root’@’localhost’ IDENTIFIED BY ‘xxxxxxxx’;</strong> 修改root账户的密码为xxxxxxxx</li>
</ul>
<!---->

<ul>
<li><ul>
<li>如果是 skip-grant-tables 情况下执行该语句，会提示不可以执行<ul>
<li>  可以使用更新 user 表中密码数据的方式：</li>
<li>  <strong>update mysql.user set authentication_string=PASSWORD(‘newPassword’) where USER=’root’;</strong> 更新密码</li>
<li>  <strong>flush privileges;</strong> 刷新权限表</li>
</ul>
</li>
</ul>
</li>
</ul>
<!---->

<ul>
<li>  默认密码策略要求密码是大小写字母+数字+特殊字符的组合且最少8位</li>
<li>  密码修改完成后，退出，使用新密码重新登录</li>
</ul>
<h4 id="1-6-允许远程登录"><a href="#1-6-允许远程登录" class="headerlink" title="1.6 允许远程登录"></a>1.6 允许远程登录</h4><h5 id="1-6-1-设置允许其他端、navicate-远程连接。"><a href="#1-6-1-设置允许其他端、navicate-远程连接。" class="headerlink" title="1.6.1 设置允许其他端、navicate 远程连接。"></a>1.6.1 设置允许其他端、navicate 远程连接。</h5><ul>
<li>  mysql 中开启远程访问权限，mysql 库中的 user 表新增一条记录 host 为“%”，user为“root”。</li>
</ul>
<pre><code># 连接客户端（远程登录限制）
mysql -u root -p Root@2020  
mysql&gt; use mysql;

# 查看 root 用户信息，host = localhost 表示只可以本地连接，不可以远程连接
select * from user where user =&#39;root&#39;;

update user set host = &#39;%&#39; where user = &#39;root&#39;;
# 或者是下面命令
# ALTER USER &#39;root&#39;@&#39;%&#39; IDENTIFIED WITH mysql_native_password BY &#39;Root@2021&#39;;
# 如果上句运行失败，则使用下面命令
# mysql&gt; grant all on *.* to root@&quot;%&quot; identified by &quot;Root@2021&quot;;
mysql&gt; flush privileges;</code></pre>
<h5 id="1-6-2-检查-Linux-防火墙设置"><a href="#1-6-2-检查-Linux-防火墙设置" class="headerlink" title="1.6.2 检查 Linux 防火墙设置"></a>1.6.2 检查 Linux 防火墙设置</h5><p>MySQL 默认占用端口号为 3306，因此需要</p>
<ol>
<li> 如果是云服务器，则要在安全组中开放 3306 端口</li>
<li> 服务器防火墙开放 3306 端口</li>
</ol>
<pre><code># 查看firewalld状态，dead 状态代表防火墙未开启，active代表已开启
systemctl status firewalld
# 查看防火墙是否已开放3306端口
firewall-cmd --query-port=3306/tcp
# 设置3306端口为永久开放
firewall-cmd --add-port=3306/tcp --permanent

# 设置后重启防火墙（设置了新的端口记得先关闭，再重启）
systemctl restart firewalld</code></pre>
<h4 id="1-7-yum-安装常见问题"><a href="#1-7-yum-安装常见问题" class="headerlink" title="1.7 yum 安装常见问题"></a>1.7 yum 安装常见问题</h4><h5 id="1-7-1-wget-下载失败"><a href="#1-7-1-wget-下载失败" class="headerlink" title="1.7.1 wget 下载失败"></a>1.7.1 wget 下载失败</h5><p>Cannot write to ‘mysql57-community-release-el7-8.noarch.rpm’ (Permission denied).</p>
<p>表示下载文件时权限不够，可以加 <strong>sudo</strong> 命令或使用 <strong>su root</strong> 切换至管理器权限下载文件</p>
<h5 id="1-7-2-速度慢，换镜像"><a href="#1-7-2-速度慢，换镜像" class="headerlink" title="1.7.2 速度慢，换镜像"></a>1.7.2 速度慢，换镜像</h5><p>修改CentOS 默认 yum 源为国内yum镜像源</p>
<ol>
<li> 修改为163镜像源</li>
</ol>
<ul>
<li><ul>
<li>备份yum源文件，<strong>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</strong><ul>
<li>  进入yum源文件夹，<strong>cd /etc/yum.repos.d/</strong></li>
<li>  下载163镜像源文件，<strong>wget <a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></strong></li>
<li>  运行yum命令生成缓存，<strong>yum makecache</strong></li>
<li>  更新yum会显示163信息，<strong>yum -y update</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="2">
<li> 修改为阿里云镜像源</li>
</ol>
<ul>
<li>  使用阿里源的方法基本一样，阿里yum源文件下载地址为<strong>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a></strong></li>
</ul>
<h5 id="1-7-3-安装报错：No-package-mysql-server-available"><a href="#1-7-3-安装报错：No-package-mysql-server-available" class="headerlink" title="1.7.3 安装报错：No package mysql-server available."></a>1.7.3 安装报错：No package mysql-server available.</h5><p>CentOS7 安装 mysql 报错：No package mysql-server available. Error: Nothing to do</p>
<p>报错原因：CentOS7 自带 MariaDB 而不是 MySQL，MariaDB 和 MySQL 一样也是开元的数据库，可以使用 <strong>yum -y install mariadb-server mariadb</strong> 命令安装，而安装 MySQL 需要先添加 社区 repo</p>
<p>解决办法：</p>
<ol>
<li> 下载文件，<strong>wget <a href="http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm">http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</a></strong></li>
<li> 执行文件， <strong>rpm -ivh mysql-community-release-el7-5.noarch.rpm</strong></li>
<li> 之后再次使用命令安装</li>
</ol>
<h5 id="1-7-4-GPG-Keys-are-configured-as-…"><a href="#1-7-4-GPG-Keys-are-configured-as-…" class="headerlink" title="1.7.4 GPG Keys are configured as …"></a>1.7.4 GPG Keys are configured as …</h5><p>报错信息： GPG Keys are configured as: file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</p>
<p>错误原因：GPG keys是安装包发布时生成的密钥，安装是需要核对密钥来确保安全性，MySQL的GRG 升级了</p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/checking-rpm-signature.html">https://dev.mysql.com/doc/refman/5.7/en/checking-rpm-signature.html</a></p>
<p>解决办法：</p>
<ol>
<li> 需要重新获取GRG，使用命令 <strong>rpm –import <a href="https://repo.mysql.com/RPM-GPG-KEY-mysql-2022">https://repo.mysql.com/RPM-GPG-KEY-mysql-2022</a></strong>获取后，重新安装MySQL</li>
<li> 如果重新获取GRG后，安装仍然显示该错误，则考虑安装时跳过GRG检查</li>
</ol>
<ul>
<li><ul>
<li>安装命令最后使用**–nogpgcheck** 跳过<ul>
<li>  编辑 yum 配置文件， <strong>/etc/yum.repos.d/mysql-community.repo</strong>，修改其中的 gpgcheck=0</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>[mysql57-community]
name=MySQL 5.7 Community Server
baseurl=http://repo.mysql.com/yum/mysql-5.7-community/el/7/$basearch/
enabled=1
gpgcheck=0
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</code></pre>
<h4 id="1-8-MySQL-卸载"><a href="#1-8-MySQL-卸载" class="headerlink" title="1.8 MySQL 卸载"></a>1.8 MySQL 卸载</h4><p><strong>rpm -qa|grep -i mysql</strong>，查看是否安装MySQL，如果安装过，则要先移除安装</p>
<ul>
<li>  <strong>yum -y remove &lt;全名称&gt;</strong> ：卸载相关模块</li>
<li>  如上述命令卸载不掉，则使用命令 <strong>rpm -er &lt;全名称&gt;</strong></li>
</ul>
<p><strong>whereis mysql</strong>，查看MySQL文件信息</p>
<p>删除MySQL相关文件</p>
<ul>
<li>  <strong>find / -name mysql</strong>，查看系统中MySQL相关文件信息</li>
<li>  对找到的相关文件夹，使用 <strong>rm -rf</strong> 命令依次删除</li>
</ul>
<h3 id="2-压缩包安装-MySQL"><a href="#2-压缩包安装-MySQL" class="headerlink" title="2. 压缩包安装 MySQL"></a>2. 压缩包安装 MySQL</h3><h2 id="三、Docker-中安装-MySQL"><a href="#三、Docker-中安装-MySQL" class="headerlink" title="三、Docker 中安装 MySQL"></a>三、Docker 中安装 MySQL</h2><p>mysql 的容器我们可以让 docker 创建和执行，但是 mysql 的数据不能仅存在容器内，需要我们开辟一个外部路径专门用来存储 mysql 数据。</p>
<h3 id="1-安装-MySQL"><a href="#1-安装-MySQL" class="headerlink" title="1. 安装 MySQL"></a>1. 安装 MySQL</h3><pre><code>docker run -p 3306:3306 --name mysql -v /mydata/mysql/log:/var/log/mysql -v /mydata/mysql/data:/var/lib/mysql -v /mydata/mysql/conf:/etc/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7
 简单讲解一下，
 -p 3306:3306：将容器的3306端口映射到主机的3306端口
 -v 源地址(宿主机):目标地址(容器)，将主机的/mydata/mysql/log挂载到mysql容器的/var/log/mysql目录
 -e 指定容器内的环境变量,这里是指定mysql密码为root
 -d 后台运行容器，并返回容器ID
 mysql:5.7 指定mysql版本，具体版本可以在https://hub.docker.com 查询</code></pre>
<h3 id="2-验证-MySQL-是否安装成功"><a href="#2-验证-MySQL-是否安装成功" class="headerlink" title="2. 验证 MySQL 是否安装成功"></a>2. 验证 MySQL 是否安装成功</h3><pre><code>docker ps</code></pre>
<p>如下，如果显示了 mysql 就是安装成功了<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ae46ac44e0f46ed8506089a6205fef8~tplv-k3u1fbpfcp-zoom-1.image"></p>
<h3 id="3-开启-MySQL-远程访问权限："><a href="#3-开启-MySQL-远程访问权限：" class="headerlink" title="3. 开启 MySQL 远程访问权限："></a>3. 开启 MySQL 远程访问权限：</h3><pre><code>先进入mysql容器
docker exec -it mysql /bin/bash
登录mysql，密码就是我们初始化时设置的root
mysql -uroot -p
然后开始开启远程访问权限
use mysql;
select host,user from user;</code></pre>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7214fe4092e142278770d0a86baae2a3~tplv-k3u1fbpfcp-zoom-1.image"><br>查看 host 不是 %，需要先更新成 %（如果是 % 跳过，直接进行下面的授权）：然后开始授权</p>
<h3 id="4-MySQL-防火墙配置"><a href="#4-MySQL-防火墙配置" class="headerlink" title="4. MySQL 防火墙配置"></a>4. MySQL 防火墙配置</h3><p>上面对 mysql 本身开启了远程访问权限，下面需要配置防火墙，阿里云还需要在控制台配置安全组开放 3306 端口。</p>
<pre><code># 如果firewalld 没有开启，先开启下
service firewalld start
#开放3306端口
firewall-cmd --permanent --add-port=3306/tcp;
#重启防火墙(修改配置后要重启防火墙)
firewall-cmd --reload</code></pre>
<p>最后配置 mysql 自启：此时使用 navicat 可以访问 MySQL 了</p>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="docker-run-之后没有启动（启动后自动退出）"><a href="#docker-run-之后没有启动（启动后自动退出）" class="headerlink" title="docker run 之后没有启动（启动后自动退出）"></a>docker run 之后没有启动（启动后自动退出）</h4><ul>
<li>  <a href="https://blog.csdn.net/x1064320359/article/details/120816832">https://blog.csdn.net/x1064320359/article/details/120816832</a></li>
<li>  <a href="https://blog.csdn.net/qq_40191181/article/details/116733889">https://blog.csdn.net/qq_40191181/article/details/116733889</a></li>
</ul>
<h4 id="mysqld-Can’t-read-dir-of-‘-etc-mysql-conf-d-‘-Errcode-2-No-such-file-or-directory"><a href="#mysqld-Can’t-read-dir-of-‘-etc-mysql-conf-d-‘-Errcode-2-No-such-file-or-directory" class="headerlink" title="mysqld: Can’t read dir of ‘/etc/mysql/conf.d/‘ (Errcode: 2 - No such file or directory)"></a>mysqld: Can’t read dir of ‘/etc/mysql/conf.d/‘ (Errcode: 2 - No such file or directory)</h4><ul>
<li>  <a href="https://www.cnblogs.com/eternality/p/17170773.html">https://www.cnblogs.com/eternality/p/17170773.html</a></li>
<li>  <a href="https://blog.csdn.net/qq_45564783/article/details/126440171">https://blog.csdn.net/qq_45564783/article/details/126440171</a></li>
</ul>
<h4 id="chown-changing-ownership-of-‘-var-lib-mysql-‘-Permission-denied"><a href="#chown-changing-ownership-of-‘-var-lib-mysql-‘-Permission-denied" class="headerlink" title="chown: changing ownership of ‘/var/lib/mysql/‘: Permission denied"></a>chown: changing ownership of ‘/var/lib/mysql/‘: Permission denied</h4><p><a href="https://blog.csdn.net/miachen520/article/details/122389701">https://blog.csdn.net/miachen520/article/details/122389701</a></p>
<h3 id="阿里云资源安装-mysql"><a href="#阿里云资源安装-mysql" class="headerlink" title="阿里云资源安装 mysql"></a>阿里云资源安装 mysql</h3><p>可以在 <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/images">阿里云镜像中心</a> 搜索相关的镜像，会跳转到docker官网镜像处。</p>
<p>MySQL镜像使用步骤：</p>
<ol>
<li> 使用命令查询mysql镜像信息：<strong>docker search mysql</strong></li>
<li> 从远程仓库拉取mysql镜像，<strong>docker pull mysql</strong></li>
<li> 通过docker run 运行镜像</li>
</ol>
<ul>
<li><ul>
<li>-d 进行后台运行<ul>
<li>  -p 指定mysql镜像映射的主机端口</li>
<li>  -e 后跟 mysql 的参数，来连接查询数据库的名称和连接密钥</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="4">
<li> 如命令：<strong>docker run -d -p 3306:3306 -e MYSQL—_ROOT_PASSWORD=root -e MYSQL_DATABASE=datebase mysql:latest</strong></li>
</ol>
<ul>
<li><ul>
<li>属性名称必须要大写，否则无效<ul>
<li>  <strong>-e MYSQL_ROOT_PASSWORD=root</strong>：设置 MySQL 服务 root 用户的密码为root</li>
<li>  <strong>-e MYSQL_DATABASE=datebase</strong> ，创建一个名为databse的数据库</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol start="5">
<li> 运行成功后，可以进入到mysql镜像中并查看mysql信息</li>
</ol>
<!---->

<ol>
<li><ol>
<li> 使用<strong>docker ps</strong> 查看当前执行的镜像的ID，</li>
<li> 使用命令进入到docker镜像中：<strong>docker exec -it 镜像ID bash</strong> ，进入后命令行前缀用户就变成了容器ID。</li>
<li> 进入容器中，就相当于进入了一个轻量级Linux，命令是相同的</li>
<li> 进入mysql镜像后，使用命令连接mysql：<strong>mysql –user=root –password</strong> 或<strong>mysql -h localhost -u root -p</strong> 然后输入密码登录</li>
</ol>
</li>
</ol>
<p><strong>错误：</strong> 服务器上通过docker命令运行和访问正常，但是使用navicate远程连接mysql时报错如下：<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee917ea24d6b41e8a63f008dde01cf86~tplv-k3u1fbpfcp-zoom-1.image"></p>
<ul>
<li>  首先通过mysql镜像的ID进入到镜像中，并连接mysql <strong>mysql -u root -p</strong> 输入密码</li>
<li>  开启远程访问权限</li>
</ul>
<!---->

<ul>
<li><ul>
<li>查看数据库信息<strong>show databases;</strong><ul>
<li>  切换使用mysql数据库：<strong>use mysql;</strong></li>
<li>  查询user表权限信息：<strong>select host,user from user</strong></li>
<li>  <strong>ALTER USER ‘root’@’%’ IDENTIFIED WITH mysql_native_password BY ‘root’;</strong></li>
<li>  刷新操作：<strong>flush privileges;</strong></li>
<li>  然后可以远程使用navicate连接了。</li>
<li>  原因：镜像中root用户已经有了远程连接的权限，但是模式不一样导致无法连接，因此要将root用户的密码改成 mysql_native_password 模式即可。</li>
</ul>
</li>
</ul>
</li>
</ul>
<!---->

<ul>
<li>  <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f3bffa972c9544139221d9c702c770e5~tplv-k3u1fbpfcp-zoom-1.image"></li>
</ul>
<p><strong>问题：</strong> 每次运行mysql时使用命令创建数据库，当服务stop之后，数据库就没了，下次运行要重新创建？</p>
<ul>
<li>  如果每次都重新run运行mysql镜像，那么每次启动后服务的ID是不同的，就是不同的服务，则数据库是一个原始的数据库</li>
<li>  而使用命令 <strong>docker ps -a</strong> 可以查看所有的服务，找到之前服务的ID，直接 <strong>docker start ID</strong> 可以运行已经存在的服务，且配置是一样的。<img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fd0b0a11d0c449f811cf1c0867c4990~tplv-k3u1fbpfcp-zoom-1.image"></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Xshell 收费了，如何选择 SSH 登录工具?</title>
    <url>/xshell-shou-fei-liao-ru-he-xuan-ze-ssh-deng-lu-gong-ju/</url>
    <content><![CDATA[<h2 id="0-SSH"><a href="#0-SSH" class="headerlink" title="0. SSH"></a>0. SSH</h2><p><strong>SSH</strong> 为 Secure Shell 的缩写，是较可靠的、为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。</p>
<p><code>XShell</code>是一个强大的安全终端模拟软件，它支持SSH、TELNET等协议，可以在Windows界面下用来访问远端不同系统下的服务器，从而实现远程控制终端。</p>
<p>XShell正版是收费的，虽然为学生和高校提供了免费使用版本，但是对于个人和企业来讲使用还是收费的，如果无法使用XShell学习版本，有哪些其他软件可以替代呢。</p>
<h2 id="1-Putty"><a href="#1-Putty" class="headerlink" title="1. Putty"></a>1. Putty</h2><blockquote>
<p>a free SSH and Telnet client.</p>
</blockquote>
<h3 id="1-1-Putty简介"><a href="#1-1-Putty简介" class="headerlink" title="1.1 Putty简介"></a>1.1 Putty简介</h3><p>Putty是一款开源免费的连接软件，支持SSH、Telnet、Serial等协议的连接，常用来远程管理Linux服务器系统。</p>
<p>官网：<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/">https://www.chiark.greenend.org.uk/~sgtatham/putty/</a></p>
<p>可以在官网完成客户端下载，下载时可以选择安装包类型</p>
<ul>
<li>  .msi：安装版本，下载完成安装后使用，安装后大小4M左右</li>
<li>  .exe：免安装版本，下载后直接运行使用，整体2M左右</li>
</ul>
<h3 id="1-2-Putty的特点"><a href="#1-2-Putty的特点" class="headerlink" title="1.2 Putty的特点"></a>1.2 Putty的特点</h3><p>Putty作为一款开源软件，是完全免费的，并且可以适用于当前所有windows系统版本中。除此之外，Putty还有一些优点：</p>
<ul>
<li>  软件体积小，下载使用耗费资源少，运行速度快</li>
<li>  客户端下载无需安装，点击运行即可使用</li>
<li>  支持SSH、Talent等多种协议连接</li>
<li>  操作界面简洁，所有功能都集中在一个界面，使用方便</li>
</ul>
<h3 id="1-3-Putty的使用方法"><a href="#1-3-Putty的使用方法" class="headerlink" title="1.3 Putty的使用方法"></a>1.3 Putty的使用方法</h3><p>打开Putty软件后可以看到如下操作界面，Putty基本所有的功能都在该界面完成。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d3825338245d47548cb47c2a4264b57f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>可以看到，如果是简单的远程连接，左侧只需要选择Session界面，<br>右侧操作步骤：</p>
<ol>
<li>输入需要远程连接的服务端地址，使用域名或者IP地址</li>
<li>输入服务器中对应的端口号</li>
<li>选择对应的连接类型，一般是SSH连接</li>
<li>可选内容，如果需要将Session信息保存以便重复利用，可以在信息填写完成后，在Saved Sessions处填写要保存的名称，然后点击右侧的Save操作保存会话，保存成功会在下方框中显示。也可以导入已保存的Session或者删除不需要的Session信息。</li>
<li>信息填写完成后，点击Open按键开始连接远程客户端</li>
<li>连接开始后，会跳转到命令页面，提示输入登录远程服务端的用户名和密码</li>
<li>用户名和密码验证完成后，登录成功，显示服务端命令界面，可以进行其他操作<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/304cda89a2074ed4ba1e8da08c25422e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></li>
</ol>
<h2 id="2-MobaXterm"><a href="#2-MobaXterm" class="headerlink" title="2. MobaXterm"></a>2. MobaXterm</h2><blockquote>
<p>Enhanced terminal for Windows with X11 server, tabbed SSH client, network tools and much more.</p>
</blockquote>
<h3 id="2-1-MobaXterm简介"><a href="#2-1-MobaXterm简介" class="headerlink" title="2.1 MobaXterm简介"></a>2.1 MobaXterm简介</h3><p>MobaXterm也是另外一款优秀的SSH客户端连接工具，相比于Putty来讲，MobaXterm是一个增强型的终端工具，提供了更加丰富的功能供用户使用。</p>
<p>MobaXterm的安装包分为个人免费版和专业收费版本，可以根据工作需求选择合适的版本</p>
<p>官方下载：<a href="https://mobaxterm.mobatek.net/download.html">https://mobaxterm.mobatek.net/download.html</a></p>
<p>免费版相比于专业版本，可以保存的会话以及同时在线的SSH连接数较少，对个人使用也足够。</p>
<p>MobaXterm也同时提供了安装版和绿色免安装版本的程序，下载页面中进入就可以选择。</p>
<h3 id="2-2-MobaXterm特点"><a href="#2-2-MobaXterm特点" class="headerlink" title="2.2 MobaXterm特点"></a>2.2 MobaXterm特点</h3><p>如果适应的Xshell多标签的使用方式，多半对Putty使用略感不适，因为Putty不支持多标签的连接方式，连接其他服务器时需要重新打开客户端登录。而MobaXterm就很好的提供了多标签的连接方式，除此之外还有一些其他优势：</p>
<ul>
<li>  支持SSH，FTP，串口，VNC，X server等协议连接，功能强大</li>
<li>  界面功能丰富，快捷键操作方便</li>
<li>  连接服务器后提供SFTP文件的可视化传输</li>
</ul>
<h3 id="2-3-MobaXterm使用方法"><a href="#2-3-MobaXterm使用方法" class="headerlink" title="2.3 MobaXterm使用方法"></a>2.3 MobaXterm使用方法</h3><p>MobaXterm使用起来也是非常的方便，下载软件并安装完成后，打开MobaXterm，在左侧空白处右键单击，选择New Session来创建一个连接信息。</p>
<p>软件操作界面如下图所示：</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6d783448aa94ffd9eb5ee2bfce06e6b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>详细流程可以表示为：</p>
<ol>
<li>右键单击，选择New Session创建一个新的连接</li>
<li>在弹出页面中，选择SSH连接类型</li>
<li>下方输入远程ip地址和poat端口号，username可以选填</li>
<li>信息填写完成后，点击下方OK开始连接，MobaXterm会使用一个标签来进行连接</li>
<li>如果没有填写username，则连接时需要输入用户和密码，否则只需要输入密码即可</li>
<li>验证成功后，MobaXterm进入远程服务器页面，并将session保存，在左侧栏可以查看</li>
</ol>
<h2 id="3-SSH密钥登录"><a href="#3-SSH密钥登录" class="headerlink" title="3. SSH密钥登录"></a>3. SSH密钥登录</h2><p>实际生产场景中，服务器一般不提供直接访问，为了保证安全，会采用SSH密钥的方式登录。</p>
<p>常见的就是使用JumpServer作为跳板机连接服务器，使用开源跳板机JumpServer后，对于新增的用户，JumpServer会为该用户生成一个SSH密钥，用户在本地连接远程服务器时，就需要使用SSH密钥来完成连接。</p>
<p>Xshell中在登录时可以选择使用密钥登录，并导入密钥文件完成登录，Putty和MobaXterm中同样可以使用SSH密钥登录的方式连接。</p>
<h3 id="3-1-Putty密钥连接"><a href="#3-1-Putty密钥连接" class="headerlink" title="3.1 Putty密钥连接"></a>3.1 Putty密钥连接</h3><p>JumpServer分发的SSH密钥下载后是一个.pem文件，而Putty客户端导入的密钥是.ppk格式的，其中ppk即Putty Private Key，因此我们首先需要将密钥文件转换成Putty可用文件。</p>
<h4 id="3-1-1-生成ppk密钥文件"><a href="#3-1-1-生成ppk密钥文件" class="headerlink" title="3.1.1 生成ppk密钥文件"></a>3.1.1 生成ppk密钥文件</h4><p>如果使用的是putty.exe客户端，那么我们还需要下载一个puttygen.exe程序来实现密钥文件的生成，该文件在<a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html">putty客户端下载</a>页面也有提供。</p>
<p>如果putty使用的是.msi安装版本，在安装时会同时安装puttygen客户端，可以直接打开使用。</p>
<p>打开puttygen客户端，由于是将已有的pem文件转换成ppk文件，则需要点击Conversions -&gt; Import Key，导入已存在的密钥文件，界面如下：</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6326a8da78604b89872aa3e6cc22308b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>导入完成后可以针对密钥生成输入加密字符串，并确认字符串，最后使用Save private key将密钥保存到指定文件夹中。</p>
<h4 id="3-1-2-使用ppk密钥登录"><a href="#3-1-2-使用ppk密钥登录" class="headerlink" title="3.1.2 使用ppk密钥登录"></a>3.1.2 使用ppk密钥登录</h4><p>ppk格式的密钥文件生成并保存后，在putty的连接页面可以使用密钥进行登录。</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/227e10a0a2de47f1ac620ac835c7361f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<ol>
<li> 登录时需要在Session界面填写ip地址和端口号信息</li>
<li> 然后点击左侧Connection -&gt; SSH -&gt;Auth功能，在右侧界面中选择保存的密钥文件导入</li>
<li> 点击Open开始连接远程服务器</li>
<li> 连接开始后需要输入登录的用户名信息</li>
<li> 在用户名和导入的密钥文件验证成功后登录到远程服务器中</li>
</ol>
<h3 id="3-2-MobaXterm密钥连接"><a href="#3-2-MobaXterm密钥连接" class="headerlink" title="3.2 MobaXterm密钥连接"></a>3.2 MobaXterm密钥连接</h3><p>MobaXterm使用SSH密钥连接的过程和Putty基本一致，MobaXterm客户端已经提供了密钥生成的功能。</p>
<h4 id="3-2-1-密钥文件生成"><a href="#3-2-1-密钥文件生成" class="headerlink" title="3.2.1 密钥文件生成"></a>3.2.1 密钥文件生成</h4><p>在MobaXterm界面中，选择Tools -&gt; MobaKeyGen(SSH key generator)，会弹出密钥生成的界面，该界面和puttygen一样。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f41e828ba057405cab132b6a9e5f380d~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>在密钥生成页面中选择Conversions -&gt; Import key，导入本地的pem文件，并使用自定义的加密字符串，最后Save private key将密钥文件生成并保存在本地路径中。</p>
<h4 id="3-2-2-使用密钥登录"><a href="#3-2-2-使用密钥登录" class="headerlink" title="3.2.2 使用密钥登录"></a>3.2.2 使用密钥登录</h4><p>密钥文件生成后，我们在连接远程客户端时可以使用密钥的方式登录</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7a47c9d318946ae95d641e9b711196a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>如图为MobaXterm的连接界面，选择SSH连接类型后，选择其中的Advanced SSH setting标签，在其中配置密钥信息</p>
<ul>
<li>  勾选Use private key选项表示使用密钥登录</li>
<li>  右侧框中选择本地生成的MobaXterm密钥文件</li>
<li>  所有信息填写完成后，点击下方OK登录即可</li>
</ul>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>总的来讲，Putty客户端简洁好用，拥有远程连接的所有基本功能，足够开发使用；如果想要体验更加丰富的功能，可以尝试选择MobaXterm客户端；两者都是英文界面，但不影响基本功能的使用。</p>
]]></content>
  </entry>
  <entry>
    <title>chrome 插件食用指南！【亲测可用】【持续更新】</title>
    <url>/chrome-cha-jian-shi-yong-zhi-nan-chi-xu-geng-xin/</url>
    <content><![CDATA[<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0a9e070ff58d437a95ca1cbc365ec8f9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<p>Chrome 插件是 Chrome 浏览器一大特色，是一种可以增强 Chrome 浏览器功能的小型软件程序，可以实现改善用户体验、丰富浏览器功能、以及自定义浏览器界面等功能。</p>
<h2 id="下载和安装插件"><a href="#下载和安装插件" class="headerlink" title="下载和安装插件"></a>下载和安装插件</h2><p>Chrome 插件使用的前提是要有一个支持 chrome 插件的浏览器，然后就是在浏览器中进行插件的下载安装。chrome 插件的下载安装方式是多样的，详细操作可见如下几种方法，总能找到适合你的！</p>
<h3 id="Chrome-商店下载安装"><a href="#Chrome-商店下载安装" class="headerlink" title="Chrome 商店下载安装"></a>Chrome 商店下载安装</h3><p><a href="https://chrome.google.com/webstore/category/extensions?utm_source=ext_app_menu">Chrome 应用商店</a> ，无法有效访问页面请参考后两种使用方式</p>
<p>这是 Chrome 浏览器官方提供的应用商店，你可以在其中搜索基于 Chrome 浏览器的插件应用或主题等内容，实现在线下载安装。</p>
<p>在插件详情页面，只需要点击添加至 Chrome 按钮，等待插件下载完成后会自动安装到 Chrome 中。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/905fc18351ed4d9688eb6dee4b8465d9~tplv-k3u1fbpfcp-watermark.image" alt="插件详情"><br>安装完成后，可以点击浏览器右上角三个点按钮，选择【扩展程序功能】，然后点击【管理扩展程序】，或者直接在浏览器地址栏输入地址 <code>chrome://extensions/</code> 进入到浏览器插件页面，查看已安装的插件信息。</p>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ad1e161a362f4c1c87ad03f7171a2b66~tplv-k3u1fbpfcp-watermark.image" alt="扩展程序"></p>
<p>对于已安装成功的插件，可以在浏览器地址栏右侧插件栏处找到，在浏览器中使用鼠标左键点击既可以使用相应功能。如果插件栏处没有显示已安装的插件，则需要在扩展程序管理中设置插件固定到展示栏。</p>
<p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9f35d534e1744d92944ac3624dec339c~tplv-k3u1fbpfcp-watermark.image" alt="扩展程序展示"></p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/523992f5ef164aeb97fb86aeeff825f4~tplv-k3u1fbpfcp-watermark.image" alt="固定扩展程序"></p>
<h3 id="Edge-加载项"><a href="#Edge-加载项" class="headerlink" title="Edge 加载项"></a>Edge 加载项</h3><p>虽然是讲 Chrome 插件，但是也不得不提一下 Microsoft Edge 浏览器，在新版本中微软对 Edge 浏览器做了很多优化处理，并已支持 Chrome 插件的安装，可谓是国产不折腾用户的福音。</p>
<p><a href="https://microsoftedge.microsoft.com/addons/Microsoft-Edge-Extensions-Home">Edge 加载项</a></p>
<p>在 Edge 浏览器中打开上述 Edge 加载项页面，即进入 Microsoft 扩展程序应用商店，在其中可以搜索下载使用相应的扩展程序，使用方法与 Chrome 应用程序商店基本一致，可用插件数量也在不断丰富。</p>
<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d1df844632fd4ea28fa40ab750de91e2~tplv-k3u1fbpfcp-watermark.image" alt="Edge 加载项"></p>
<p>由于 Windows 系统下基本默认携带 Edge 浏览器，因此对于不爱折腾的用户，Edge 加载项安装扩展程序是不二之选。</p>
<p>如果在 Edge 加载项中没有找到需要的扩展程序，Edge 浏览器也支持与 Chrome 浏览器相同的离线安装功能，需要先下载扩展程序文件，然后再扩展程序管理页安装。</p>
<h3 id="离线安装插件"><a href="#离线安装插件" class="headerlink" title="离线安装插件"></a>离线安装插件</h3><p>前两种使用方式已然满足了绝大部分用户的使用，但是离线安装也是使用浏览器插件必不可少的一项功能，可以弥补在线安装带来的一些遗憾。</p>
<h4 id="当前好用的-Chrome-插件下载网站"><a href="#当前好用的-Chrome-插件下载网站" class="headerlink" title="当前好用的 Chrome 插件下载网站"></a>当前好用的 Chrome 插件下载网站</h4><p>请按照顺序放心食用！</p>
<ul>
<li>  <a href="https://chrome.zzzmh.cn/#/index">极简插件_Chrome 扩展插件商店_优质crx应用下载</a></li>
<li>  <a href="https://crxdl.com/">下载 Chrome 扩展插件 Crx 离线安装包</a></li>
<li>  <a href="https://www.crx4chrome.com/">Crx4Chrome 页面复古但资源丰富</a></li>
<li>  <a href="https://www.gugeapps.net/">咕哥扩展下载</a></li>
<li>  <a href="https://extfans.com/">extfans</a></li>
</ul>
<p>仍以 Chrome 浏览器离线安装为例，</p>
<ul>
<li>  离线安装首先要准备需要安装的程序文件，可以在上述提供的 Chrome 插件下载网站中搜索下载指定插件</li>
<li>  浏览器地址栏中输入 “chrome://extensions”，进入到扩展程序页面，</li>
<li>  离线安装时需要加载本地文件，因此要在右上角开启【开发者模式】开关，然后浏览器会显示【加载已解压的扩展程序】等三个按钮，</li>
<li>Chrome 浏览器支持离线加载 <code>.crx</code> 和解压后文件目录<ul>
<li>  <code>.crx</code> 文件即扩展程序标准文件格式，可以直接鼠标拖动到浏览器，会显示拖动安装的提示，释放后浏览器自动安装插件</li>
<li>  解压文件目录一般指程序源码文件目录或 <code>.crx</code> 转 <code>.zip</code> 并解压后的文件夹，需要通过【加载已解压的扩展程序】选择指定目录进行安装</li>
</ul>
</li>
<li>  安装完成后，后续的使用与在线安装一致，可以在插件栏处配置使用</li>
</ul>
<h2 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h2><h3 id="管理插件"><a href="#管理插件" class="headerlink" title="管理插件"></a>管理插件</h3><p>安装插件后，需要对其进行有效的管理，否则过多的浏览器插件不仅没有起到便捷的作用，反而会让浏览器运行更加吃力。浏览器提供的插件管理功能如下：</p>
<ul>
<li>  启用/禁用插件：在 Chrome 扩展程序页面中，可以通过切换插件旁边的开关按钮来启用或禁用插件，禁用插件后，它将不会在浏览器中显示或运行。</li>
<li>  卸载插件：如果你想完全删除一个插件，可以在 Chrome 扩展程序页面中找到该插件，并点击旁边的垃圾桶图标，确认删除后，插件将被彻底移除。</li>
<li>  更新插件：当插件开发者会发布更新版本时，可以在 Chrome 扩展程序页面中点击 “更新” 按钮来更新已安装的插件，以修复漏洞或添加新功能。</li>
</ul>
<h3 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h3><p>使用合适 Chrome 插件可以为浏览器增加各种功能和特性，提高上网体验和办公效率，推荐几款好用的浏览器插件：</p>
<ul>
<li>  扩展管理器（Extension Manager）：帮助你更好的管理 Chrome 扩展程序，简单操作，不需要每次再进入浏览器扩展页面进行管理。</li>
<li>  广告终结者：屏蔽网页上的广告，提供更干净的浏览体验，上网必备！</li>
<li>  OneTab：浏览器多标签管理神器，节省高达95％的内存，并减轻标签页混乱现象。</li>
<li>  划词翻译：浏览网页时快速翻译文本，消除语言障碍。</li>
<li>  捕捉网页截图：截图工具插件，快速捕捉整个网页或部分页面，并进行标注或保存。</li>
</ul>
<p>更多好玩好用的浏览器插件，请持续关注哦~</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Chrome 插件是个性化定制 Chrome 浏览器的强大工具，通过安装、管理和使用插件，可以提高浏览体验，增加功能和效率。</p>
<p>安装 Chrome 插件的操作步骤如下：</p>
<ol>
<li> 打开 Chrome 浏览器并在地址栏中输入 “chrome://extensions”，然后按下 Enter 键，</li>
<li> 在打开的页面上，你会看到一个名为 “Extensions” 的页面，显示了已安装的插件和扩展程序，</li>
<li> 在左上角的页面上，点击 “Chrome 网上应用店” 的链接，进入 Chrome 网上应用店，</li>
<li> 在 Chrome 网上应用店中搜索需要的插件，</li>
<li> 找到你想要安装的插件后，点击插件的名称或图标，进入插件详细信息页面，</li>
<li> 在插件详细信息页面上点击 “添加至 Chrome” 的蓝色按钮，安装插件到 Chrome 浏览器中，</li>
<li> 如果 Chrome 应用商店无法打开或使用 Edge 浏览器，可以参考对应浏览器插件下载方法，或者使用离线下载功能安装插件，</li>
<li> 安装完成后，可以在浏览器的右上角看到插件的图标，就可以使用了。</li>
</ol>
]]></content>
      <categories>
        <category>chrome</category>
      </categories>
      <tags>
        <tag>chrome 插件</tag>
        <tag>持续更新</tag>
      </tags>
  </entry>
  <entry>
    <title>【chrome 插件】OneTab ：管理浏览器标签页的终极解决方案</title>
    <url>/chrome-cha-jian-onetab-guan-li-liu-lan-qi-biao-qian-ye-de-zhong-ji-jie-jue-fang-an/</url>
    <content><![CDATA[<p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/355a65b2a5cc48eabf9d741a50860ecd~tplv-k3u1fbpfcp-watermark.image" alt="oneTab.png"></p>
<p>浏览器已经成为电脑中必不可少的应用软件，而为了用户使用方便，市面上所有的浏览器基本都具备了多标签的功能，这让用户在同时打开多个网页时不需要切换浏览器，只需要点击对应的标签即可。</p>
<p>chrome 浏览器也不例外，作为电脑重度使用用户，每天打开无数的浏览器窗口不仅为电脑带来巨大压力，给人的身心也会增加不少负担。万一电脑性能一般，众多的浏览器标签使得电脑不堪重负死机了，那真的是欲哭无泪。</p>
<p>尽管过多的标签页不仅占用了宝贵的系统资源，还导致了浏览器的混乱和难以管理，但是，往往由于工作原因，很多窗口不得不开，而电脑性能又跟不上，这个时候就需要一个工具来帮忙管理浏览器标签。</p>
<h3 id="OneTab"><a href="#OneTab" class="headerlink" title="OneTab"></a>OneTab</h3><p>顾名思义，OneTab 代表只有一个（One）标签（Tab），OneTab 插件旨在节省浏览器 95% 的内存占用，帮助我们管理浏览器，让浏览器只打开一个标签。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd33567b6da64db784fab76210fc798e~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<p>OneTab 是一款简单而有效的工具，旨在帮助用户以整洁、有组织的方式管理浏览器标签页。它能将所有打开的标签页合并到一个页面中，并提供了一些额外的功能，使得标签页的管理变得轻而易举。</p>
<p>对于经常打开大量的浏览器标签页来处理各种任务、阅读文章或者做研究，OneTab 这款强大的 Chrome 插件就能派上用场了。</p>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><h4 id="1-标签页合并"><a href="#1-标签页合并" class="headerlink" title="1. 标签页合并"></a>1. 标签页合并</h4><p>OneTab 的核心功能是将所有打开的标签页合并到一个页面中。当浏览器标签过多导致页面混乱不堪时，只需点击 OneTab 的图标，它会立即将所有标签页转移到一个页面中，并以列表的形式展示出来，这样就可以一目了然地查看和管理所有标签页。</p>
<h4 id="2-标签页恢复和导出"><a href="#2-标签页恢复和导出" class="headerlink" title="2. 标签页恢复和导出"></a>2. 标签页恢复和导出</h4><p>OneTab 不仅可以整理标签页，还能够方便地进行标签页的恢复和导出。当需要重新打开之前保存的标签页时，只需点击 OneTab 页面上的恢复按钮，所有的标签页将会重新打开。此外，还可以将整个标签页列表导出为一个网页链接，以便在其他设备或浏览器中使用。</p>
<h4 id="3-标签页分组和命名"><a href="#3-标签页分组和命名" class="headerlink" title="3. 标签页分组和命名"></a>3. 标签页分组和命名</h4><p>OneTab 还提供了标签页分组和命名的功能，使得管理标签页更加灵活和个性化。可以在管理页面将相关的标签页分组，并为每个分组设置一个名称，以便更好地组织和查找。</p>
<h4 id="4-快捷键和自定义设置"><a href="#4-快捷键和自定义设置" class="headerlink" title="4. 快捷键和自定义设置"></a>4. 快捷键和自定义设置</h4><p>为了提高用户体验，OneTab 还支持快捷键和自定义设置。可以通过设置自己喜欢的快捷键来快速打开或关闭 OneTab，以及执行其他常用操作。</p>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="1-下载插件"><a href="#1-下载插件" class="headerlink" title="1. 下载插件"></a>1. 下载插件</h4><ul>
<li>  谷歌商店下载</li>
</ul>
<p>谷歌商店可以一键下载并自动安装至 Chrome 浏览器。</p>
<ul>
<li>  离线下载</li>
</ul>
<p>如果链接不可访问，可关注本公众号后回复关键字【OneTab】，已经为您打包好了离线版 OneTab 插件，下载后只需要在 Chrome 浏览器扩展程序页面手动安装即可使用。</p>
<p>如果对 Chrome 插件安装仍有疑问，可以在公众号后台回复关键字【Chrome 插件】，会为您提供详细的插件安装说明。</p>
<p>在浏览器看到如下插件内容表示已经安装成功。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d4f77e3c905b45038d54caba5054b333~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p>
<h4 id="2-使用插件"><a href="#2-使用插件" class="headerlink" title="2. 使用插件"></a>2. 使用插件</h4><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bd532a21043d47679e6d7704d5581261~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<p>如上图中打开多个标签的浏览器，在已经安装 OneTab 的浏览器中，页面右键可以选择 OneTab 插件选项，选择合适的功能来管理浏览器标签。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b21239c51dde4de3bf172e538338ea36~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<p>整理之后的管理页面如下：</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/928f85256fb146229d250933534e6639~tplv-k3u1fbpfcp-zoom-1.image" alt="在这里插入图片描述"></p>
<p>在 OneTab 管理页面中，可以对已收录的标签进行重新打开、删除等操作。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>总之，OneTab 是一款功能强大、易于使用的 Chrome 插件，为用户提供了一个整洁、有组织的方式来管理浏览器标签页。</p>
<p>OneTab 的标签页合并、恢复和导出功能，以及标签页分组和命名功能，使得标签页的管理变得非常简单和高效。</p>
<p>如果你是一个经常打开大量标签页的用户，那么 OneTab 绝对是你的终极解决方案！安装 OneTab 并试试吧！你会发现它能够极大地提升你的浏览器使用体验。</p>
]]></content>
  </entry>
  <entry>
    <title>万字长文带你逐步实现 SpringBoot 统一返回结果类</title>
    <url>/wan-zi-chang-wen-dai-ni-zhu-bu-shi-xian-springboot-tong-yi-fan-hui-jie-guo-lei/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="开发背景"><a href="#开发背景" class="headerlink" title="开发背景"></a>开发背景</h2><p>现如今前后端分离已经是项目开发的主流方式，在前后端分离开发情形下，少不了前端和后端之间的友好交流，为了避免上升为物理交流，项目中必须要有一套规范有效的前后端协议格式。</p>
<p>后端开发的不同服务、不同业务处理并返回不同类型的数据，这不仅会增加巨大工作量来进行协议的输出，数据格式的多样化对于前端同事来讲也是一个灾难，这就需要对后端服务接口的返回格式定义成统一规范的结果类型。</p>
<p>前后端开发过程中数据交互规范化是一件非常重要的事情，不仅可以减少前后端交互过程中出现的问题，也让代码逻辑更加具有条理。</p>
<h2 id="初始篇：从封装返回结果说起"><a href="#初始篇：从封装返回结果说起" class="headerlink" title="初始篇：从封装返回结果说起"></a>初始篇：从封装返回结果说起</h2><h3 id="返回结果类基本特征"><a href="#返回结果类基本特征" class="headerlink" title="返回结果类基本特征"></a>返回结果类基本特征</h3><p>对于后端的返回数据，考虑将格式统一后返回，在开发大量后端服务接口之后，根据开发经验可以总结得到，请求一个接口时需要关注的指标有：</p>
<ul>
<li>响应状态码，即请求接口返回状态码，如 HTTP 请求中的 200、304、500 等状态</li>
<li>响应结果描述，有些接口请求成功或失败需要返回描述信息供前端展示</li>
<li>响应结果数据，大部分的接口都会返回后端获取的数据，并以列表的形式展示的前端页面中</li>
<li>是否成功：在实际项目中请求接口时，首先要关注的应该是接口的请求是否成功，然后才会去关注成功返回数据或者错误代码和信息，在统一数据中可以加入请求是否成功的标识，当然接口的成功与否也可以根据状态码可以判断，可以根据实际需求考虑是否定义结果状态</li>
<li>其他标识：为了显示更多接口调用的信息，可能会根据实际的业务需求加入接口调用的时间信息等。</li>
</ul>
<p>除了以上属性特征外，返回结果类在定义时还应该满足：</p>
<ol>
<li>属性私有化，使用 get/set 方法来操作属性值</li>
<li>构造器私有化，外部只可以调用方法，初始化要在类内部完成</li>
<li>由于外部需要直接调用方法，因此方法要定义为静态方法</li>
</ol>
<h3 id="松散的自定义返回结果"><a href="#松散的自定义返回结果" class="headerlink" title="松散的自定义返回结果"></a>松散的自定义返回结果</h3><p>根据上述对返回结果基本特征的分析，我们可以定义一个如下代码所示为的返回结果类</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 是否请求成功，本文使用 code = 10000 特指成功，其余为失败，因此不再冗余 success</span>
    <span class="token comment" spellcheck="true">// private Boolean success;</span>
    <span class="token comment" spellcheck="true">//请求时间，暂时不需要，可根据需求定义</span>
    <span class="token comment" spellcheck="true">//private long timestamp;</span>

    <span class="token comment" spellcheck="true">//构造器私有</span>
    <span class="token keyword">private</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">//get/set 方法</span>
    <span class="token keyword">public</span> Boolean <span class="token function">getSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> success<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSuccess</span><span class="token punctuation">(</span>Boolean success<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>success <span class="token operator">=</span> success<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> String <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> code<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span>String code<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> String <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDesc</span><span class="token punctuation">(</span>String desc<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> Object <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> data<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setData</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>


    <span class="token comment" spellcheck="true">/**
     * 返回通用成功
     * @return Result
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token string">"20000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"请求成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 返回通用失败，未知错误
     * @return Result
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">20001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"请求失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="lombok：代码简洁利器"><a href="#lombok：代码简洁利器" class="headerlink" title="lombok：代码简洁利器"></a>lombok：代码简洁利器</h3><p>为了减少 get/set 等代码内容，引入了 lombok 工具，并使用注解 @Data 标注，代表当前类默认生成 set/get 方法</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 返回通用成功
     * @return Result
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token string">"20000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"请求成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 返回通用失败，未知错误
     * @return Result
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token number">20001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span><span class="token string">"请求失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="结果类使用方法"><a href="#结果类使用方法" class="headerlink" title="结果类使用方法"></a>结果类使用方法</h3><p>定义返回结果类后，Controller 对应的服务方法中就可以使用其作为返回结果类型，如下</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 处理逻辑在这里</span>
    String result <span class="token operator">=</span> <span class="token string">"返回结构或"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 封装返回结果</span>
    Result result <span class="token operator">=</span> Result<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    result<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="进阶篇：枚举错误类和链式结果来加盟"><a href="#进阶篇：枚举错误类和链式结果来加盟" class="headerlink" title="进阶篇：枚举错误类和链式结果来加盟"></a>进阶篇：枚举错误类和链式结果来加盟</h2><h3 id="实际面临的小问题"><a href="#实际面临的小问题" class="headerlink" title="实际面临的小问题"></a>实际面临的小问题</h3><p>上述返回结果定义内容，尽管满足了基本需求，但是在使用时仍存在着如下的问题</p>
<ol>
<li>返回结果需要先初始化，然后再进行结果赋值处理，相当于返回值仍需要手动添加，这样即增加了数据错误的风险，并且并没有减少实际代码量，不能凸显统一封装带来的好处。</li>
<li>上述封装类中，分别定义了返回成功和失败的静态方法，但是对于失败的结果可能是多样的，不可能针对每种失败分别定义对应的静态方法，这样即繁琐又不现实。</li>
</ol>
<p>为了解决上述问题，对现有的结果类进行优化处理，采用方法有</p>
<ol>
<li>使用返回对象本身的方式来简化对象初始化和赋值步骤，简洁代码，突出重点</li>
<li>采用返回结果枚举类的方式将所有可能返回的结果定义为枚举类常量，在返回结果类中使用对应的枚举类返回创建，以此处理异常结果多样性问题</li>
</ol>
<h3 id="定义返回结果枚举类"><a href="#定义返回结果枚举类" class="headerlink" title="定义返回结果枚举类"></a>定义返回结果枚举类</h3><p>首先定义返回结果枚举类，枚举类的使用可以进一步规范返回结果类中定义的属性取值。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> ResultCodeEnum <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token function">SUCCESS</span><span class="token punctuation">(</span><span class="token number">20000</span><span class="token punctuation">,</span><span class="token string">"响应成功"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">UNKNOWN_ERROR</span><span class="token punctuation">(</span><span class="token number">20001</span><span class="token punctuation">,</span><span class="token string">"未知错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">PARAM_ERROR</span><span class="token punctuation">(</span><span class="token number">20002</span><span class="token punctuation">,</span><span class="token string">"参数错误"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">NULL_POINT_ERROR</span><span class="token punctuation">(</span><span class="token number">20003</span><span class="token punctuation">,</span><span class="token string">"空指针异常"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">HTTP_CLIENT_ERROR</span><span class="token punctuation">(</span><span class="token number">20003</span><span class="token punctuation">,</span><span class="token string">"客户端连接异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 响应状态码
     */</span>
    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 响应描述信息
     */</span>
    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>

    <span class="token function">ResultCodeEnum</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">,</span> String desc<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>@Getter 注解也是 lombok 提供的注解，代表为当前类属性仅生成 get 方法，枚举类不需要 set 方法，属性赋值通过定义枚举对象或者构造方法实现。</p>
<h3 id="状态枚举以及链式返回实现"><a href="#状态枚举以及链式返回实现" class="headerlink" title="状态枚举以及链式返回实现"></a>状态枚举以及链式返回实现</h3><p>实现链式返回需要定义属性的 set 方法返回结果类型为当前结果类，并在方法中返回对象本身 <code>this</code> 。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 使用枚举类设置返回结果
     * @param resultCodeEnum
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">setResult</span><span class="token punctuation">(</span>ResultCodeEnum resultCodeEnum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>resultCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span>resultCodeEnum<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

     <span class="token comment" spellcheck="true">/**
     * 返回通用成功
     * @return Result
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 链式处理</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span>ResultCodeEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 返回通用失败，未知错误
     * @return Result
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">// 链式处理</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span>ResultCodeEnum<span class="token punctuation">.</span>UNKNOWN_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 返回结果类，使用链式编程
     * 自定义成功标识
     * @param 
     * @return
     */</span>
     <span class="token keyword">public</span> Result <span class="token function">setSuccess</span><span class="token punctuation">(</span>Boolen success<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 返回结果类，使用链式编程
     * 自定义状态码
     * @param 
     * @return
     */</span>
     <span class="token keyword">public</span> Result <span class="token function">setCode</span><span class="token punctuation">(</span>Integer code<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 返回结果类，使用链式编程
     * 自定义返回结果描述
     * @param 
     * @return
     */</span>
     <span class="token keyword">public</span> Result <span class="token function">setDesc</span><span class="token punctuation">(</span>String desc<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 返回结果类，使用链式编程
     * 自定义结果数据
     * @param 
     * @return
     */</span>
     <span class="token keyword">public</span> Result <span class="token function">setData</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="lombok：我又来了"><a href="#lombok：我又来了" class="headerlink" title="lombok：我又来了"></a>lombok：我又来了</h3><p>对于链式返回的处理 lombok 也提供了一个 <code>@Accessors(chain = true)</code> 代表为 set 方法实现链式返回结构，使用注解实现如下</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> Integer code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 使用枚举类设置返回结果
     * @param resultCodeEnum
     * @return
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">setResult</span><span class="token punctuation">(</span>ResultCodeEnum resultCodeEnum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span>resultCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result<span class="token punctuation">.</span><span class="token function">setDesc</span><span class="token punctuation">(</span>resultCodeEnum<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

     <span class="token comment" spellcheck="true">/**
     * 返回通用成功
     * @return Result
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span>ResultCodeEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">/**
     * 返回通用失败，未知错误
     * @return Result
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> Result <span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span>ResultCodeEnum<span class="token punctuation">.</span>UNKNOWN_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如上，整个返回结果类定义已经比较精简，通过 @Data 和 @Accessors(chain = true) 注解实现了get/set 方法和链式返回，并定义了通过枚举类创建对象的方法，并提供了直接返回的成功和失败方法。</p>
<h3 id="结果类使用展示"><a href="#结果类使用展示" class="headerlink" title="结果类使用展示"></a>结果类使用展示</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 处理逻辑在这里</span>
    String result <span class="token operator">=</span> <span class="token string">"返回结构或"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 封装返回结果，使用默认成功结果</span>
    <span class="token comment" spellcheck="true">// return Result.ok().setData(result);</span>

    <span class="token comment" spellcheck="true">// 封装返回结果，使用默认失败结果</span>
    <span class="token comment" spellcheck="true">// return Result.error();</span>

    <span class="token comment" spellcheck="true">// 封装返回结果，使用自定义枚举类</span>
    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span>ResultCodeEnum<span class="token punctuation">.</span>NULL_POINT_ERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="最终篇：建造者模式有话说"><a href="#最终篇：建造者模式有话说" class="headerlink" title="最终篇：建造者模式有话说"></a>最终篇：建造者模式有话说</h2><p>进阶之后的返回结果类已经很简洁，并且使用也比较方便，已经是一个完整的结果类了，可以满足大部分场景下的使用。</p>
<p>但是，对于代码开发来讲，就是要不断优化我们的代码结构，使之无论从看起来、还是用起来、以及讲起来都要更加的合理且优雅，那么这个时候，设计模式就有话说了。</p>
<p>在进阶篇中，我们使用了结果枚举 + 链式返回，已经有了建造者模式的影子了，结果枚举就类似于建造者对象的简陋版，链式返回在建造者对象属性赋值中也有使用。</p>
<p>接下来看一下使用建造者模式来实现返回结果类的方法</p>
<h3 id="建造者和结果对象，相亲相爱的一家人"><a href="#建造者和结果对象，相亲相爱的一家人" class="headerlink" title="建造者和结果对象，相亲相爱的一家人"></a>建造者和结果对象，相亲相爱的一家人</h3><p>标准的建造者模式认为，需要定义抽象接口来定义建造者的行为，并实现类来与目标对象关联。</p>
<p>为了方便及展示其密切关联性，我们实现一个简化版的建造者模式，并将建造者对象作为结果对象的内部静态类实现。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> String code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token function">Result</span><span class="token punctuation">(</span>ResultBuilder resultBuilder<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> resultBuilder<span class="token punctuation">.</span>code<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> resultBuilder<span class="token punctuation">.</span>desc<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> resultBuilder<span class="token punctuation">.</span>data<span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 定义静态方法创建 ResultBuilder 类，否则使用时需要 new Result.ResultBuilder() </span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> ResultBuilder <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ResultBuilder</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> String code<span class="token punctuation">;</span>
        <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>
        <span class="token keyword">private</span> T data<span class="token punctuation">;</span>

        <span class="token keyword">public</span> ResultBuilder <span class="token function">code</span><span class="token punctuation">(</span>String code<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> ResultBuilder <span class="token function">desc</span><span class="token punctuation">(</span>String desc<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> ResultBuilder <span class="token function">data</span><span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> ResultBuilder <span class="token function">resultCodeEnum</span><span class="token punctuation">(</span>ResultCodeEnum resultCodeEnum<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>success <span class="token operator">=</span> resultCodeEnum<span class="token punctuation">.</span><span class="token function">getSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> resultCodeEnum<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> resultCodeEnum<span class="token punctuation">.</span><span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> Result <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> Result <span class="token function">successBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resultCodeEnum</span><span class="token punctuation">(</span>ResultCodeEnum<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> Result <span class="token function">errorBuild</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">resultCodeEnum</span><span class="token punctuation">(</span>ResultCodeEnum<span class="token punctuation">.</span>UNKNOWN_ERROR<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>

<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用建造者模式实现返回结果类，可以避免直接对返回结果类属性的修改，而是通过定义的建造者对象 builder 来赋值，保证了结果对象的数据安全。 </p>
<h3 id="内部静态建造者类使用"><a href="#内部静态建造者类使用" class="headerlink" title="内部静态建造者类使用"></a>内部静态建造者类使用</h3><p>对于内部静态类创建时，需要携带其外部类名称才可以使用，如</p>
<pre class="line-numbers language-java"><code class="language-java">Result result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Result<span class="token punctuation">.</span>ResultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>为了实际使用方便，可以在外部类中定义静态方法进行 builder 对象的创建，即 builder() 方法</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用时创建方法：Result.builder() </span>
<span class="token keyword">public</span> <span class="token keyword">static</span> ResultBuilder <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResultBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>此时创建方法可以写成</p>
<pre class="line-numbers language-java"><code class="language-java">Result result <span class="token operator">=</span> Result<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>是不是很熟悉！在许多优秀的框架使用过程中，重要对象的创建方式就是类似上述的建造者链式创建方式。</p>
<h3 id="lombok：-继续上分"><a href="#lombok：-继续上分" class="headerlink" title="lombok： 继续上分"></a>lombok： 继续上分</h3><p>对于建造者模式的实现，lombok 也提供了实现方案，可以通过 <code>@Builder</code> 注解为类实现内部静态的建造者类，与上述代码基本一致，展现代码可以更简洁。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Builder</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Result</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> String code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> String desc<span class="token punctuation">;</span>
    <span class="token keyword">private</span> Object data<span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>太简单了有木有！</p>
<p>@Builder 注解实现的建造者模式是最基本的形式，使用时需要注意</p>
<ol>
<li>@Builder 注解只会为 Result 类定义全参数构造方法供 buidler 使用，没有无参构造，如果需要要自己实现或使用 @AllArgsConstructor 和 @NoArgsConstructor 注解</li>
<li>上述代码中没有使用 @Data 注解，Result 对象的属性不可修改，可以通过属性名称获取，如需要可以自行添加</li>
<li>@Builder 注解实现的建造者模式虽然简单，但是太简单，无法使用我们进阶篇提到的枚举结果来实现返回对象，因此需要手动实现对应创建方法</li>
</ol>
<p>实际使用过程中，可以根据需要选择或定义适合的返回结果类</p>
<h3 id="接口数据格式一览"><a href="#接口数据格式一览" class="headerlink" title="接口数据格式一览"></a>接口数据格式一览</h3><p>定义好返回结果枚举类和最终的返回结果类后，在 controller 控制器中创建一个接口并返回统一结果类信息</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> String <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">// 处理逻辑在这里</span>
    String result <span class="token operator">=</span> <span class="token string">"返回结果"</span><span class="token punctuation">;</span>

    <span class="token comment" spellcheck="true">// 封装返回结果</span>
    <span class="token keyword">return</span> Result<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>通过 http 请求接口，可以得到如下格式的返回结果：</p>
<pre class="line-numbers language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">20000</span><span class="token punctuation">,</span>
  <span class="token property">"desc"</span><span class="token operator">:</span> <span class="token string">"查询成功"</span><span class="token punctuation">,</span>
  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token string">"返回结果"</span><span class="token punctuation">;</span>
&amp;#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样，一个统一的结果返回类就创建成功了，在项目的开发过程中可以使用自定义的统一返回结果，如果使用了枚举类，只需要将返回结果枚举类维护起来，使用非常的方便哦。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>通过逐步的功能丰富，实现了一个满足基本使用需求的封装结果类，对项目开发过程会提供很大的帮助，提升编码效率并规范代码格式，并树立正确规范的代码观，希望每一位 coder 都能成长为参天大树，为行业添砖加瓦。</p>
]]></content>
  </entry>
  <entry>
    <title>SpringBoot 项目中 Lombok 的使用</title>
    <url>/xiang-mu-kai-fa-zhong-lombok-gong-ju-de-shi-yong/</url>
    <content><![CDATA[<h2 id="Lombok-介绍"><a href="#Lombok-介绍" class="headerlink" title="Lombok 介绍"></a>Lombok 介绍</h2><p>Lombok 官方网站地址：<a href="https://projectlombok.org/">https://projectLombok.org</a></p>
<p>Lombok 是一个 Java 的类库，可以通过注解等方式插入到项目代码中，来增加 Java 代码的功能，只需要通过指定的注解，就可以实现指定的功能，极大的简化代码编写。</p>
<p>Lombok 能通过注解的方式，在编译期间自动为类属性生成构造函数、get/set 方法等内容，保持代码简洁的情况下保证类信息的完整性。</p>
<h2 id="Lombok-引入"><a href="#Lombok-引入" class="headerlink" title="Lombok 引入"></a>Lombok 引入</h2><p>Lombok 插件支持 IDEA 插件安装，安装插件后可以在代码中更好的使用 Lombok 带来的增强功能，此外，Lombok 还可以在 Eclipse、MyEclispe 等编译器中安装使用，以此保证 Lombok 注解在编译阶段发挥作用。</p>
<h3 id="IDEA-安装插件"><a href="#IDEA-安装插件" class="headerlink" title="IDEA 安装插件"></a>IDEA 安装插件</h3><ol>
<li>通过文件 -&gt; 设置，找到 Plugins，搜索 Lombok 插件，下载安装后重启 IDEA 生效。</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1690985889408_1690985889408.png" alt="image.png"></p>
<ol start="2">
<li>安装 Lombok 插件后，可与在插件设置中配置是否开启，在 File -&gt; Setting &gt; Build，Execution，Deployment 下找到 Annotation Processors，勾选 Enable annotation processing 即可。</li>
</ol>
<p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3735f01cad734d78a73487c89d243be5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p>
<h3 id="1-2-maven-引入依赖"><a href="#1-2-maven-引入依赖" class="headerlink" title="1.2 maven 引入依赖"></a>1.2 maven 引入依赖</h3><p>Lombok 还可以通过 maven 坐标引入相关依赖信息</p>
<pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Lombok依赖--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectLombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>Lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="2-Lombok常用注解"><a href="#2-Lombok常用注解" class="headerlink" title="2. Lombok常用注解"></a>2. Lombok常用注解</h2><h3 id="Data-注解"><a href="#Data-注解" class="headerlink" title="@Data 注解"></a>@Data 注解</h3><p>Lombok 的 @Data 注解可以说是使用最频繁的，@Data 注解标注在一个类上，可以为当前类属性自动生成对应的 getter()、setter()、toString() 等方法，大大减少了开发过程的代码量，让类定义更加简洁。</p>
<p>Lombok 中还有 <code>@Getter</code>/<code>@Setter</code>/<code>@ToString</code> 三个独立的注解，用于类中更精细的控制。</p>
<h3 id="Log4j-注解"><a href="#Log4j-注解" class="headerlink" title="@Log4j 注解"></a>@Log4j 注解</h3><p>在类中进行代码开发操作时，如果想要输出日志，则需要在类种进行如下的定义：</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Controller<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这样对于项目中繁多的类，每个都需要单独创建日志对象，太浪费时间。</p>
<p>如果项目使用 Lombok ，就可以使用 @Log4j 注解来解决这个问题，只需要在类上使用 @Log4j 注解，就会自动创建一个名为 log 的 Logger 对象，可以直接使用 log 对象进行日志输出。</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@log4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="NoArgsConstructor-AllArgsConstructor"><a href="#NoArgsConstructor-AllArgsConstructor" class="headerlink" title="@NoArgsConstructor / @AllArgsConstructor"></a>@NoArgsConstructor / @AllArgsConstructor</h3><ul>
<li><p>@NoArgsConstructor 代表为当前类生成一个无参构造方法；</p>
</li>
<li><p>@AllArgsConstructor 则是生成一个所有参数的构造方法</p>
</li>
</ul>
<h3 id="NonNull"><a href="#NonNull" class="headerlink" title="@NonNull"></a>@NonNull</h3><p>@NonNull 注解可以用于字段或者方法的参数，用来表示当前字段或参数不允许为 null，如果为 null 会抛出异常信息。</p>
<h3 id="Accessors-注解"><a href="#Accessors-注解" class="headerlink" title="@Accessors 注解"></a>@Accessors 注解</h3><p>@Data 注解可以为类的属性自动生成 getter/setter 等方法</p>
<p>而使用 @Accessors 注解可以用于控制类自动生成的 getter 和 setter 方法的形式，</p>
<p>@Accessors 注解可以设置的参数有：</p>
<ul>
<li><code>@Accessors(fluent = true)</code>，代表 getter 和 setter 方法名都是属性名，且s etter 方法返回当前对象</li>
</ul>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>fluent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
     <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
     <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
     
     <span class="token comment" spellcheck="true">// 生成的 getter 和 setter 方法如下，方法体略</span>
     <span class="token comment" spellcheck="true">//方法名与属性名相同，根据参数区分 get 和 set，且 setter 方法返回类对象本身</span>
     <span class="token keyword">public</span> Integer <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
     <span class="token keyword">public</span> User <span class="token function">id</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
     <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
     <span class="token keyword">public</span> User <span class="token function">name</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<ul>
<li><p><code>@Accessors(chain = true)</code>，仅代表 setter 方法返回当前对象，方法名称为默认驼峰类型</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
   <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>
   <span class="token keyword">private</span> String name<span class="token punctuation">;</span>
   
   <span class="token comment" spellcheck="true">// 生成的 setter 方法如下，方法体略，get方法略</span>
   <span class="token keyword">public</span> User <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> User <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p><code>@Accessors(prefix = &quot;f&quot;)</code>，代表 getter 和 setter 方法会忽略属性中的指定 <strong>“f”前缀</strong> （满足驼峰命名）</p>
<pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"f"</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>
   <span class="token keyword">private</span> Integer fId<span class="token punctuation">;</span>
   <span class="token keyword">private</span> String fName<span class="token punctuation">;</span>
   
   <span class="token comment" spellcheck="true">// 生成的getter和setter方法如下，方法体略</span>
   <span class="token keyword">public</span> Integer <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">id</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">name</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>
<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<p><strong>注意：</strong> @Accessors 注解只是对 setter 和 getter 方法形式进行控制，仍然需要使用 Lombok 的 @Data注解来自动生成 getter 和 setter 方法。</p>
<h3 id="Builder"><a href="#Builder" class="headerlink" title="@Builder"></a>@Builder</h3><p>作用于类上，将类转变为建造者模式。</p>
<p>@Builder 注解单独使用就能完成建造者模式的实现，不需要使用 @Data 注解配合。</p>
<p>需要注意的是，在使用 @Builder 注解标注的类，默认只会定义全参数构造函数，如果想要定义无参构造方法，则需要与 @AllArgsConstructor/@NoArgsConstructor 注解配合使用。</p>
]]></content>
  </entry>
  <entry>
    <title>Ditto：Windows 系统剪切板增强工具</title>
    <url>/ditto-windows-xi-tong-jian-qie-ban-zeng-qiang-gong-ju/</url>
    <content><![CDATA[<h2 id="什么是-Ditto-软件？"><a href="#什么是-Ditto-软件？" class="headerlink" title="什么是 Ditto 软件？"></a>什么是 Ditto 软件？</h2><p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1692028387273_1692028387273.png" alt="logo"></p>
<h3 id="Ditto-基本介绍"><a href="#Ditto-基本介绍" class="headerlink" title="Ditto 基本介绍"></a>Ditto 基本介绍</h3><p>Ditto 是一款十分好用的剪贴板管理工具，可以轻松地管理的剪贴板历史记录，支持 Windows 操作系统，并且是免费的开源软件。</p>
<p>Ditto 软件可以在不同的应用程序之间进行批量的复制和粘贴文本、图像、文件等内容，同时还可以保存复制的历史内容，方便随时查看和使用。</p>
<p>在 Windows 系统中使用 Ditto 可以高效的进行文本处理工作，简直是居家办公必备软件！</p>
<h3 id="Ditto-软件特点"><a href="#Ditto-软件特点" class="headerlink" title="Ditto 软件特点"></a>Ditto 软件特点</h3><p>Ditto 软件的主要特点包括如下内容：</p>
<ol>
<li><p>剪贴板历史记录，Ditto 可以保存你的剪贴板历史记录，包括文本、图像、文件等内容，方便随时查看和使用。</p>
</li>
<li><p>多种数据格式支持，Ditto 支持多种数据格式，包括文本、图像、文件等，可以在不同的应用程序之间复制和粘贴各种不同类型的内容。</p>
</li>
<li><p>快捷键操作，Ditto 支持快捷键操作，可以快速访问和使用剪贴板历史记录。</p>
</li>
<li><p>自定义设置，Ditto 支持自定义设置，可以根据自己的需求来配置软件，包括剪贴板历史记录的最大数量、数据格式的优先级等。</p>
</li>
</ol>
<h2 id="如何下载安装-Ditto-软件？"><a href="#如何下载安装-Ditto-软件？" class="headerlink" title="如何下载安装 Ditto 软件？"></a>如何下载安装 Ditto 软件？</h2><h3 id="Ditto-下载"><a href="#Ditto-下载" class="headerlink" title="Ditto 下载"></a>Ditto 下载</h3><p>Ditto 软件是免费开源的，可以直接到官网地址中下载软件安装包，官网地址：<a href="https://ditto-cp.sourceforge.io/">https://ditto-cp.sourceforge.io/</a> 。</p>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1692027538768_1692027538768.png" alt="Ditto 下载"></p>
<p>其中，</p>
<ul>
<li><code>Download 64bit</code> 为 .exe 安装文件</li>
<li><code>Portable (zip file)</code> 和 <code>Portable 64bit (zip file)</code> 为压缩包，解压后使用</li>
<li><code>Source</code> 为软件源码资源</li>
</ul>
<p>公众号【爪哇程序人生】已经准备好所有版本的压缩包文件，关注后台回复 “Ditto” 即可获取。 </p>
<h3 id="Ditto-安装"><a href="#Ditto-安装" class="headerlink" title="Ditto 安装"></a>Ditto 安装</h3><p>Ditto 软件的安装非常简单，只需要按照以下步骤进行操作即可：</p>
<ol>
<li><p><a href="https://ditto-cp.sourceforge.io/">Ditto 官网</a> 或公众号下载软件安装包，选择适合的操作系统版本</p>
</li>
<li><p>双击应用安装 Ditto 软件，按照安装向导的提示进行操作即可</p>
</li>
<li><p>如果想要使用免安装版本，则下载 <code>Portable 64bit (zip file)</code> ，解压文件后双击 <code>Ditto.exe</code> 启动程序</p>
</li>
<li><p>应用启动后，可以在 Windows 右下角图标右键 -&gt; 选项显示 Ditto 操作界面</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1692110036553_1692110036553.png" alt="Ditto 界面"></p>
<h2 id="如何使用-Ditto-软件？"><a href="#如何使用-Ditto-软件？" class="headerlink" title="如何使用 Ditto 软件？"></a>如何使用 Ditto 软件？</h2><h3 id="快速启动设置"><a href="#快速启动设置" class="headerlink" title="快速启动设置"></a>快速启动设置</h3><p>右键 Ditto 图标，点击【选项】后显示 Ditto 操作界面，切换到【键盘快捷键】，可以设置激活 Ditto 的快捷键。</p>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1692110312559_1692110312560.png" alt="Ditto 启动快捷键"></p>
<p>设置快捷键后，可以在任意位置使用快捷键激活 Ditto 粘贴版，或者鼠标左键点击 Ditto 应用图标。</p>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1692110620348_1692110620348.png" alt="Ditto 激活"></p>
<h3 id="软件自定义设置"><a href="#软件自定义设置" class="headerlink" title="软件自定义设置"></a>软件自定义设置</h3><p>Ditto 软件支持自定义设置，可以根据自己的需求来配置软件，包括剪贴板历史记录的最大数量、数据格式的优先级等。</p>
<ul>
<li><p>一般选项卡，包括剪贴板历史记录的最大数量、是否自动启动等设置</p>
</li>
<li><p>热键选项卡，可以进行键盘快捷键的设置</p>
</li>
<li><p>快速粘贴键盘，设置可以快速操作的快捷键</p>
</li>
</ul>
<h3 id="剪贴板历史记录"><a href="#剪贴板历史记录" class="headerlink" title="剪贴板历史记录"></a>剪贴板历史记录</h3><p>Ditto 软件的主要功能是剪贴板历史记录，可以保存剪贴板历史记录，包括文本、图像、文件等内容，方便随时查看和使用。</p>
<p>使用 Ditto 软件剪贴板时需要先启用剪贴板历史记录功能，启用方法如下：</p>
<ol>
<li><p>右键 Ditto 软件图标进入【选项】功能页面</p>
</li>
<li><p>在弹出的选项菜单中默认选择【一般】页面</p>
</li>
<li><p>勾选最大保存副本数量，并设置最大数量值</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1692111015498_1692111015498.png" alt="Ditto 剪贴板"></p>
<p>启用剪贴板历史记录功能后，则可以用来访问和使用剪贴板历史记录：</p>
<ol>
<li><p>使用系统复制功能或 Ctrl + C 复制多个文本</p>
</li>
<li><p>点击任意输入文本内容框，使用快捷键激活 Ditto 软件，访问剪贴板历史记录，</p>
</li>
<li><p>选择想要粘贴的内容，鼠标双击即可粘贴文本</p>
</li>
<li><p>还可以使用 Ctrl + 1/2/3 等数字键快速粘贴文本</p>
</li>
<li><p>如果文本内容过多，还可以使用搜索功能来精确查找文本，在搜索框中输入关键字来搜索剪贴板记录，双击粘贴文本</p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1691919857413_1691919857413.png" alt="文本粘贴"></p>
<h3 id="多种数据格式支持"><a href="#多种数据格式支持" class="headerlink" title="多种数据格式支持"></a>多种数据格式支持</h3><p>除了普通文本的批量粘贴，Ditto 软件还支持多种数据格式，包括图像、文件等，可以在不同的应用程序之间复制和粘贴各种不同类型的内容。</p>
<ul>
<li><p>文本，在任何应用程序中选中文本复制</p>
</li>
<li><p>图像，在任何应用程序中选中图像文件复制</p>
</li>
<li><p>文件，在 Windows 资源管理器中选中一个或多个文件复制</p>
</li>
</ul>
<p>复制完成后，可以在 Ditto 软件剪贴版历史记录中查看和使用这些类型的内容。</p>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1691919923058_1691919923058.png" alt="截图粘贴"></p>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1692111955877_1692111955877.png" alt="本地图片粘贴"></p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>Ditto 软件是一款非常实用的剪贴板管理工具，可以轻松地管理系统剪贴板历史记录，支持多种数据格式，快捷键操作，自定义设置等功能。</p>
<p>如果工作中需要经常在不同的应用程序之间复制和粘贴文本、图像、文件等内容，那么 Ditto 软件绝对是最好的效率工具。</p>
<p>关注 【爪哇程序人生】 公众号，回复 “Ditto” 获取软件包，快来体验一下吧！</p>
]]></content>
      <categories>
        <category>windows 软件</category>
      </categories>
      <tags>
        <tag>windows 软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 博客主题的选择和使用</title>
    <url>/hexo-bo-ke-zhu-ti-de-xuan-ze-he-shi-yong/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Snipaste：截图 + 贴图 = 高效办公神器</title>
    <url>/snipaste-jie-tu-tie-tu-gao-xiao-ban-gong-shen-qi/</url>
    <content><![CDATA[<h1 id="Snipaste-软件介绍和使用文档"><a href="#Snipaste-软件介绍和使用文档" class="headerlink" title="Snipaste 软件介绍和使用文档"></a>Snipaste 软件介绍和使用文档</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><p>Snipaste 是一款强大的截图工具，它不仅可以帮助用户快速截取屏幕上的任意区域，还提供了丰富的编辑和标注功能。Snipaste 的特点是简单易用、功能丰富、高效快捷，成为很多用户日常工作和学习中必备的工具。</p>
<p>官网地址：<a href="https://zh.snipaste.com/">https://zh.snipaste.com/</a></p>
<h2 id="2-安装和启动"><a href="#2-安装和启动" class="headerlink" title="2. 安装和启动"></a>2. 安装和启动</h2><p>Snipaste 的安装非常简单，只需按照以下步骤进行操作：</p>
<ol>
<li>在 Snipaste 官网（<a href="https://www.snipaste.com/%EF%BC%89%E4%B8%8B%E8%BD%BD%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC%E7%9A%84%E5%AE%89%E8%A3%85%E5%8C%85%E3%80%82">https://www.snipaste.com/）下载最新版本的安装包。</a></li>
<li>双击安装包，按照提示完成安装过程。</li>
<li>安装完成后，双击桌面上的 Snipaste 图标即可启动软件。</li>
</ol>
<h2 id="3-主要功能"><a href="#3-主要功能" class="headerlink" title="3. 主要功能"></a>3. 主要功能</h2><p>Snipaste 提供了许多实用的功能，下面介绍其中几个主要功能：</p>
<h3 id="3-1-截图"><a href="#3-1-截图" class="headerlink" title="3.1 截图"></a>3.1 截图</h3><p>Snipaste 支持多种截图方式，包括：</p>
<ul>
<li>按下快捷键（默认为 F1）进行全屏截图。</li>
<li>按下快捷键（默认为 F3）进行窗口截图。</li>
<li>按下快捷键（默认为 F4）进行自定义区域截图。</li>
</ul>
<h3 id="3-2-编辑和标注"><a href="#3-2-编辑和标注" class="headerlink" title="3.2 编辑和标注"></a>3.2 编辑和标注</h3><p>Snipaste 提供了丰富的编辑和标注功能，使用户可以对截图进行进一步处理和说明。主要功能包括：</p>
<ul>
<li>绘制图形：可以绘制矩形、圆形、箭头等各种图形，方便用户进行标注。</li>
<li>添加文字：可以在截图上添加文字说明，支持自定义字体、大小和颜色。</li>
<li>马赛克模糊：可以对敏感信息进行马赛克处理，保护隐私。</li>
<li>裁剪和旋转：可以对截图进行裁剪和旋转，使其更符合需求。</li>
</ul>
<h3 id="3-3-粘贴和分享"><a href="#3-3-粘贴和分享" class="headerlink" title="3.3 粘贴和分享"></a>3.3 粘贴和分享</h3><p>Snipaste 具有强大的粘贴和分享功能，方便用户将截图快速粘贴到其他应用程序或分享给他人。主要功能包括：</p>
<ul>
<li>粘贴到应用程序：可以将截图直接粘贴到 Word、PowerPoint、邮件等应用程序中，提高工作效率。</li>
<li>上传和分享：Snipaste 内置了图片上传和分享功能，用户可以将截图上传到云端，并生成分享链接，方便与他人共享。</li>
</ul>
<h2 id="4-快捷键设置"><a href="#4-快捷键设置" class="headerlink" title="4. 快捷键设置"></a>4. 快捷键设置</h2><p>Snipaste 支持自定义快捷键，用户可以根据自己的习惯进行设置。以下是一些常用的快捷键设置示例：</p>
<ul>
<li>全屏截图：F1</li>
<li>窗口截图：F3</li>
<li>自定义区域截图：F4</li>
<li>粘贴到应用程序：Ctrl + V</li>
<li>上传和分享：Ctrl + U</li>
</ul>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><p>Snipaste 是一款功能强大、操作简单的截图工具，它提供了丰富的编辑和标注功能，方便用户对截图进行进一步处理和分享。通过本文档的介绍，相信您已经对 Snipaste 的安装和使用有了初步的了解。希望 Snipaste 能够成为您工作和学习中的得力助手！</p>
<p>以上是关于 Snipaste 软件的介绍和使用文档，希望对您有所帮助。如有任何问题，请随时与我们联系。</p>
]]></content>
      <categories>
        <category>windows 软件</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot 使用 Validation 统一请求参数校验</title>
    <url>/springboot-shi-yong-validation-tong-yi-qing-qiu-can-shu-xiao-yan/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>SpringBoot 统一全局异常捕获处理</title>
    <url>/springboot-tong-yi-quan-ju-yi-chang-bu-huo-chu-li/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>SpringBoot 统一日志格式打印（logback）</title>
    <url>/springboot-tong-yi-ri-zhi-ge-shi-da-yin-logback/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>utools：新一代效率工具平台，提供丰富自定义工具！</title>
    <url>/utools-xin-yi-dai-xiao-lu-gong-ju-ping-tai-ti-gong-feng-fu-zi-ding-yi-gong-ju/</url>
    <content><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script>
<div id="security">
  <div class="input-container">
  <input type="password" class="form-control" id="pass" placeholder="请输入密码" />
    <label for="pass">请输入密码</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>windows 软件</category>
      </categories>
  </entry>
  <entry>
    <title>【chrome 插件】AdGuard 广告拦截器：安全清爽的互联网体验</title>
    <url>/chrome-cha-jian-adguard-guang-gao-lan-jie-qi-an-quan-qing-shuang-de-hu-lian-wang-ti-yan/</url>
    <content><![CDATA[<h2 id="AdGuard-广告拦截器介绍"><a href="#AdGuard-广告拦截器介绍" class="headerlink" title="AdGuard 广告拦截器介绍"></a>AdGuard 广告拦截器介绍</h2><h3 id="基本信息"><a href="#基本信息" class="headerlink" title="基本信息"></a>基本信息</h3><p>AdGuard 是一款功能强大的广告拦截程序，它可以帮助用户在浏览网页时过滤掉网站中烦人的广告和恶意弹窗，提升获取信息的效率，同时，作为一款 Chrome 插件，AdGuard 提供了简单易用的界面和丰富的功能，让用户能够更好地控制自己的上网体验。</p>
<p><img src="https://gitee.com/shones/images/raw/master/default/image_ac32813c-d128-4434-bf8b-33ff93b88c6b.png" alt="AdGuard"></p>
<h3 id="AdGuard-常用功能"><a href="#AdGuard-常用功能" class="headerlink" title="AdGuard 常用功能"></a>AdGuard 常用功能</h3><p>AdGuard 广告拦截器插件具备如下功能：</p>
<ol>
<li><p><strong>广告拦截</strong>：AdGuard 可以自动检测网页中的广告元素，并将其屏蔽，包括横幅广告、弹窗广告、视频广告等各种形式的广告，从而提供一个更清爽的浏览环境。</p>
</li>
<li><p><strong>隐私保护</strong>：AdGuard 可以阻止网页中的跟踪器和分析工具，保护用户的隐私信息不被收集，还可以屏蔽恶意软件和钓鱼网站，提供更安全的上网环境。</p>
</li>
<li><p><strong>网页优化</strong>：AdGuard 可以对网页进行优化，加快加载速度，减少流量消耗，通过压缩网页元素、延迟加载图片等，提升用户的浏览体验。</p>
</li>
<li><p><strong>自定义过滤规则</strong>：AdGuard 允许用户根据自己的需求定制过滤规则，包括可以添加特定的网址、关键词或正则表达式，以屏蔽特定的广告或元素。</p>
</li>
<li><p><strong>安全浏览</strong>：AdGuard 集成了安全浏览功能，可以检测和拦截恶意网站和欺诈网站，对用户访问的网页进行实时的安全评估，并提供警告和保护。</p>
</li>
</ol>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><h3 id="插件在线安装和下载"><a href="#插件在线安装和下载" class="headerlink" title="插件在线安装和下载"></a>插件在线安装和下载</h3><p>AdGuard 广告拦截器插件与其他 chrome 插件安装方式基本一样，可以采用如下方法完成安装：</p>
<ol>
<li><p>谷歌商店一键安装，<a href="https://chrome.google.com/webstore/detail/adguard-adblocker/bgnkhhnnamicmpeenaelnjfhikgbkllg?utm_source=ext_app_menu">AdGuard 广告拦截器</a> </p>
</li>
<li><p>Edge 浏览器加载项安装，<a href="https://microsoftedge.microsoft.com/addons/detail/adguard-%E5%B9%BF%E5%91%8A%E6%8B%A6%E6%88%AA%E5%99%A8/pdffkfellgipmhklpdmokmckkkfcopbh">AdGuard 广告拦截器</a> </p>
</li>
<li><p>第三方网站下载插件包，chrome 浏览器离线安装，详细安装方法可以参考：<a href="https://mp.weixin.qq.com/s?__biz=MzI5NTM3MDk4Mg==&mid=2247483994&idx=1&sn=64993edbceba0d536fd67d51c959f60a&chksm=ec55ebd3db2262c59472734665046a2ebd7da52bc308f84492382e8e9b8ad157a3c4432426b6&token=1947795853&lang=zh_CN#rd">chrome 插件食用指南！</a></p>
</li>
<li><p>已经为大家准备好插件包资源，关注公众号【爪哇程序人生】，后台回复 AdGuard 既可免费获取。</p>
</li>
</ol>
<h3 id="离线安装步骤"><a href="#离线安装步骤" class="headerlink" title="离线安装步骤"></a>离线安装步骤</h3><p>获取到插件 .crx 文件后，在浏览器中离线安装 Chrome 插件步骤如下</p>
<ol>
<li><p>打开谷歌浏览器，在地址栏输入 “chrome://extensions” 并按下回车键</p>
</li>
<li><p>在扩展程序页面的右上角，确保 “开发者模式” 处于打开状态</p>
</li>
<li><p>选择本地下载或解压的 <code>AdGuard 广告拦截器.crx</code> 文件</p>
</li>
<li><p>将插件文件拖入到 Chrome 页面中，浏览器显示拖放以安装</p>
</li>
<li><p>解析文件后提示是否将插件安装到浏览器中，选择安装既可</p>
</li>
<li><p>完成安装后，插件出现在浏览器扩展程序中</p>
</li>
</ol>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>以下是 AdGuard 广告拦截器插件的使用方法：</p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>参考浏览器插件安装方法，根据使用浏览器选择合适的安装方法，有条件的小伙伴在可以直接在 Chrome 应用商店中搜索 “AdGuard” 一键完成插件的安装。</p>
<h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>安装完成后，AdGuard 插件会出现在浏览器扩展程序中，点击 Chrome 浏览器右上角的插件图标，选择 “启用” 以激活 AdGuard。</p>
<p><img src="https://gitee.com/shones/images/raw/master/default/image_f9fc3dc8-413b-4487-bc8b-276fc03f0188.png" alt="开启 AdGuard 插件"></p>
<h3 id="自定义设置"><a href="#自定义设置" class="headerlink" title="自定义设置"></a>自定义设置</h3><p>AdGuard 广告拦截器插件默认会提供基本的广告拦截功能，如果想要自定义广告拦截的颗粒度，可以通过点击插件右上角设置按钮进入到插件的配置页面进行管理。</p>
<p><img src="https://gitee.com/shones/images/raw/master/default/image_350c84f4-22ee-4995-b9c9-a5777d9cc800.png" alt="AdGuard 配置"></p>
<p>在插件的配置页面中，可以配置网页广告过滤器，用户过滤器、网站白名单、启用隐私保护等内容，进一步定制拦截功能，为浏览器上网保驾护航。</p>
<h3 id="享受优质上网体验"><a href="#享受优质上网体验" class="headerlink" title="享受优质上网体验"></a>享受优质上网体验</h3><p>插件配置完成后，在浏览网页时 AdGuard 会自动拦截广告和恶意软件，并提供更清爽、更安全的浏览体验。</p>
<p>在上网的过程中，还可以根据实际 AdGuard 广告拦截器的拦截程度不断的优化配置，可以在插件的首页查看拦截统计信息。</p>
<p><img src="https://gitee.com/shones/images/raw/master/default/image_eaafd0e0-6f7f-4278-8967-85cefb324eff.png" alt="AdGuard 拦截统计"></p>
<p> <img src="https://gitee.com/shones/images/raw/master/default/image_899641a5-7fd9-4ea8-a0aa-83be3d126846.png" alt="AdGuard 拦截统计"> </p>
<p> 通过上述 AdGuard 的拦截分析，可以看到插件开启后就会一直默默的守护着浏览器的运行，将一切敢于降低体验的广告分子拦截在外！</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><h3 id="相似插件"><a href="#相似插件" class="headerlink" title="相似插件"></a>相似插件</h3><p>Chrome 插件市场中，除了 AdGuard 广告拦截器插件外，还有一些其他类似功能的插件可以使用，如果认为 AdGuard 插件不能满足个人使用，还可以尝试如下插件进行使用。</p>
<ul>
<li>AdGuard 广告拦截器</li>
<li>AdBlock — 最佳广告拦截工具</li>
<li>Adblock Plus - 免费的广告拦截器</li>
<li>广告终结者</li>
</ul>
<p>有兴趣的小伙伴可以使用体检，总有一款适合你！关注公众号【爪哇程序人生】，后台回复 “Chrome 去广告插件” 可以获得所有上述四款去广告插件包哦~</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>总的来说，AdGuard 广告拦截器是一款功能强大、易于使用的 Chrome 插件，可以帮助用户过滤广告、保护隐私、优化网页加载速度，并提供安全的上网环境。</p>
<p>在基本的过滤广告功能上，AdGuard 提供了自定义功能，用户可以根据个人需求进行定制配置，获得合适的使用体验。</p>
<p>赶紧为你的浏览器安装一款广告拦截器插件，享受无广告、无干扰的浏览体验吧！</p>
]]></content>
      <categories>
        <category>chrome 插件</category>
      </categories>
      <tags>
        <tag>chrome 插件</tag>
      </tags>
  </entry>
  <entry>
    <title>【chrome 插件】Bito 随时使用的 GPT 超级智能！</title>
    <url>/chrome-cha-jian-bito-sui-shi-shi-yong-de-gpt-chao-ji-zhi-neng/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>【chrome 插件】Extension Manager：可视化管理浏览器插件</title>
    <url>/chrome-cha-jian-extension-manager-ke-shi-hua-guan-li-liu-lan-qi-cha-jian/</url>
    <content><![CDATA[<p>当谈到浏览器扩展管理时，Chrome 是最受欢迎的浏览器之一，Chrome 的强大之处在于其丰富的插件生态系统，提供了各种各样的扩展，可以增强浏览器的功能和性能。</p>
<p>在本文中，我们将介绍一款优秀的 Chrome 插件扩展管理工具——Extension Manager，并探讨其如何帮助用户更好地管理和组织他们的扩展。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc6b5ef29a2e498b827b50a8d4d76c21~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=599&h=160&e=png&b=ffffff"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="使用背景"><a href="#使用背景" class="headerlink" title="使用背景"></a>使用背景</h3><p>Chrome 浏览器声名远播的一个重要原因就是其支持用户自定义安装插件，可以基于浏览器实现更丰富的功能和使用体验。但是，Chrome 浏览器令人嫌弃的一个方面恰恰其是对电脑内存占用过高，其中就有浏览器插件的责任。</p>
<p>如果想要为浏览器增添众多的插件功能，又希望能够合理管理浏览器内存占用，那么就需要一个贴心的插件管理工具了。</p>
<h3 id="插件管理方法"><a href="#插件管理方法" class="headerlink" title="插件管理方法"></a>插件管理方法</h3><p>Extension Manager 是一款功能强大且易于使用的 Chrome 插件，旨在帮助用户管理和控制他们的扩展，该插件提供了一个直观的界面，让用户可以轻松地查看、启用、禁用和卸载他们的扩展。</p>
<p>无论是插件爱好者还是一个需要管理大量扩展的专业用户，只要需要合理分配浏览器插件内存，那么 Extension Manager 就能轻轻满足使用需求。</p>
<h3 id="Extension-Manager-功能介绍"><a href="#Extension-Manager-功能介绍" class="headerlink" title="Extension Manager 功能介绍"></a>Extension Manager 功能介绍</h3><p>使用 Extension Manager 插件可以实现所有扩展，快捷、简单、安全的管理，一键开启/禁用所有扩展，批量闪电管理，大小布局随心配，让您的浏览器更加高效。</p>
<p>相关功能包括如下内容</p>
<ul>
<li>  <strong>快速开启/禁用</strong>：闪电分组，根据场景快速开启/禁用扩展组（被锁定或主题类扩展除外）</li>
<li>  <strong>智能排序</strong>：根据您的使用频率智能排序扩展（默认根据名称排序）</li>
<li>  <strong>右键菜单</strong>：提供锁定、卸载、选项配置、主页、APP运行等快捷功能</li>
<li>  <strong>智能搜索</strong>：通过关键字或词组快速找到需要的扩展</li>
<li>  <strong>角标提醒</strong>：实时显示扩展状态，用完后提醒重置，减少资源占用（被锁定或主题类扩展除外）</li>
<li>  <strong>视图选择</strong>：提供列表视图和网格视图，符合用户习惯</li>
<li>  <strong>分组管理</strong>：普通分组和固定分组，灵活管理</li>
<li>  <strong>扩展命名</strong>：给扩展起一个你喜欢的别名</li>
<li>  <strong>自动匹配</strong>：根据不同的网站自动开启和关闭扩展</li>
</ul>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><h3 id="插件在线安装和下载"><a href="#插件在线安装和下载" class="headerlink" title="插件在线安装和下载"></a>插件在线安装和下载</h3><p>Extension Manager 插件与其他 Chrome 插件安装方式基本一样，可以采用如下方法完成安装：</p>
<ol>
<li> 谷歌商店一键安装，<a href="https://chrome.google.com/webstore/detail/photoshow/mgpdnhlllbpncjpgokgfogidhoegebod?utm_source=ext_app_menu">Extension Manager</a></li>
<li> Edge 浏览器加载项安装，<a href="https://microsoftedge.microsoft.com/addons/detail/%E6%89%A9%E5%B1%95%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%88extension-manager%EF%BC%89/bhahgfgngfghgjhnpplmemebhenieijb">Extension Manager</a></li>
<li> 第三方网站下载插件包，chrome 浏览器离线安装，详细安装方法可以参考：<a href="https://shonee.github.io/chrome-cha-jian-shi-yong-zhi-nan-chi-xu-geng-xin/">chrome 插件食用指南！【亲测可用】</a></li>
<li> 已经下载打包好插件包，关注公众号【爪哇程序人生】，后台回复 Extension Manager 既可获取插件包。</li>
</ol>
<h3 id="离线安装步骤"><a href="#离线安装步骤" class="headerlink" title="离线安装步骤"></a>离线安装步骤</h3><p>离线安装 Chrome 插件步骤如下</p>
<ol>
<li> 打开谷歌浏览器，在地址栏输入 “chrome://extensions” 并按下回车键</li>
<li> 在扩展程序页面的右上角，确保 “开发者模式” 处于打开状态</li>
<li> 选择本地下载或解压的 Extension Manager.crx 文件</li>
<li> 将插件文件拖入到 Chrome 页面中，浏览器显示拖放以安装</li>
<li> 解析文件后提示是否将插件安装到浏览器中，选择安装既可</li>
<li> 完成安装后，插件出现在浏览器扩展程序中</li>
</ol>
<h2 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h2><p>Extension Manager 提供了一个清晰的扩展列表，显示了用户安装的所有扩展，这个列表可以根据不同的标准进行排序和过滤，使用户能够快速找到他们需要的扩展。此外，Extension Manager 还提供了一个搜索功能，让用户可以根据关键词搜索他们的扩展，进一步提高了管理效率。</p>
<h3 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h3><p>Extension Manager 插件的使用非常简单，安装插件完成后，浏览器插件栏就会出现对应的图标</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/58bc7462eb70434ea75fe495e0843ba6~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=233&h=49&e=png&b=fdfdfd"></p>
<ul>
<li>  图标的右下角表示当前开启的插件的数量，一目了然</li>
</ul>
<p>使用时只需要鼠标左键点击插件图标，就会展开插件管理页面，在页面中可以看到开启和关闭的插件信息，点击插件就可以实现开启/禁用的状态切换，十分方便。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0db3b5ab04644784be2e83fc92a17aa4~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=572&h=609&e=png&b=fafafa"></p>
<p>如果插件内容较多，可以使用搜索功能根据名称搜索指定插件，将鼠标移动到具体插件上，可以对插件进行锁定、卸载、主页查看等操作。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fdd66199d2734cec83eccc2577d6fd6c~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=449&h=220&e=png&b=fafafa"></p>
<h3 id="插件自定义设置"><a href="#插件自定义设置" class="headerlink" title="插件自定义设置"></a>插件自定义设置</h3><p>如果对插件默认的管理视图不满意，还可以在设置中心自定义展示样式，可以配置视图、外观、角标、排序等信息，还可以对插件进行分组管理展示，实现打造完全自定义的插件管理页面。</p>
<p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/391fe46d52ba42f6a7c86c86ef919f1d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1304&h=743&e=png&b=f7f7f7"></p>
<hr>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>总的来说，Extension Manager 是一款功能强大且易于使用的 Chrome 插件扩展管理工具。它提供了丰富的功能和工具，帮助用户更好地管理和组织他们的扩展。</p>
<p>无论是普通用户还是一个浏览器深度使用者，只要使用了浏览器插件，Extension Manager 都值得一试，该插件将提供更好的扩展管理体验，使浏览器更加高效和个性化。</p>
]]></content>
  </entry>
  <entry>
    <title>【chrome 插件】PhotoShow 浮图秀：网页图片浏览利器</title>
    <url>/chrome-cha-jian-photoshow-fu-tu-xiu-wang-ye-tu-pian-liu-lan-li-qi/</url>
    <content><![CDATA[<h1 id="PhotoShow-谷歌插件介绍和使用文档"><a href="#PhotoShow-谷歌插件介绍和使用文档" class="headerlink" title="PhotoShow 谷歌插件介绍和使用文档"></a>PhotoShow 谷歌插件介绍和使用文档</h1><h2 id="PhotoShow-浮图秀介绍"><a href="#PhotoShow-浮图秀介绍" class="headerlink" title="PhotoShow 浮图秀介绍"></a>PhotoShow 浮图秀介绍</h2><p>PhotoShow（浮图秀）是一款帮助用户快速查看页面中缩略图对应大图的谷歌浏览器插件，可以在浏览网页时随时对其中的图片文件进行放大展示，无需点击进入详情后预览图片。</p>
<p>PhotoShow（浮图秀）目前已经支持了包括京东、天猫、淘宝、知乎、微博等 140 余个网站，在浏览这些网站时，插件默认配置只需要使用鼠标对其中的图片悬停既可以自动展示高分辨率图片，无论是浏览或下载图片，PhotoShow 都能起到很大的作用。</p>
<p>接下来将从插件安装、功能内容、使用效果等方面详细介绍 PhotoShow 插件的安装、配置和使用方法。</p>
<h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><h3 id="插件在线安装和下载"><a href="#插件在线安装和下载" class="headerlink" title="插件在线安装和下载"></a>插件在线安装和下载</h3><p>PhotoShow 插件与其他 chrome 插件安装方式基本一样，可以采用如下方法完成安装：</p>
<ol>
<li><p>谷歌商店一键安装，<a href="https://chrome.google.com/webstore/detail/photoshow/mgpdnhlllbpncjpgokgfogidhoegebod?utm_source=ext_app_menu">PhotoShow</a> </p>
</li>
<li><p>Edge 浏览器加载项安装，<a href="https://microsoftedge.microsoft.com/addons/detail/%E6%B5%AE%E5%9B%BE%E7%A7%80/afdelcfalkgcfelngdclbaijgeaklbjk">PhotoShow</a> </p>
</li>
<li><p>第三方网站下载插件包，chrome 浏览器离线安装，详细安装方法可以参考：<a href="https://shonee.github.io/chrome-cha-jian-shi-yong-zhi-nan-chi-xu-geng-xin/">chrome 插件食用指南！【亲测可用】</a></p>
</li>
<li><p>已经下载打包好插件包，只需要关注公众号【爪哇程序人生】，后台回复 PhotoShow 既可以获取。</p>
</li>
</ol>
<h3 id="离线安装步骤"><a href="#离线安装步骤" class="headerlink" title="离线安装步骤"></a>离线安装步骤</h3><p>离线安装 Chrome 插件步骤如下</p>
<ol>
<li><p>打开谷歌浏览器，在地址栏输入 “chrome://extensions” 并按下回车键</p>
</li>
<li><p>在扩展程序页面的右上角，确保 “开发者模式” 处于打开状态</p>
</li>
<li><p>选择本地下载或解压的 <code>PhotoShow 浮图秀.crx</code> 文件</p>
</li>
<li><p>将插件文件拖入到 Chrome 页面中，浏览器显示拖放以安装</p>
</li>
<li><p>解析文件后提示是否将插件安装到浏览器中，选择安装既可</p>
</li>
<li><p>完成安装后，插件出现在浏览器扩展程序中</p>
</li>
</ol>
<h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>插件安装完成后，可以在浏览器右上角插件区域中找到 PhotoShow 浮图秀</p>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1690989728416_1690989728416.png" alt="插件展示"></p>
<p>如果没有展示，则可以在右侧的扩展程序中将该插件固定到浏览器页面中。</p>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1690989830465_1690989830465.png" alt="固定标签"></p>
<h3 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h3><p>在可以启用插件的网站（含有图片的网页）中鼠标左键点击插件，就可以展示插件的配置信息</p>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1690989969497_1690989969497.png" alt="功能展示"></p>
<p>在配置中可以对 PhotoShow 插件的生效网站、启用逻辑、生效快捷键、延迟时间、图片展示方式、位置、大小等内容进行配置，实现最适合自己的一个图片预览效果。</p>
<h3 id="预览图片操作"><a href="#预览图片操作" class="headerlink" title="预览图片操作"></a>预览图片操作</h3><p>使用 PhotoShow 对图片进行预览后，还可以进一步对预览的图片进行操作，如旋转、切换、复制、保存到本地等操作，插件中提供了不同操作对应的快捷键。</p>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1690990181297_1690990181297.png" alt="预览图片操作"></p>
<h3 id="文件保存规则"><a href="#文件保存规则" class="headerlink" title="文件保存规则"></a>文件保存规则</h3><p>使用 PhotoShow 可以非常方便的对浏览的图片进行保存，插件还可以对保存时文件的名称进行自定义，如下格式对文件名称进行规则配置。</p>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1690990311414_1690990311414.png" alt="文件保存规则"></p>
<h2 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h2><p>PhotoShow 浮图秀插件在支持的网站上默认开启，并且将鼠标在图片上放置超过 200ms 就会展示预览内容。</p>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1690990625176_1690990625176.png" alt="微博图片预览"></p>
<p>对预览图片进行旋转操作</p>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1690990821782_1690990821782.png" alt="微博图片预览"></p>
<p>B 站视频封面预览</p>
<p><img src="https://raw.githubusercontent.com/Shonee/imageBed/master/default/image_1690990926363_1690990926363.png" alt="微博图片预览"></p>
<p>更多插件使用方法，可以自己上手使用体验。</p>
<h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>使用时需要注意的时，PhotoShow 插件支持多种图片格式，包括 JPEG、PNG、GIF 等，如果图片源文件比较大可能加载速度会慢一些。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>通过 PhotoShow 谷歌插件可以方便地浏览、操作和下载网页图片，无论是浏览网页或是下载图片，PhotoShow 都会带来非常好的一种体验。</p>
<p>尤其是在当下大部分网站图片详情预览时会新开页面加载，使用该插件可以保证页面浏览的连贯性，不会被查看图片阻碍内容的浏览。</p>
<p>插件的安装和配置非常简单，强烈建议有需要的小伙伴下载尝试！</p>
]]></content>
      <categories>
        <category>chrome 插件</category>
      </categories>
      <tags>
        <tag>chrome 插件</tag>
      </tags>
  </entry>
</search>
